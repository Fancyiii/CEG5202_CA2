
TEMPLATE_3S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005f08  08005f08  00006f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d4  080062d4  00008270  2**0
                  CONTENTS
  4 .ARM          00000008  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062dc  080062dc  00008270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062dc  080062dc  000072dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e0  080062e0  000072e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080062e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000270  08006554  00008270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08006554  000084ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a74e  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002036  00000000  00000000  000129ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00014a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078d  00000000  00000000  00015458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281aa  00000000  00000000  00015be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddf1  00000000  00000000  0003dd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3372  00000000  00000000  0004bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  0013ef38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001429e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005eec 	.word	0x08005eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08005eec 	.word	0x08005eec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
#include "stdio.h"

extern void initialise_monitor_handles(void);	// for semi-hosting support (printf)

int main(void)
{
 8000ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bac:	b096      	sub	sp, #88	@ 0x58
 8000bae:	af0a      	add	r7, sp, #40	@ 0x28
	initialise_monitor_handles(); // for semi-hosting support (printf)
 8000bb0:	f002 fc82 	bl	80034b8 <initialise_monitor_handles>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bb4:	f001 f882 	bl	8001cbc <HAL_Init>

	/* Peripheral initializations using BSP functions */
	BSP_ACCELERO_Init();
 8000bb8:	f000 fb10 	bl	80011dc <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8000bbc:	f000 fbee 	bl	800139c <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8000bc0:	f000 fb64 	bl	800128c <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init();
 8000bc4:	f000 fb90 	bl	80012e8 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();
 8000bc8:	f000 fbba 	bl	8001340 <BSP_PSENSOR_Init>


	while (1)
	{
		float accel_data[3];
		int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	809a      	strh	r2, [r3, #4]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fb3e 	bl	800125c <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
		accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8000be0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bec:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8000cb0 <main+0x108>
 8000bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf4:	edc7 7a06 	vstr	s15, [r7, #24]
		accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8000bf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c04:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8000cb0 <main+0x108>
 8000c08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c0c:	edc7 7a07 	vstr	s15, [r7, #28]
		accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8000c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c1c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000cb0 <main+0x108>
 8000c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c24:	edc7 7a08 	vstr	s15, [r7, #32]

		float temp_data;
		temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 8000c28:	f000 fbd4 	bl	80013d4 <BSP_TSENSOR_ReadTemp>
 8000c2c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

		float humidity_data;
		humidity_data = BSP_HSENSOR_ReadHumidity();  // read humidity sensor
 8000c30:	f000 fb4c 	bl	80012cc <BSP_HSENSOR_ReadHumidity>
 8000c34:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
//		magneto_data[0] = (float)magneto_data_i16[0] / 100.0f;
//		magneto_data[1] = (float)magneto_data_i16[1] / 100.0f;
//		magneto_data[2] = (float)magneto_data_i16[2] / 100.0f;

		float pressure_data;
		pressure_data = BSP_PSENSOR_ReadPressure();
 8000c38:	f000 fba2 	bl	8001380 <BSP_PSENSOR_ReadPressure>
 8000c3c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24



		printf("Accel XYZ=%f %f %f; Temperature=%f; humidity=%f; pressure=%f\n", accel_data[0], accel_data[1], accel_data[2], temp_data, humidity_data, pressure_data);
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc80 	bl	8000548 <__aeabi_f2d>
 8000c48:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc7a 	bl	8000548 <__aeabi_f2d>
 8000c54:	4604      	mov	r4, r0
 8000c56:	460d      	mov	r5, r1
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fc74 	bl	8000548 <__aeabi_f2d>
 8000c60:	4680      	mov	r8, r0
 8000c62:	4689      	mov	r9, r1
 8000c64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000c66:	f7ff fc6f 	bl	8000548 <__aeabi_f2d>
 8000c6a:	4682      	mov	sl, r0
 8000c6c:	468b      	mov	fp, r1
 8000c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c70:	f7ff fc6a 	bl	8000548 <__aeabi_f2d>
 8000c74:	e9c7 0100 	strd	r0, r1, [r7]
 8000c78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c7a:	f7ff fc65 	bl	8000548 <__aeabi_f2d>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000c86:	ed97 7b00 	vldr	d7, [r7]
 8000c8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c8e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000c92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000c96:	e9cd 4500 	strd	r4, r5, [sp]
 8000c9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <main+0x10c>)
 8000ca0:	f003 f99e 	bl	8003fe0 <iprintf>
		HAL_Delay(1000);	// read once a ~second.
 8000ca4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca8:	f001 f878 	bl	8001d9c <HAL_Delay>
	{
 8000cac:	bf00      	nop
 8000cae:	e78d      	b.n	8000bcc <main+0x24>
 8000cb0:	42c80000 	.word	0x42c80000
 8000cb4:	08005f08 	.word	0x08005f08

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x44>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x44>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_I2C_MspInit+0x7c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d128      	bne.n	8000d74 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_I2C_MspInit+0x80>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a16      	ldr	r2, [pc, #88]	@ (8000d80 <HAL_I2C_MspInit+0x80>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_I2C_MspInit+0x80>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <HAL_I2C_MspInit+0x84>)
 8000d58:	f001 f954 	bl	8002004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_I2C_MspInit+0x80>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_I2C_MspInit+0x80>)
 8000d62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_I2C_MspInit+0x80>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	@ 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005800 	.word	0x40005800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000400 	.word	0x48000400

08000d88 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_I2C_MspDeInit+0x30>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10a      	bne.n	8000db0 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_I2C_MspDeInit+0x34>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_I2C_MspDeInit+0x34>)
 8000da0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000da4:	6593      	str	r3, [r2, #88]	@ 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8000da6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <HAL_I2C_MspDeInit+0x38>)
 8000dac:	f001 fad4 	bl	8002358 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	bf00      	nop
 8000dd8:	e7fd      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dda <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dde:	bf00      	nop
 8000de0:	e7fd      	b.n	8000dde <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <BusFault_Handler+0x4>

08000dea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dee:	bf00      	nop
 8000df0:	e7fd      	b.n	8000dee <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 ff9e 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	f001 fb87 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000e32:	2040      	movs	r0, #64	@ 0x40
 8000e34:	f001 fb84 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e38:	2080      	movs	r0, #128	@ 0x80
 8000e3a:	f001 fb81 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000e42:	f001 fb7d 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e4e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e52:	f001 fb75 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e56:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e5a:	f001 fb71 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e5e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e62:	f001 fb6d 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000e66:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e6a:	f001 fb69 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e6e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e72:	f001 fb65 	bl	8002540 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <SystemInit+0x64>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e86:	4a16      	ldr	r2, [pc, #88]	@ (8000ee0 <SystemInit+0x64>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <SystemInit+0x68>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <SystemInit+0x68>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <SystemInit+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <SystemInit+0x68>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee4 <SystemInit+0x68>)
 8000ea8:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000eac:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <SystemInit+0x68>)
 8000eb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <SystemInit+0x68>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <SystemInit+0x68>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <SystemInit+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SystemInit+0x64>)
 8000ece:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eee:	e003      	b.n	8000ef8 <LoopCopyDataInit>

08000ef0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ef2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ef4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ef6:	3104      	adds	r1, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ef8:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000efc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000efe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f00:	d3f6      	bcc.n	8000ef0 <CopyDataInit>
	ldr	r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f04:	e002      	b.n	8000f0c <LoopFillZerobss>

08000f06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f08:	f842 3b04 	str.w	r3, [r2], #4

08000f0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <LoopForever+0x16>)
	cmp	r2, r3
 8000f0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f10:	d3f9      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f12:	f7ff ffb3 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f003 f9a5 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1a:	f7ff fe45 	bl	8000ba8 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f24:	080062e4 	.word	0x080062e4
	ldr	r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f2c:	20000270 	.word	0x20000270
	ldr	r2, =_sbss
 8000f30:	20000270 	.word	0x20000270
	ldr	r3, = _ebss
 8000f34:	200004ec 	.word	0x200004ec

08000f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>
	...

08000f3c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f44:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f48:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000f5c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f62:	2312      	movs	r3, #18
 8000f64:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	@ (8000fe8 <I2Cx_MspInit+0xac>)
 8000f7a:	f001 f843 	bl	8002004 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4818      	ldr	r0, [pc, #96]	@ (8000fe8 <I2Cx_MspInit+0xac>)
 8000f86:	f001 f83d 	bl	8002004 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000f90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f96:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fac:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <I2Cx_MspInit+0xa8>)
 8000fb4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000fb8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	2021      	movs	r0, #33	@ 0x21
 8000fc0:	f000 ffe9 	bl	8001f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000fc4:	2021      	movs	r0, #33	@ 0x21
 8000fc6:	f001 f802 	bl	8001fce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	210f      	movs	r1, #15
 8000fce:	2022      	movs	r0, #34	@ 0x22
 8000fd0:	f000 ffe1 	bl	8001f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000fd4:	2022      	movs	r0, #34	@ 0x22
 8000fd6:	f000 fffa 	bl	8001fce <HAL_NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	@ 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000400 	.word	0x48000400

08000fec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <I2Cx_Init+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <I2Cx_Init+0x58>)
 8000ffe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff89 	bl	8000f3c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f001 faab 	bl	8002586 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001030:	2100      	movs	r1, #0
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f001 ffb0 	bl	8002f98 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40005800 	.word	0x40005800
 8001044:	00702681 	.word	0x00702681

08001048 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af04      	add	r7, sp, #16
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	460b      	mov	r3, r1
 800105c:	813b      	strh	r3, [r7, #8]
 800105e:	4613      	mov	r3, r2
 8001060:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	b299      	uxth	r1, r3
 800106a:	88f8      	ldrh	r0, [r7, #6]
 800106c:	893a      	ldrh	r2, [r7, #8]
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f001 fc54 	bl	800292c <HAL_I2C_Mem_Read>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	4619      	mov	r1, r3
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f832 	bl	80010fc <I2Cx_Error>
  }
  return status;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b08a      	sub	sp, #40	@ 0x28
 80010a6:	af04      	add	r7, sp, #16
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	460b      	mov	r3, r1
 80010b6:	813b      	strh	r3, [r7, #8]
 80010b8:	4613      	mov	r3, r2
 80010ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010c0:	7afb      	ldrb	r3, [r7, #11]
 80010c2:	b299      	uxth	r1, r3
 80010c4:	88f8      	ldrh	r0, [r7, #6]
 80010c6:	893a      	ldrh	r2, [r7, #8]
 80010c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	4603      	mov	r3, r0
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f001 fb13 	bl	8002704 <HAL_I2C_Mem_Write>
 80010de:	4603      	mov	r3, r0
 80010e0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	4619      	mov	r1, r3
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f805 	bl	80010fc <I2Cx_Error>
  }
  return status;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f001 facb 	bl	80026a4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff6c 	bl	8000fec <I2Cx_Init>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <SENSOR_IO_Init+0x10>)
 8001122:	f7ff ff63 	bl	8000fec <I2Cx_Init>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000028c 	.word	0x2000028c

08001130 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af02      	add	r7, sp, #8
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	460b      	mov	r3, r1
 800113c:	71bb      	strb	r3, [r7, #6]
 800113e:	4613      	mov	r3, r2
 8001140:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	b29a      	uxth	r2, r3
 8001146:	79f9      	ldrb	r1, [r7, #7]
 8001148:	2301      	movs	r3, #1
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	1d7b      	adds	r3, r7, #5
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <SENSOR_IO_Write+0x30>)
 8001154:	f7ff ffa5 	bl	80010a2 <I2Cx_WriteMultiple>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000028c 	.word	0x2000028c

08001164 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	b29a      	uxth	r2, r3
 800117c:	79f9      	ldrb	r1, [r7, #7]
 800117e:	2301      	movs	r3, #1
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	f107 030f 	add.w	r3, r7, #15
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2301      	movs	r3, #1
 800118a:	4804      	ldr	r0, [pc, #16]	@ (800119c <SENSOR_IO_Read+0x38>)
 800118c:	f7ff ff5c 	bl	8001048 <I2Cx_ReadMultiple>

  return read_value;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000028c 	.word	0x2000028c

080011a0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	603a      	str	r2, [r7, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	460b      	mov	r3, r1
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	79f9      	ldrb	r1, [r7, #7]
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <SENSOR_IO_ReadMultiple+0x38>)
 80011c8:	f7ff ff3e 	bl	8001048 <I2Cx_ReadMultiple>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000028c 	.word	0x2000028c

080011dc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80011e6:	2300      	movs	r3, #0
 80011e8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <BSP_ACCELERO_Init+0x78>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	4798      	blx	r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b6a      	cmp	r3, #106	@ 0x6a
 80011f4:	d002      	beq.n	80011fc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e025      	b.n	8001248 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <BSP_ACCELERO_Init+0x7c>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <BSP_ACCELERO_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001202:	2330      	movs	r3, #48	@ 0x30
 8001204:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800120a:	2300      	movs	r3, #0
 800120c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800120e:	2340      	movs	r3, #64	@ 0x40
 8001210:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800121a:	797a      	ldrb	r2, [r7, #5]
 800121c:	7abb      	ldrb	r3, [r7, #10]
 800121e:	4313      	orrs	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001224:	7a3b      	ldrb	r3, [r7, #8]
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	b21b      	sxth	r3, r3
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <BSP_ACCELERO_Init+0x7c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	89ba      	ldrh	r2, [r7, #12]
 8001244:	4610      	mov	r0, r2
 8001246:	4798      	blx	r3
  }  

  return ret;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000060 	.word	0x20000060
 8001258:	200002d8 	.word	0x200002d8

0800125c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d009      	beq.n	8001280 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	2b00      	cmp	r3, #0
 8001274:	d004      	beq.n	8001280 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	4798      	blx	r3
    }
  }
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002d8 	.word	0x200002d8

0800128c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <BSP_HSENSOR_Init+0x38>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	20be      	movs	r0, #190	@ 0xbe
 8001298:	4798      	blx	r3
 800129a:	4603      	mov	r3, r0
 800129c:	2bbc      	cmp	r3, #188	@ 0xbc
 800129e:	d002      	beq.n	80012a6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e009      	b.n	80012ba <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80012a6:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <BSP_HSENSOR_Init+0x3c>)
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <BSP_HSENSOR_Init+0x38>)
 80012aa:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <BSP_HSENSOR_Init+0x3c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	20be      	movs	r0, #190	@ 0xbe
 80012b4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80012ba:	687b      	ldr	r3, [r7, #4]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000004 	.word	0x20000004
 80012c8:	200002dc 	.word	0x200002dc

080012cc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <BSP_HSENSOR_ReadHumidity+0x18>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	20be      	movs	r0, #190	@ 0xbe
 80012d8:	4798      	blx	r3
 80012da:	eef0 7a40 	vmov.f32	s15, s0
}
 80012de:	eeb0 0a67 	vmov.f32	s0, s15
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200002dc 	.word	0x200002dc

080012e8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <BSP_MAGNETO_Init+0x50>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	4798      	blx	r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b3d      	cmp	r3, #61	@ 0x3d
 80012fc:	d002      	beq.n	8001304 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e013      	b.n	800132c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <BSP_MAGNETO_Init+0x54>)
 8001306:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <BSP_MAGNETO_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800130a:	2358      	movs	r3, #88	@ 0x58
 800130c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800130e:	2300      	movs	r3, #0
 8001310:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001312:	2300      	movs	r3, #0
 8001314:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001316:	2308      	movs	r3, #8
 8001318:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800131a:	2340      	movs	r3, #64	@ 0x40
 800131c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <BSP_MAGNETO_Init+0x54>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	463a      	mov	r2, r7
 8001326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800132a:	4798      	blx	r3
  } 

  return ret;  
 800132c:	79fb      	ldrb	r3, [r7, #7]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000020 	.word	0x20000020
 800133c:	200002e0 	.word	0x200002e0

08001340 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <BSP_PSENSOR_Init+0x38>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	20ba      	movs	r0, #186	@ 0xba
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	2bb1      	cmp	r3, #177	@ 0xb1
 8001352:	d002      	beq.n	800135a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	e009      	b.n	800136e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <BSP_PSENSOR_Init+0x3c>)
 800135c:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <BSP_PSENSOR_Init+0x38>)
 800135e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <BSP_PSENSOR_Init+0x3c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	20ba      	movs	r0, #186	@ 0xba
 8001368:	4798      	blx	r3
    ret = PSENSOR_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000054 	.word	0x20000054
 800137c:	200002e4 	.word	0x200002e4

08001380 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <BSP_PSENSOR_ReadPressure+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	20ba      	movs	r0, #186	@ 0xba
 800138c:	4798      	blx	r3
 800138e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001392:	eeb0 0a67 	vmov.f32	s0, s15
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200002e4 	.word	0x200002e4

0800139c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <BSP_TSENSOR_Init+0x30>)
 80013a8:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <BSP_TSENSOR_Init+0x34>)
 80013aa:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80013ac:	f7ff feb6 	bl	800111c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <BSP_TSENSOR_Init+0x30>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2100      	movs	r1, #0
 80013b8:	20be      	movs	r0, #190	@ 0xbe
 80013ba:	4798      	blx	r3

  ret = TSENSOR_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002e8 	.word	0x200002e8
 80013d0:	20000010 	.word	0x20000010

080013d4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <BSP_TSENSOR_ReadTemp+0x18>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	20be      	movs	r0, #190	@ 0xbe
 80013e0:	4798      	blx	r3
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200002e8 	.word	0x200002e8

080013f0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2120      	movs	r1, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff feaf 	bl	8001164 <SENSOR_IO_Read>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f023 0303 	bic.w	r3, r3, #3
 8001420:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001430:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	7bfa      	ldrb	r2, [r7, #15]
 8001438:	2120      	movs	r1, #32
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe78 	bl	8001130 <SENSOR_IO_Write>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001456:	f7ff fe61 	bl	800111c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	210f      	movs	r1, #15
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fe7f 	bl	8001164 <SENSOR_IO_Read>
 8001466:	4603      	mov	r3, r0
 8001468:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2d8      	uxtb	r0, r3
 8001482:	f107 020c 	add.w	r2, r7, #12
 8001486:	2302      	movs	r3, #2
 8001488:	21b0      	movs	r1, #176	@ 0xb0
 800148a:	f7ff fe89 	bl	80011a0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800148e:	7b3b      	ldrb	r3, [r7, #12]
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	2302      	movs	r3, #2
 80014a8:	21b6      	movs	r1, #182	@ 0xb6
 80014aa:	f7ff fe79 	bl	80011a0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80014ae:	7b7b      	ldrb	r3, [r7, #13]
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	b2d8      	uxtb	r0, r3
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	2302      	movs	r3, #2
 80014c8:	21ba      	movs	r1, #186	@ 0xba
 80014ca:	f7ff fe69 	bl	80011a0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80014ce:	7b7b      	ldrb	r3, [r7, #13]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	b2d8      	uxtb	r0, r3
 80014e2:	f107 020c 	add.w	r2, r7, #12
 80014e6:	2302      	movs	r3, #2
 80014e8:	21a8      	movs	r1, #168	@ 0xa8
 80014ea:	f7ff fe59 	bl	80011a0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	b21b      	sxth	r3, r3
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80014fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001502:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	ee07 3a90 	vmov	s15, r3
 800150c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001510:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001514:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001522:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001526:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800152a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800153c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154c:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001550:	edd7 7a04 	vldr	s15, [r7, #16]
 8001554:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001560:	edd7 7a04 	vldr	s15, [r7, #16]
 8001564:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80015a8 <HTS221_H_ReadHumidity+0x134>
 8001568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	dd01      	ble.n	8001576 <HTS221_H_ReadHumidity+0x102>
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <HTS221_H_ReadHumidity+0x138>)
 8001574:	e00a      	b.n	800158c <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 8001576:	edd7 7a04 	vldr	s15, [r7, #16]
 800157a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d502      	bpl.n	800158a <HTS221_H_ReadHumidity+0x116>
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e000      	b.n	800158c <HTS221_H_ReadHumidity+0x118>
 800158a:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800158c:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800158e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001592:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001596:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800159a:	eef0 7a66 	vmov.f32	s15, s13
}
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	447a0000 	.word	0x447a0000
 80015ac:	447a0000 	.word	0x447a0000

080015b0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2120      	movs	r1, #32
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fdce 	bl	8001164 <SENSOR_IO_Read>
 80015c8:	4603      	mov	r3, r0
 80015ca:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	f023 0304 	bic.w	r3, r3, #4
 80015d2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015f2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	2120      	movs	r1, #32
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd97 	bl	8001130 <SENSOR_IO_Write>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b088      	sub	sp, #32
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	b2d8      	uxtb	r0, r3
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	2302      	movs	r3, #2
 800161e:	21b2      	movs	r1, #178	@ 0xb2
 8001620:	f7ff fdbe 	bl	80011a0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2135      	movs	r1, #53	@ 0x35
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fd9a 	bl	8001164 <SENSOR_IO_Read>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	b21b      	sxth	r3, r3
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21b      	sxth	r3, r3
 800163c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001640:	b21a      	sxth	r2, r3
 8001642:	7a3b      	ldrb	r3, [r7, #8]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	b21b      	sxth	r3, r3
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	b21b      	sxth	r3, r3
 8001652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001656:	b21a      	sxth	r2, r3
 8001658:	7a7b      	ldrb	r3, [r7, #9]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001660:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001664:	10db      	asrs	r3, r3, #3
 8001666:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001668:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800166c:	10db      	asrs	r3, r3, #3
 800166e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	b2d8      	uxtb	r0, r3
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	2304      	movs	r3, #4
 800167a:	21bc      	movs	r1, #188	@ 0xbc
 800167c:	f7ff fd90 	bl	80011a0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001680:	7a7b      	ldrb	r3, [r7, #9]
 8001682:	b21b      	sxth	r3, r3
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	b21a      	sxth	r2, r3
 8001688:	7a3b      	ldrb	r3, [r7, #8]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001690:	7afb      	ldrb	r3, [r7, #11]
 8001692:	b21b      	sxth	r3, r3
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b21a      	sxth	r2, r3
 8001698:	7abb      	ldrb	r3, [r7, #10]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	b2d8      	uxtb	r0, r3
 80016a4:	f107 0208 	add.w	r2, r7, #8
 80016a8:	2302      	movs	r3, #2
 80016aa:	21aa      	movs	r1, #170	@ 0xaa
 80016ac:	f7ff fd78 	bl	80011a0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80016b0:	7a7b      	ldrb	r3, [r7, #9]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	7a3b      	ldrb	r3, [r7, #8]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80016c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80016c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016e8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80016ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	ee07 3a90 	vmov	s15, r3
}
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	463b      	mov	r3, r7
 800172a:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800172e:	783b      	ldrb	r3, [r7, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	2120      	movs	r1, #32
 8001734:	203c      	movs	r0, #60	@ 0x3c
 8001736:	f7ff fcfb 	bl	8001130 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800173a:	787b      	ldrb	r3, [r7, #1]
 800173c:	461a      	mov	r2, r3
 800173e:	2121      	movs	r1, #33	@ 0x21
 8001740:	203c      	movs	r0, #60	@ 0x3c
 8001742:	f7ff fcf5 	bl	8001130 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001746:	78bb      	ldrb	r3, [r7, #2]
 8001748:	461a      	mov	r2, r3
 800174a:	2122      	movs	r1, #34	@ 0x22
 800174c:	203c      	movs	r0, #60	@ 0x3c
 800174e:	f7ff fcef 	bl	8001130 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	461a      	mov	r2, r3
 8001756:	2123      	movs	r1, #35	@ 0x23
 8001758:	203c      	movs	r0, #60	@ 0x3c
 800175a:	f7ff fce9 	bl	8001130 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800175e:	793b      	ldrb	r3, [r7, #4]
 8001760:	461a      	mov	r2, r3
 8001762:	2124      	movs	r1, #36	@ 0x24
 8001764:	203c      	movs	r0, #60	@ 0x3c
 8001766:	f7ff fce3 	bl	8001130 <SENSOR_IO_Write>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001778:	2300      	movs	r3, #0
 800177a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800177c:	2122      	movs	r1, #34	@ 0x22
 800177e:	203c      	movs	r0, #60	@ 0x3c
 8001780:	f7ff fcf0 	bl	8001164 <SENSOR_IO_Read>
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f043 0303 	orr.w	r3, r3, #3
 8001796:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	461a      	mov	r2, r3
 800179c:	2122      	movs	r1, #34	@ 0x22
 800179e:	203c      	movs	r0, #60	@ 0x3c
 80017a0:	f7ff fcc6 	bl	8001130 <SENSOR_IO_Write>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80017b0:	f7ff fcb4 	bl	800111c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80017b4:	210f      	movs	r1, #15
 80017b6:	203c      	movs	r0, #60	@ 0x3c
 80017b8:	f7ff fcd4 	bl	8001164 <SENSOR_IO_Read>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80017d0:	2122      	movs	r1, #34	@ 0x22
 80017d2:	203c      	movs	r0, #60	@ 0x3c
 80017d4:	f7ff fcc6 	bl	8001164 <SENSOR_IO_Read>
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	f023 0320 	bic.w	r3, r3, #32
 80017e2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	461a      	mov	r2, r3
 80017f6:	2122      	movs	r1, #34	@ 0x22
 80017f8:	203c      	movs	r0, #60	@ 0x3c
 80017fa:	f7ff fc99 	bl	8001130 <SENSOR_IO_Write>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001810:	2300      	movs	r3, #0
 8001812:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800181e:	2121      	movs	r1, #33	@ 0x21
 8001820:	203c      	movs	r0, #60	@ 0x3c
 8001822:	f7ff fc9f 	bl	8001164 <SENSOR_IO_Read>
 8001826:	4603      	mov	r3, r0
 8001828:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800182a:	f107 0208 	add.w	r2, r7, #8
 800182e:	2306      	movs	r3, #6
 8001830:	21a8      	movs	r1, #168	@ 0xa8
 8001832:	203c      	movs	r0, #60	@ 0x3c
 8001834:	f7ff fcb4 	bl	80011a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	77fb      	strb	r3, [r7, #31]
 800183c:	e01a      	b.n	8001874 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800183e:	7ffb      	ldrb	r3, [r7, #31]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	3301      	adds	r3, #1
 8001844:	3320      	adds	r3, #32
 8001846:	443b      	add	r3, r7
 8001848:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b29b      	uxth	r3, r3
 8001850:	7ffa      	ldrb	r2, [r7, #31]
 8001852:	0052      	lsls	r2, r2, #1
 8001854:	3220      	adds	r2, #32
 8001856:	443a      	add	r2, r7
 8001858:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800185c:	4413      	add	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	7ffb      	ldrb	r3, [r7, #31]
 8001862:	b212      	sxth	r2, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	3320      	adds	r3, #32
 8001868:	443b      	add	r3, r7
 800186a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800186e:	7ffb      	ldrb	r3, [r7, #31]
 8001870:	3301      	adds	r3, #1
 8001872:	77fb      	strb	r3, [r7, #31]
 8001874:	7ffb      	ldrb	r3, [r7, #31]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d9e1      	bls.n	800183e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001880:	2b60      	cmp	r3, #96	@ 0x60
 8001882:	d013      	beq.n	80018ac <LIS3MDL_MagReadXYZ+0xa4>
 8001884:	2b60      	cmp	r3, #96	@ 0x60
 8001886:	dc14      	bgt.n	80018b2 <LIS3MDL_MagReadXYZ+0xaa>
 8001888:	2b40      	cmp	r3, #64	@ 0x40
 800188a:	d00c      	beq.n	80018a6 <LIS3MDL_MagReadXYZ+0x9e>
 800188c:	2b40      	cmp	r3, #64	@ 0x40
 800188e:	dc10      	bgt.n	80018b2 <LIS3MDL_MagReadXYZ+0xaa>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <LIS3MDL_MagReadXYZ+0x92>
 8001894:	2b20      	cmp	r3, #32
 8001896:	d003      	beq.n	80018a0 <LIS3MDL_MagReadXYZ+0x98>
 8001898:	e00b      	b.n	80018b2 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <LIS3MDL_MagReadXYZ+0xf8>)
 800189c:	61bb      	str	r3, [r7, #24]
    break;
 800189e:	e008      	b.n	80018b2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <LIS3MDL_MagReadXYZ+0xfc>)
 80018a2:	61bb      	str	r3, [r7, #24]
    break;
 80018a4:	e005      	b.n	80018b2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <LIS3MDL_MagReadXYZ+0x100>)
 80018a8:	61bb      	str	r3, [r7, #24]
    break;
 80018aa:	e002      	b.n	80018b2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80018ac:	4b17      	ldr	r3, [pc, #92]	@ (800190c <LIS3MDL_MagReadXYZ+0x104>)
 80018ae:	61bb      	str	r3, [r7, #24]
    break;    
 80018b0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	77fb      	strb	r3, [r7, #31]
 80018b6:	e01a      	b.n	80018ee <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	3320      	adds	r3, #32
 80018be:	443b      	add	r3, r7
 80018c0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80018d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e0:	ee17 2a90 	vmov	r2, s15
 80018e4:	b212      	sxth	r2, r2
 80018e6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	3301      	adds	r3, #1
 80018ec:	77fb      	strb	r3, [r7, #31]
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d9e1      	bls.n	80018b8 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	3e0f5c29 	.word	0x3e0f5c29
 8001904:	3e947ae1 	.word	0x3e947ae1
 8001908:	3edc28f6 	.word	0x3edc28f6
 800190c:	3f147ae1 	.word	0x3f147ae1

08001910 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f879 	bl	8001a14 <LPS22HB_Init>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001938:	f7ff fbf0 	bl	800111c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	210f      	movs	r1, #15
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fc0e 	bl	8001164 <SENSOR_IO_Read>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	74fb      	strb	r3, [r7, #19]
 800196a:	e013      	b.n	8001994 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	7cfb      	ldrb	r3, [r7, #19]
 8001972:	3328      	adds	r3, #40	@ 0x28
 8001974:	b2db      	uxtb	r3, r3
 8001976:	7cfc      	ldrb	r4, [r7, #19]
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fbf2 	bl	8001164 <SENSOR_IO_Read>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	f104 0318 	add.w	r3, r4, #24
 8001988:	443b      	add	r3, r7
 800198a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800198e:	7cfb      	ldrb	r3, [r7, #19]
 8001990:	3301      	adds	r3, #1
 8001992:	74fb      	strb	r3, [r7, #19]
 8001994:	7cfb      	ldrb	r3, [r7, #19]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d9e8      	bls.n	800196c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	74fb      	strb	r3, [r7, #19]
 800199e:	e00f      	b.n	80019c0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80019a0:	7cfb      	ldrb	r3, [r7, #19]
 80019a2:	3318      	adds	r3, #24
 80019a4:	443b      	add	r3, r7
 80019a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019aa:	461a      	mov	r2, r3
 80019ac:	7cfb      	ldrb	r3, [r7, #19]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80019ba:	7cfb      	ldrb	r3, [r7, #19]
 80019bc:	3301      	adds	r3, #1
 80019be:	74fb      	strb	r3, [r7, #19]
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d9ec      	bls.n	80019a0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80019d6:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2264      	movs	r2, #100	@ 0x64
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da01      	bge.n	80019ec <LPS22HB_P_ReadPressure+0x94>
 80019e8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80019ec:	131b      	asrs	r3, r3, #12
 80019ee:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001a10 <LPS22HB_P_ReadPressure+0xb8>
 80019fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a02:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd90      	pop	{r4, r7, pc}
 8001a10:	42c80000 	.word	0x42c80000

08001a14 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	211a      	movs	r1, #26
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fb9d 	bl	8001164 <SENSOR_IO_Read>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	211a      	movs	r1, #26
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fb72 	bl	8001130 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2110      	movs	r1, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fb86 	bl	8001164 <SENSOR_IO_Read>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a62:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001a6a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	f023 0302 	bic.w	r3, r3, #2
 8001a72:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	2110      	movs	r1, #16
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fb53 	bl	8001130 <SENSOR_IO_Write>
}  
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	20d4      	movs	r0, #212	@ 0xd4
 8001aa4:	f7ff fb5e 	bl	8001164 <SENSOR_IO_Read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001ab8:	7bba      	ldrb	r2, [r7, #14]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001ac0:	7bbb      	ldrb	r3, [r7, #14]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2110      	movs	r1, #16
 8001ac6:	20d4      	movs	r0, #212	@ 0xd4
 8001ac8:	f7ff fb32 	bl	8001130 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001acc:	2112      	movs	r1, #18
 8001ace:	20d4      	movs	r0, #212	@ 0xd4
 8001ad0:	f7ff fb48 	bl	8001164 <SENSOR_IO_Read>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001ae0:	7bbb      	ldrb	r3, [r7, #14]
 8001ae2:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001ae6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001ae8:	7bba      	ldrb	r2, [r7, #14]
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	461a      	mov	r2, r3
 8001af4:	2112      	movs	r1, #18
 8001af6:	20d4      	movs	r0, #212	@ 0xd4
 8001af8:	f7ff fb1a 	bl	8001130 <SENSOR_IO_Write>
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b0e:	2110      	movs	r1, #16
 8001b10:	20d4      	movs	r0, #212	@ 0xd4
 8001b12:	f7ff fb27 	bl	8001164 <SENSOR_IO_Read>
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	461a      	mov	r2, r3
 8001b26:	2110      	movs	r1, #16
 8001b28:	20d4      	movs	r0, #212	@ 0xd4
 8001b2a:	f7ff fb01 	bl	8001130 <SENSOR_IO_Write>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001b3a:	f7ff faef 	bl	800111c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001b3e:	210f      	movs	r1, #15
 8001b40:	20d4      	movs	r0, #212	@ 0xd4
 8001b42:	f7ff fb0f 	bl	8001164 <SENSOR_IO_Read>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001b5a:	2115      	movs	r1, #21
 8001b5c:	20d4      	movs	r0, #212	@ 0xd4
 8001b5e:	f7ff fb01 	bl	8001164 <SENSOR_IO_Read>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	f023 0310 	bic.w	r3, r3, #16
 8001b6c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	f043 0310 	orr.w	r3, r3, #16
 8001b7a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2115      	movs	r1, #21
 8001b82:	20d4      	movs	r0, #212	@ 0xd4
 8001b84:	f7ff fad4 	bl	8001130 <SENSOR_IO_Write>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	20d4      	movs	r0, #212	@ 0xd4
 8001baa:	f7ff fadb 	bl	8001164 <SENSOR_IO_Read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001bb2:	f107 0208 	add.w	r2, r7, #8
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	2128      	movs	r1, #40	@ 0x28
 8001bba:	20d4      	movs	r0, #212	@ 0xd4
 8001bbc:	f7ff faf0 	bl	80011a0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
 8001bc4:	e01a      	b.n	8001bfc <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	3301      	adds	r3, #1
 8001bcc:	3320      	adds	r3, #32
 8001bce:	443b      	add	r3, r7
 8001bd0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	7ffa      	ldrb	r2, [r7, #31]
 8001bda:	0052      	lsls	r2, r2, #1
 8001bdc:	3220      	adds	r2, #32
 8001bde:	443a      	add	r2, r7
 8001be0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001be4:	4413      	add	r3, r2
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	b212      	sxth	r2, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	3320      	adds	r3, #32
 8001bf0:	443b      	add	r3, r7
 8001bf2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	77fb      	strb	r3, [r7, #31]
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d9e1      	bls.n	8001bc6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	d829      	bhi.n	8001c60 <LSM6DSL_AccReadXYZ+0xd0>
 8001c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <LSM6DSL_AccReadXYZ+0x84>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c49 	.word	0x08001c49
 8001c18:	08001c61 	.word	0x08001c61
 8001c1c:	08001c61 	.word	0x08001c61
 8001c20:	08001c61 	.word	0x08001c61
 8001c24:	08001c5b 	.word	0x08001c5b
 8001c28:	08001c61 	.word	0x08001c61
 8001c2c:	08001c61 	.word	0x08001c61
 8001c30:	08001c61 	.word	0x08001c61
 8001c34:	08001c4f 	.word	0x08001c4f
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	08001c61 	.word	0x08001c61
 8001c40:	08001c61 	.word	0x08001c61
 8001c44:	08001c55 	.word	0x08001c55
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <LSM6DSL_AccReadXYZ+0x11c>)
 8001c4a:	61bb      	str	r3, [r7, #24]
    break;
 8001c4c:	e008      	b.n	8001c60 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <LSM6DSL_AccReadXYZ+0x120>)
 8001c50:	61bb      	str	r3, [r7, #24]
    break;
 8001c52:	e005      	b.n	8001c60 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <LSM6DSL_AccReadXYZ+0x124>)
 8001c56:	61bb      	str	r3, [r7, #24]
    break;
 8001c58:	e002      	b.n	8001c60 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <LSM6DSL_AccReadXYZ+0x128>)
 8001c5c:	61bb      	str	r3, [r7, #24]
    break;    
 8001c5e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	77fb      	strb	r3, [r7, #31]
 8001c64:	e01a      	b.n	8001c9c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	3320      	adds	r3, #32
 8001c6c:	443b      	add	r3, r7
 8001c6e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c8e:	ee17 2a90 	vmov	r2, s15
 8001c92:	b212      	sxth	r2, r2
 8001c94:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d9e1      	bls.n	8001c66 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	3d79db23 	.word	0x3d79db23
 8001cb0:	3df9db23 	.word	0x3df9db23
 8001cb4:	3e79db23 	.word	0x3e79db23
 8001cb8:	3ef9db23 	.word	0x3ef9db23

08001cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f000 f95a 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 f80d 	bl	8001cec <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	e001      	b.n	8001ce2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cde:	f7fe ffeb 	bl	8000cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_InitTick+0x68>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d022      	beq.n	8001d46 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d00:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_InitTick+0x6c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_InitTick+0x68>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 f968 	bl	8001fea <HAL_SYSTICK_Config>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10f      	bne.n	8001d40 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	d809      	bhi.n	8001d3a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d26:	2200      	movs	r2, #0
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2e:	f000 f932 	bl	8001f96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_InitTick+0x70>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e004      	b.n	8001d4a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e001      	b.n	8001d4a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000098 	.word	0x20000098
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000094 	.word	0x20000094

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_IncTick+0x1c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a03      	ldr	r2, [pc, #12]	@ (8001d7c <HAL_IncTick+0x1c>)
 8001d70:	6013      	str	r3, [r2, #0]
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200002ec 	.word	0x200002ec
 8001d80:	20000098 	.word	0x20000098

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200002ec 	.word	0x200002ec

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d004      	beq.n	8001dc0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <HAL_Delay+0x40>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc0:	bf00      	nop
 8001dc2:	f7ff ffdf 	bl	8001d84 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d8f7      	bhi.n	8001dc2 <HAL_Delay+0x26>
  {
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000098 	.word	0x20000098

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4907      	ldr	r1, [pc, #28]	@ (8001e7c <__NVIC_EnableIRQ+0x38>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	@ (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	@ (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	@ 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ff8e 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff29 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa8:	f7ff ff3e 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff8e 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff5d 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff31 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ffa2 	bl	8001f3c <SysTick_Config>
 8001ff8:	4603      	mov	r3, r0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	e17f      	b.n	8002314 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8171 	beq.w	800230e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d00b      	beq.n	800204c <HAL_GPIO_Init+0x48>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d007      	beq.n	800204c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002040:	2b11      	cmp	r3, #17
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b12      	cmp	r3, #18
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d118      	bne.n	80020ec <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x128>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b12      	cmp	r3, #18
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80ac 	beq.w	800230e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002334 <HAL_GPIO_Init+0x330>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002334 <HAL_GPIO_Init+0x330>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002334 <HAL_GPIO_Init+0x330>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ce:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <HAL_GPIO_Init+0x334>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021f8:	d025      	beq.n	8002246 <HAL_GPIO_Init+0x242>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4f      	ldr	r2, [pc, #316]	@ (800233c <HAL_GPIO_Init+0x338>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <HAL_GPIO_Init+0x23e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4e      	ldr	r2, [pc, #312]	@ (8002340 <HAL_GPIO_Init+0x33c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x23a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4d      	ldr	r2, [pc, #308]	@ (8002344 <HAL_GPIO_Init+0x340>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x236>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4c      	ldr	r2, [pc, #304]	@ (8002348 <HAL_GPIO_Init+0x344>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x232>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4b      	ldr	r2, [pc, #300]	@ (800234c <HAL_GPIO_Init+0x348>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x22e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	@ (8002350 <HAL_GPIO_Init+0x34c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x22a>
 800222a:	2306      	movs	r3, #6
 800222c:	e00c      	b.n	8002248 <HAL_GPIO_Init+0x244>
 800222e:	2307      	movs	r3, #7
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002232:	2305      	movs	r3, #5
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x244>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x244>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002246:	2300      	movs	r3, #0
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002258:	4937      	ldr	r1, [pc, #220]	@ (8002338 <HAL_GPIO_Init+0x334>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002266:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <HAL_GPIO_Init+0x350>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800228a:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <HAL_GPIO_Init+0x350>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002290:	4b30      	ldr	r3, [pc, #192]	@ (8002354 <HAL_GPIO_Init+0x350>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022b4:	4a27      	ldr	r2, [pc, #156]	@ (8002354 <HAL_GPIO_Init+0x350>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ba:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <HAL_GPIO_Init+0x350>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022de:	4a1d      	ldr	r2, [pc, #116]	@ (8002354 <HAL_GPIO_Init+0x350>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_GPIO_Init+0x350>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002308:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <HAL_GPIO_Init+0x350>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	f47f ae78 	bne.w	8002014 <HAL_GPIO_Init+0x10>
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000
 800233c:	48000400 	.word	0x48000400
 8002340:	48000800 	.word	0x48000800
 8002344:	48000c00 	.word	0x48000c00
 8002348:	48001000 	.word	0x48001000
 800234c:	48001400 	.word	0x48001400
 8002350:	48001800 	.word	0x48001800
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002366:	e0cd      	b.n	8002504 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002368:	2201      	movs	r2, #1
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80c0 	beq.w	80024fe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800237e:	4a68      	ldr	r2, [pc, #416]	@ (8002520 <HAL_GPIO_DeInit+0x1c8>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023a6:	d025      	beq.n	80023f4 <HAL_GPIO_DeInit+0x9c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002524 <HAL_GPIO_DeInit+0x1cc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d01f      	beq.n	80023f0 <HAL_GPIO_DeInit+0x98>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002528 <HAL_GPIO_DeInit+0x1d0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d019      	beq.n	80023ec <HAL_GPIO_DeInit+0x94>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	@ (800252c <HAL_GPIO_DeInit+0x1d4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_DeInit+0x90>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002530 <HAL_GPIO_DeInit+0x1d8>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_DeInit+0x8c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a5a      	ldr	r2, [pc, #360]	@ (8002534 <HAL_GPIO_DeInit+0x1dc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_DeInit+0x88>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a59      	ldr	r2, [pc, #356]	@ (8002538 <HAL_GPIO_DeInit+0x1e0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_DeInit+0x84>
 80023d8:	2306      	movs	r3, #6
 80023da:	e00c      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023dc:	2307      	movs	r3, #7
 80023de:	e00a      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e008      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023e4:	2304      	movs	r3, #4
 80023e6:	e006      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e004      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e002      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_GPIO_DeInit+0x9e>
 80023f4:	2300      	movs	r3, #0
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	f002 0203 	and.w	r2, r2, #3
 80023fc:	0092      	lsls	r2, r2, #2
 80023fe:	4093      	lsls	r3, r2
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	429a      	cmp	r2, r3
 8002404:	d132      	bne.n	800246c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002406:	4b4d      	ldr	r3, [pc, #308]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	494b      	ldr	r1, [pc, #300]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 8002410:	4013      	ands	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002414:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	4947      	ldr	r1, [pc, #284]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 800241e:	4013      	ands	r3, r2
 8002420:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002422:	4b46      	ldr	r3, [pc, #280]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	4944      	ldr	r1, [pc, #272]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 800242c:	4013      	ands	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002430:	4b42      	ldr	r3, [pc, #264]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	4940      	ldr	r1, [pc, #256]	@ (800253c <HAL_GPIO_DeInit+0x1e4>)
 800243a:	4013      	ands	r3, r2
 800243c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800244e:	4a34      	ldr	r2, [pc, #208]	@ (8002520 <HAL_GPIO_DeInit+0x1c8>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43da      	mvns	r2, r3
 800245e:	4830      	ldr	r0, [pc, #192]	@ (8002520 <HAL_GPIO_DeInit+0x1c8>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	400a      	ands	r2, r1
 8002466:	3302      	adds	r3, #2
 8002468:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2103      	movs	r1, #3
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	4019      	ands	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2103      	movs	r1, #3
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2101      	movs	r1, #1
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2103      	movs	r1, #3
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ee:	2101      	movs	r1, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	401a      	ands	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	f47f af2b 	bne.w	8002368 <HAL_GPIO_DeInit+0x10>
  }
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40010000 	.word	0x40010000
 8002524:	48000400 	.word	0x48000400
 8002528:	48000800 	.word	0x48000800
 800252c:	48000c00 	.word	0x48000c00
 8002530:	48001000 	.word	0x48001000
 8002534:	48001400 	.word	0x48001400
 8002538:	48001800 	.word	0x48001800
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800254a:	4b08      	ldr	r3, [pc, #32]	@ (800256c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002556:	4a05      	ldr	r2, [pc, #20]	@ (800256c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800255c:	88fb      	ldrh	r3, [r7, #6]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f806 	bl	8002570 <HAL_GPIO_EXTI_Callback>
  }
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e081      	b.n	800269c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fe fba7 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2224      	movs	r2, #36	@ 0x24
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	e006      	b.n	800260e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800260c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d104      	bne.n	8002620 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800261e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800262e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002632:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002642:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69d9      	ldr	r1, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e021      	b.n	80026fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2224      	movs	r2, #36	@ 0x24
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fb5a 	bl	8000d88 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	f040 80f9 	bne.w	800291e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_I2C_Mem_Write+0x34>
 8002732:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0ed      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_I2C_Mem_Write+0x4e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0e6      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800275a:	f7ff fb13 	bl	8001d84 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2319      	movs	r3, #25
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fac3 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d1      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2221      	movs	r2, #33	@ 0x21
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800279c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a4:	88f8      	ldrh	r0, [r7, #6]
 80027a6:	893a      	ldrh	r2, [r7, #8]
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4603      	mov	r3, r0
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f9d3 	bl	8002b60 <I2C_RequestMemoryWrite>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0a9      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	@ 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	@ 0xff
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fba5 	bl	8002f3c <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fb94 	bl	8002f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 faad 	bl	8002d78 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e07b      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d034      	beq.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d130      	bne.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002870:	2200      	movs	r2, #0
 8002872:	2180      	movs	r1, #128	@ 0x80
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fa3f 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e04d      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2bff      	cmp	r3, #255	@ 0xff
 800288c:	d90e      	bls.n	80028ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	@ 0xff
 8002892:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	b2da      	uxtb	r2, r3
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	2300      	movs	r3, #0
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fb49 	bl	8002f3c <I2C_TransferConfig>
 80028aa:	e00f      	b.n	80028cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	8979      	ldrh	r1, [r7, #10]
 80028be:	2300      	movs	r3, #0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fb38 	bl	8002f3c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d19e      	bne.n	8002814 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 fa8c 	bl	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e01a      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2220      	movs	r2, #32
 80028f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_I2C_Mem_Write+0x224>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
  }
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	fe00e800 	.word	0xfe00e800

0800292c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	f040 80fd 	bne.w	8002b4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_I2C_Mem_Read+0x34>
 800295a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0f1      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_I2C_Mem_Read+0x4e>
 8002976:	2302      	movs	r3, #2
 8002978:	e0ea      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002982:	f7ff f9ff 	bl	8001d84 <HAL_GetTick>
 8002986:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2319      	movs	r3, #25
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f9af 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d5      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2222      	movs	r2, #34	@ 0x22
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2240      	movs	r2, #64	@ 0x40
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029cc:	88f8      	ldrh	r0, [r7, #6]
 80029ce:	893a      	ldrh	r2, [r7, #8]
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4603      	mov	r3, r0
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f913 	bl	8002c08 <I2C_RequestMemoryRead>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0ad      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2bff      	cmp	r3, #255	@ 0xff
 80029fc:	d90e      	bls.n	8002a1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22ff      	movs	r2, #255	@ 0xff
 8002a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	8979      	ldrh	r1, [r7, #10]
 8002a0c:	4b52      	ldr	r3, [pc, #328]	@ (8002b58 <HAL_I2C_Mem_Read+0x22c>)
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fa91 	bl	8002f3c <I2C_TransferConfig>
 8002a1a:	e00f      	b.n	8002a3c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	8979      	ldrh	r1, [r7, #10]
 8002a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b58 <HAL_I2C_Mem_Read+0x22c>)
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fa80 	bl	8002f3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a42:	2200      	movs	r2, #0
 8002a44:	2104      	movs	r1, #4
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f956 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07c      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d034      	beq.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2180      	movs	r1, #128	@ 0x80
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f927 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e04d      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2bff      	cmp	r3, #255	@ 0xff
 8002abc:	d90e      	bls.n	8002adc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	@ 0xff
 8002ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fa31 	bl	8002f3c <I2C_TransferConfig>
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa20 	bl	8002f3c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d19a      	bne.n	8002a3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f974 	bl	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01a      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_I2C_Mem_Read+0x230>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	80002400 	.word	0x80002400
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <I2C_RequestMemoryWrite+0xa4>)
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f9d7 	bl	8002f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	69b9      	ldr	r1, [r7, #24]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8f0 	bl	8002d78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02c      	b.n	8002bfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bb2:	e015      	b.n	8002be0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8d6 	bl	8002d78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e012      	b.n	8002bfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd6:	893b      	ldrh	r3, [r7, #8]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f884 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	80002000 	.word	0x80002000

08002c08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	4b20      	ldr	r3, [pc, #128]	@ (8002cac <I2C_RequestMemoryRead+0xa4>)
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f984 	bl	8002f3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f89d 	bl	8002d78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e02c      	b.n	8002ca2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c58:	e015      	b.n	8002c86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5a:	893b      	ldrh	r3, [r7, #8]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f883 	bl	8002d78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e012      	b.n	8002ca2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f831 	bl	8002cf8 <I2C_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	80002000 	.word	0x80002000

08002cb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d103      	bne.n	8002cce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d007      	beq.n	8002cec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	619a      	str	r2, [r3, #24]
  }
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d08:	e022      	b.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d01e      	beq.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7ff f837 	bl	8001d84 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d113      	bne.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e00f      	b.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d0cd      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d84:	e02c      	b.n	8002de0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f870 	bl	8002e70 <I2C_IsAcknowledgeFailed>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e02a      	b.n	8002df0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da0:	d01e      	beq.n	8002de0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da2:	f7fe ffef 	bl	8001d84 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d113      	bne.n	8002de0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e007      	b.n	8002df0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d1cb      	bne.n	8002d86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e04:	e028      	b.n	8002e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f830 	bl	8002e70 <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e026      	b.n	8002e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fe ffb3 	bl	8001d84 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d113      	bne.n	8002e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e34:	f043 0220 	orr.w	r2, r3, #32
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e007      	b.n	8002e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d1cf      	bne.n	8002e06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d151      	bne.n	8002f2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e8a:	e022      	b.n	8002ed2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d01e      	beq.n	8002ed2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e94:	f7fe ff76 	bl	8001d84 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d302      	bcc.n	8002eaa <I2C_IsAcknowledgeFailed+0x3a>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d113      	bne.n	8002ed2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e02e      	b.n	8002f30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d1d5      	bne.n	8002e8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2220      	movs	r2, #32
 8002eee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fedd 	bl	8002cb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f02:	400b      	ands	r3, r1
 8002f04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f043 0204 	orr.w	r2, r3, #4
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	fe00e800 	.word	0xfe00e800

08002f3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	817b      	strh	r3, [r7, #10]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	0d5b      	lsrs	r3, r3, #21
 8002f58:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <I2C_TransferConfig+0x58>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	43db      	mvns	r3, r3
 8002f62:	ea02 0103 	and.w	r1, r2, r3
 8002f66:	897b      	ldrh	r3, [r7, #10]
 8002f68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f6c:	7a7b      	ldrb	r3, [r7, #9]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	03ff63ff 	.word	0x03ff63ff

08002f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d138      	bne.n	8003020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e032      	b.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <findslot>:
 8003030:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <findslot+0x2c>)
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	b118      	cbz	r0, 8003042 <findslot+0x12>
 800303a:	6a03      	ldr	r3, [r0, #32]
 800303c:	b90b      	cbnz	r3, 8003042 <findslot+0x12>
 800303e:	f000 ff99 	bl	8003f74 <__sinit>
 8003042:	2c13      	cmp	r4, #19
 8003044:	d807      	bhi.n	8003056 <findslot+0x26>
 8003046:	4806      	ldr	r0, [pc, #24]	@ (8003060 <findslot+0x30>)
 8003048:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800304c:	3201      	adds	r2, #1
 800304e:	d002      	beq.n	8003056 <findslot+0x26>
 8003050:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003054:	bd10      	pop	{r4, pc}
 8003056:	2000      	movs	r0, #0
 8003058:	e7fc      	b.n	8003054 <findslot+0x24>
 800305a:	bf00      	nop
 800305c:	200000b4 	.word	0x200000b4
 8003060:	20000300 	.word	0x20000300

08003064 <error>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	4604      	mov	r4, r0
 8003068:	f001 f8f6 	bl	8004258 <__errno>
 800306c:	2613      	movs	r6, #19
 800306e:	4605      	mov	r5, r0
 8003070:	2700      	movs	r7, #0
 8003072:	4630      	mov	r0, r6
 8003074:	4639      	mov	r1, r7
 8003076:	beab      	bkpt	0x00ab
 8003078:	4606      	mov	r6, r0
 800307a:	602e      	str	r6, [r5, #0]
 800307c:	4620      	mov	r0, r4
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003080 <checkerror>:
 8003080:	1c43      	adds	r3, r0, #1
 8003082:	d101      	bne.n	8003088 <checkerror+0x8>
 8003084:	f7ff bfee 	b.w	8003064 <error>
 8003088:	4770      	bx	lr

0800308a <_swiread>:
 800308a:	b530      	push	{r4, r5, lr}
 800308c:	b085      	sub	sp, #20
 800308e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003092:	9203      	str	r2, [sp, #12]
 8003094:	2406      	movs	r4, #6
 8003096:	ad01      	add	r5, sp, #4
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	beab      	bkpt	0x00ab
 800309e:	4604      	mov	r4, r0
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ffed 	bl	8003080 <checkerror>
 80030a6:	b005      	add	sp, #20
 80030a8:	bd30      	pop	{r4, r5, pc}

080030aa <_read>:
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	460e      	mov	r6, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	f7ff ffbe 	bl	8003030 <findslot>
 80030b4:	4605      	mov	r5, r0
 80030b6:	b930      	cbnz	r0, 80030c6 <_read+0x1c>
 80030b8:	f001 f8ce 	bl	8004258 <__errno>
 80030bc:	2309      	movs	r3, #9
 80030be:	6003      	str	r3, [r0, #0]
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	6800      	ldr	r0, [r0, #0]
 80030c8:	4622      	mov	r2, r4
 80030ca:	4631      	mov	r1, r6
 80030cc:	f7ff ffdd 	bl	800308a <_swiread>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d0f5      	beq.n	80030c0 <_read+0x16>
 80030d4:	686b      	ldr	r3, [r5, #4]
 80030d6:	1a20      	subs	r0, r4, r0
 80030d8:	4403      	add	r3, r0
 80030da:	606b      	str	r3, [r5, #4]
 80030dc:	e7f2      	b.n	80030c4 <_read+0x1a>

080030de <_swilseek>:
 80030de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030e0:	460c      	mov	r4, r1
 80030e2:	4616      	mov	r6, r2
 80030e4:	f7ff ffa4 	bl	8003030 <findslot>
 80030e8:	4605      	mov	r5, r0
 80030ea:	b940      	cbnz	r0, 80030fe <_swilseek+0x20>
 80030ec:	f001 f8b4 	bl	8004258 <__errno>
 80030f0:	2309      	movs	r3, #9
 80030f2:	6003      	str	r3, [r0, #0]
 80030f4:	f04f 34ff 	mov.w	r4, #4294967295
 80030f8:	4620      	mov	r0, r4
 80030fa:	b003      	add	sp, #12
 80030fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fe:	2e02      	cmp	r6, #2
 8003100:	d903      	bls.n	800310a <_swilseek+0x2c>
 8003102:	f001 f8a9 	bl	8004258 <__errno>
 8003106:	2316      	movs	r3, #22
 8003108:	e7f3      	b.n	80030f2 <_swilseek+0x14>
 800310a:	2e01      	cmp	r6, #1
 800310c:	d112      	bne.n	8003134 <_swilseek+0x56>
 800310e:	6843      	ldr	r3, [r0, #4]
 8003110:	18e4      	adds	r4, r4, r3
 8003112:	d4f6      	bmi.n	8003102 <_swilseek+0x24>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	260a      	movs	r6, #10
 8003118:	e9cd 3400 	strd	r3, r4, [sp]
 800311c:	466f      	mov	r7, sp
 800311e:	4630      	mov	r0, r6
 8003120:	4639      	mov	r1, r7
 8003122:	beab      	bkpt	0x00ab
 8003124:	4606      	mov	r6, r0
 8003126:	4630      	mov	r0, r6
 8003128:	f7ff ffaa 	bl	8003080 <checkerror>
 800312c:	2800      	cmp	r0, #0
 800312e:	dbe1      	blt.n	80030f4 <_swilseek+0x16>
 8003130:	606c      	str	r4, [r5, #4]
 8003132:	e7e1      	b.n	80030f8 <_swilseek+0x1a>
 8003134:	2e02      	cmp	r6, #2
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	d1ec      	bne.n	8003114 <_swilseek+0x36>
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	260c      	movs	r6, #12
 800313e:	466f      	mov	r7, sp
 8003140:	4630      	mov	r0, r6
 8003142:	4639      	mov	r1, r7
 8003144:	beab      	bkpt	0x00ab
 8003146:	4606      	mov	r6, r0
 8003148:	4630      	mov	r0, r6
 800314a:	f7ff ff99 	bl	8003080 <checkerror>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d0d0      	beq.n	80030f4 <_swilseek+0x16>
 8003152:	4404      	add	r4, r0
 8003154:	e7de      	b.n	8003114 <_swilseek+0x36>

08003156 <_lseek>:
 8003156:	f7ff bfc2 	b.w	80030de <_swilseek>

0800315a <_swiwrite>:
 800315a:	b530      	push	{r4, r5, lr}
 800315c:	b085      	sub	sp, #20
 800315e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003162:	9203      	str	r2, [sp, #12]
 8003164:	2405      	movs	r4, #5
 8003166:	ad01      	add	r5, sp, #4
 8003168:	4620      	mov	r0, r4
 800316a:	4629      	mov	r1, r5
 800316c:	beab      	bkpt	0x00ab
 800316e:	4604      	mov	r4, r0
 8003170:	4620      	mov	r0, r4
 8003172:	f7ff ff85 	bl	8003080 <checkerror>
 8003176:	b005      	add	sp, #20
 8003178:	bd30      	pop	{r4, r5, pc}

0800317a <_write>:
 800317a:	b570      	push	{r4, r5, r6, lr}
 800317c:	460e      	mov	r6, r1
 800317e:	4615      	mov	r5, r2
 8003180:	f7ff ff56 	bl	8003030 <findslot>
 8003184:	4604      	mov	r4, r0
 8003186:	b930      	cbnz	r0, 8003196 <_write+0x1c>
 8003188:	f001 f866 	bl	8004258 <__errno>
 800318c:	2309      	movs	r3, #9
 800318e:	6003      	str	r3, [r0, #0]
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	bd70      	pop	{r4, r5, r6, pc}
 8003196:	6800      	ldr	r0, [r0, #0]
 8003198:	462a      	mov	r2, r5
 800319a:	4631      	mov	r1, r6
 800319c:	f7ff ffdd 	bl	800315a <_swiwrite>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	dbf5      	blt.n	8003190 <_write+0x16>
 80031a4:	6862      	ldr	r2, [r4, #4]
 80031a6:	1ae8      	subs	r0, r5, r3
 80031a8:	4402      	add	r2, r0
 80031aa:	42ab      	cmp	r3, r5
 80031ac:	6062      	str	r2, [r4, #4]
 80031ae:	d1f1      	bne.n	8003194 <_write+0x1a>
 80031b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff bf55 	b.w	8003064 <error>

080031ba <_swiclose>:
 80031ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031bc:	2402      	movs	r4, #2
 80031be:	9001      	str	r0, [sp, #4]
 80031c0:	ad01      	add	r5, sp, #4
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	beab      	bkpt	0x00ab
 80031c8:	4604      	mov	r4, r0
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff ff58 	bl	8003080 <checkerror>
 80031d0:	b003      	add	sp, #12
 80031d2:	bd30      	pop	{r4, r5, pc}

080031d4 <_close>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	4605      	mov	r5, r0
 80031d8:	f7ff ff2a 	bl	8003030 <findslot>
 80031dc:	4604      	mov	r4, r0
 80031de:	b930      	cbnz	r0, 80031ee <_close+0x1a>
 80031e0:	f001 f83a 	bl	8004258 <__errno>
 80031e4:	2309      	movs	r3, #9
 80031e6:	6003      	str	r3, [r0, #0]
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	bd38      	pop	{r3, r4, r5, pc}
 80031ee:	3d01      	subs	r5, #1
 80031f0:	2d01      	cmp	r5, #1
 80031f2:	d809      	bhi.n	8003208 <_close+0x34>
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <_close+0x48>)
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d104      	bne.n	8003208 <_close+0x34>
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	6003      	str	r3, [r0, #0]
 8003204:	2000      	movs	r0, #0
 8003206:	e7f1      	b.n	80031ec <_close+0x18>
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	f7ff ffd6 	bl	80031ba <_swiclose>
 800320e:	2800      	cmp	r0, #0
 8003210:	d1ec      	bne.n	80031ec <_close+0x18>
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	6023      	str	r3, [r4, #0]
 8003218:	e7e8      	b.n	80031ec <_close+0x18>
 800321a:	bf00      	nop
 800321c:	20000300 	.word	0x20000300

08003220 <_getpid>:
 8003220:	2001      	movs	r0, #1
 8003222:	4770      	bx	lr

08003224 <_sbrk>:
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <_sbrk+0x38>)
 8003226:	6811      	ldr	r1, [r2, #0]
 8003228:	b510      	push	{r4, lr}
 800322a:	4603      	mov	r3, r0
 800322c:	b909      	cbnz	r1, 8003232 <_sbrk+0xe>
 800322e:	490c      	ldr	r1, [pc, #48]	@ (8003260 <_sbrk+0x3c>)
 8003230:	6011      	str	r1, [r2, #0]
 8003232:	6810      	ldr	r0, [r2, #0]
 8003234:	4669      	mov	r1, sp
 8003236:	4403      	add	r3, r0
 8003238:	428b      	cmp	r3, r1
 800323a:	d806      	bhi.n	800324a <_sbrk+0x26>
 800323c:	4909      	ldr	r1, [pc, #36]	@ (8003264 <_sbrk+0x40>)
 800323e:	4c0a      	ldr	r4, [pc, #40]	@ (8003268 <_sbrk+0x44>)
 8003240:	6809      	ldr	r1, [r1, #0]
 8003242:	42a1      	cmp	r1, r4
 8003244:	d008      	beq.n	8003258 <_sbrk+0x34>
 8003246:	428b      	cmp	r3, r1
 8003248:	d906      	bls.n	8003258 <_sbrk+0x34>
 800324a:	f001 f805 	bl	8004258 <__errno>
 800324e:	230c      	movs	r3, #12
 8003250:	6003      	str	r3, [r0, #0]
 8003252:	f04f 30ff 	mov.w	r0, #4294967295
 8003256:	bd10      	pop	{r4, pc}
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e7fc      	b.n	8003256 <_sbrk+0x32>
 800325c:	200002f0 	.word	0x200002f0
 8003260:	200004f0 	.word	0x200004f0
 8003264:	2000009c 	.word	0x2000009c
 8003268:	cafedead 	.word	0xcafedead

0800326c <_swistat>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	f7ff fede 	bl	8003030 <findslot>
 8003274:	4605      	mov	r5, r0
 8003276:	b930      	cbnz	r0, 8003286 <_swistat+0x1a>
 8003278:	f000 ffee 	bl	8004258 <__errno>
 800327c:	2309      	movs	r3, #9
 800327e:	6003      	str	r3, [r0, #0]
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	6863      	ldr	r3, [r4, #4]
 8003288:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800328c:	6063      	str	r3, [r4, #4]
 800328e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003292:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003294:	260c      	movs	r6, #12
 8003296:	4630      	mov	r0, r6
 8003298:	4629      	mov	r1, r5
 800329a:	beab      	bkpt	0x00ab
 800329c:	4605      	mov	r5, r0
 800329e:	4628      	mov	r0, r5
 80032a0:	f7ff feee 	bl	8003080 <checkerror>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d0eb      	beq.n	8003280 <_swistat+0x14>
 80032a8:	6120      	str	r0, [r4, #16]
 80032aa:	2000      	movs	r0, #0
 80032ac:	e7ea      	b.n	8003284 <_swistat+0x18>

080032ae <_fstat>:
 80032ae:	460b      	mov	r3, r1
 80032b0:	b510      	push	{r4, lr}
 80032b2:	2100      	movs	r1, #0
 80032b4:	4604      	mov	r4, r0
 80032b6:	2258      	movs	r2, #88	@ 0x58
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 ff7b 	bl	80041b4 <memset>
 80032be:	4601      	mov	r1, r0
 80032c0:	4620      	mov	r0, r4
 80032c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c6:	f7ff bfd1 	b.w	800326c <_swistat>

080032ca <_stat>:
 80032ca:	b538      	push	{r3, r4, r5, lr}
 80032cc:	460d      	mov	r5, r1
 80032ce:	4604      	mov	r4, r0
 80032d0:	2258      	movs	r2, #88	@ 0x58
 80032d2:	2100      	movs	r1, #0
 80032d4:	4628      	mov	r0, r5
 80032d6:	f000 ff6d 	bl	80041b4 <memset>
 80032da:	4620      	mov	r0, r4
 80032dc:	2100      	movs	r1, #0
 80032de:	f000 f811 	bl	8003304 <_swiopen>
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	4604      	mov	r4, r0
 80032e6:	d00b      	beq.n	8003300 <_stat+0x36>
 80032e8:	686b      	ldr	r3, [r5, #4]
 80032ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80032ee:	606b      	str	r3, [r5, #4]
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7ff ffbb 	bl	800326c <_swistat>
 80032f6:	4605      	mov	r5, r0
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7ff ff6b 	bl	80031d4 <_close>
 80032fe:	462c      	mov	r4, r5
 8003300:	4620      	mov	r0, r4
 8003302:	bd38      	pop	{r3, r4, r5, pc}

08003304 <_swiopen>:
 8003304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003308:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80033b4 <_swiopen+0xb0>
 800330c:	b096      	sub	sp, #88	@ 0x58
 800330e:	4607      	mov	r7, r0
 8003310:	460e      	mov	r6, r1
 8003312:	2400      	movs	r4, #0
 8003314:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8003318:	3301      	adds	r3, #1
 800331a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800331e:	d032      	beq.n	8003386 <_swiopen+0x82>
 8003320:	3401      	adds	r4, #1
 8003322:	2c14      	cmp	r4, #20
 8003324:	d1f6      	bne.n	8003314 <_swiopen+0x10>
 8003326:	f000 ff97 	bl	8004258 <__errno>
 800332a:	2318      	movs	r3, #24
 800332c:	e03a      	b.n	80033a4 <_swiopen+0xa0>
 800332e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003332:	f240 6301 	movw	r3, #1537	@ 0x601
 8003336:	07b2      	lsls	r2, r6, #30
 8003338:	bf48      	it	mi
 800333a:	f045 0502 	orrmi.w	r5, r5, #2
 800333e:	421e      	tst	r6, r3
 8003340:	bf18      	it	ne
 8003342:	f045 0504 	orrne.w	r5, r5, #4
 8003346:	0733      	lsls	r3, r6, #28
 8003348:	bf48      	it	mi
 800334a:	f025 0504 	bicmi.w	r5, r5, #4
 800334e:	4638      	mov	r0, r7
 8003350:	bf48      	it	mi
 8003352:	f045 0508 	orrmi.w	r5, r5, #8
 8003356:	9700      	str	r7, [sp, #0]
 8003358:	f7fc ff8a 	bl	8000270 <strlen>
 800335c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003360:	2501      	movs	r5, #1
 8003362:	4628      	mov	r0, r5
 8003364:	4651      	mov	r1, sl
 8003366:	beab      	bkpt	0x00ab
 8003368:	4605      	mov	r5, r0
 800336a:	2d00      	cmp	r5, #0
 800336c:	db06      	blt.n	800337c <_swiopen+0x78>
 800336e:	44c8      	add	r8, r9
 8003370:	2300      	movs	r3, #0
 8003372:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8003376:	f8c8 3004 	str.w	r3, [r8, #4]
 800337a:	e016      	b.n	80033aa <_swiopen+0xa6>
 800337c:	4628      	mov	r0, r5
 800337e:	f7ff fe71 	bl	8003064 <error>
 8003382:	4604      	mov	r4, r0
 8003384:	e011      	b.n	80033aa <_swiopen+0xa6>
 8003386:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800338a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800338e:	46ea      	mov	sl, sp
 8003390:	d1cd      	bne.n	800332e <_swiopen+0x2a>
 8003392:	4651      	mov	r1, sl
 8003394:	4638      	mov	r0, r7
 8003396:	f7ff ff98 	bl	80032ca <_stat>
 800339a:	3001      	adds	r0, #1
 800339c:	d0c7      	beq.n	800332e <_swiopen+0x2a>
 800339e:	f000 ff5b 	bl	8004258 <__errno>
 80033a2:	2311      	movs	r3, #17
 80033a4:	6003      	str	r3, [r0, #0]
 80033a6:	f04f 34ff 	mov.w	r4, #4294967295
 80033aa:	4620      	mov	r0, r4
 80033ac:	b016      	add	sp, #88	@ 0x58
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	bf00      	nop
 80033b4:	20000300 	.word	0x20000300

080033b8 <_get_semihosting_exts>:
 80033b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80033bc:	4606      	mov	r6, r0
 80033be:	460f      	mov	r7, r1
 80033c0:	4829      	ldr	r0, [pc, #164]	@ (8003468 <_get_semihosting_exts+0xb0>)
 80033c2:	2100      	movs	r1, #0
 80033c4:	4615      	mov	r5, r2
 80033c6:	f7ff ff9d 	bl	8003304 <_swiopen>
 80033ca:	462a      	mov	r2, r5
 80033cc:	4604      	mov	r4, r0
 80033ce:	2100      	movs	r1, #0
 80033d0:	4630      	mov	r0, r6
 80033d2:	f000 feef 	bl	80041b4 <memset>
 80033d6:	1c63      	adds	r3, r4, #1
 80033d8:	d014      	beq.n	8003404 <_get_semihosting_exts+0x4c>
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff fe28 	bl	8003030 <findslot>
 80033e0:	f04f 080c 	mov.w	r8, #12
 80033e4:	4681      	mov	r9, r0
 80033e6:	4640      	mov	r0, r8
 80033e8:	4649      	mov	r1, r9
 80033ea:	beab      	bkpt	0x00ab
 80033ec:	4680      	mov	r8, r0
 80033ee:	4640      	mov	r0, r8
 80033f0:	f7ff fe46 	bl	8003080 <checkerror>
 80033f4:	2803      	cmp	r0, #3
 80033f6:	dd02      	ble.n	80033fe <_get_semihosting_exts+0x46>
 80033f8:	1ec3      	subs	r3, r0, #3
 80033fa:	42ab      	cmp	r3, r5
 80033fc:	dc07      	bgt.n	800340e <_get_semihosting_exts+0x56>
 80033fe:	4620      	mov	r0, r4
 8003400:	f7ff fee8 	bl	80031d4 <_close>
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	b003      	add	sp, #12
 800340a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800340e:	2204      	movs	r2, #4
 8003410:	eb0d 0102 	add.w	r1, sp, r2
 8003414:	4620      	mov	r0, r4
 8003416:	f7ff fe48 	bl	80030aa <_read>
 800341a:	2803      	cmp	r0, #3
 800341c:	ddef      	ble.n	80033fe <_get_semihosting_exts+0x46>
 800341e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003422:	2b53      	cmp	r3, #83	@ 0x53
 8003424:	d1eb      	bne.n	80033fe <_get_semihosting_exts+0x46>
 8003426:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800342a:	2b48      	cmp	r3, #72	@ 0x48
 800342c:	d1e7      	bne.n	80033fe <_get_semihosting_exts+0x46>
 800342e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003432:	2b46      	cmp	r3, #70	@ 0x46
 8003434:	d1e3      	bne.n	80033fe <_get_semihosting_exts+0x46>
 8003436:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800343a:	2b42      	cmp	r3, #66	@ 0x42
 800343c:	d1df      	bne.n	80033fe <_get_semihosting_exts+0x46>
 800343e:	2201      	movs	r2, #1
 8003440:	4639      	mov	r1, r7
 8003442:	4620      	mov	r0, r4
 8003444:	f7ff fe4b 	bl	80030de <_swilseek>
 8003448:	2800      	cmp	r0, #0
 800344a:	dbd8      	blt.n	80033fe <_get_semihosting_exts+0x46>
 800344c:	462a      	mov	r2, r5
 800344e:	4631      	mov	r1, r6
 8003450:	4620      	mov	r0, r4
 8003452:	f7ff fe2a 	bl	80030aa <_read>
 8003456:	4605      	mov	r5, r0
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff febb 	bl	80031d4 <_close>
 800345e:	4628      	mov	r0, r5
 8003460:	f7ff fe0e 	bl	8003080 <checkerror>
 8003464:	e7d0      	b.n	8003408 <_get_semihosting_exts+0x50>
 8003466:	bf00      	nop
 8003468:	08005f46 	.word	0x08005f46

0800346c <initialise_semihosting_exts>:
 800346c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800346e:	4d0a      	ldr	r5, [pc, #40]	@ (8003498 <initialise_semihosting_exts+0x2c>)
 8003470:	4c0a      	ldr	r4, [pc, #40]	@ (800349c <initialise_semihosting_exts+0x30>)
 8003472:	2100      	movs	r1, #0
 8003474:	2201      	movs	r2, #1
 8003476:	a801      	add	r0, sp, #4
 8003478:	6029      	str	r1, [r5, #0]
 800347a:	6022      	str	r2, [r4, #0]
 800347c:	f7ff ff9c 	bl	80033b8 <_get_semihosting_exts>
 8003480:	2800      	cmp	r0, #0
 8003482:	dd07      	ble.n	8003494 <initialise_semihosting_exts+0x28>
 8003484:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003488:	f003 0201 	and.w	r2, r3, #1
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	602a      	str	r2, [r5, #0]
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	b003      	add	sp, #12
 8003496:	bd30      	pop	{r4, r5, pc}
 8003498:	200000a4 	.word	0x200000a4
 800349c:	200000a0 	.word	0x200000a0

080034a0 <_has_ext_stdout_stderr>:
 80034a0:	b510      	push	{r4, lr}
 80034a2:	4c04      	ldr	r4, [pc, #16]	@ (80034b4 <_has_ext_stdout_stderr+0x14>)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da01      	bge.n	80034ae <_has_ext_stdout_stderr+0xe>
 80034aa:	f7ff ffdf 	bl	800346c <initialise_semihosting_exts>
 80034ae:	6820      	ldr	r0, [r4, #0]
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	bf00      	nop
 80034b4:	200000a0 	.word	0x200000a0

080034b8 <initialise_monitor_handles>:
 80034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034bc:	b085      	sub	sp, #20
 80034be:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003570 <initialise_monitor_handles+0xb8>
 80034c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80034c6:	2303      	movs	r3, #3
 80034c8:	2400      	movs	r4, #0
 80034ca:	9303      	str	r3, [sp, #12]
 80034cc:	af01      	add	r7, sp, #4
 80034ce:	9402      	str	r4, [sp, #8]
 80034d0:	2501      	movs	r5, #1
 80034d2:	4628      	mov	r0, r5
 80034d4:	4639      	mov	r1, r7
 80034d6:	beab      	bkpt	0x00ab
 80034d8:	4605      	mov	r5, r0
 80034da:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003574 <initialise_monitor_handles+0xbc>
 80034de:	4623      	mov	r3, r4
 80034e0:	4c20      	ldr	r4, [pc, #128]	@ (8003564 <initialise_monitor_handles+0xac>)
 80034e2:	f8c8 5000 	str.w	r5, [r8]
 80034e6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ea:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80034ee:	3301      	adds	r3, #1
 80034f0:	2b14      	cmp	r3, #20
 80034f2:	d1fa      	bne.n	80034ea <initialise_monitor_handles+0x32>
 80034f4:	f7ff ffd4 	bl	80034a0 <_has_ext_stdout_stderr>
 80034f8:	4d1b      	ldr	r5, [pc, #108]	@ (8003568 <initialise_monitor_handles+0xb0>)
 80034fa:	b1d0      	cbz	r0, 8003532 <initialise_monitor_handles+0x7a>
 80034fc:	f04f 0a03 	mov.w	sl, #3
 8003500:	2304      	movs	r3, #4
 8003502:	f8cd 9004 	str.w	r9, [sp, #4]
 8003506:	2601      	movs	r6, #1
 8003508:	f8cd a00c 	str.w	sl, [sp, #12]
 800350c:	9302      	str	r3, [sp, #8]
 800350e:	4630      	mov	r0, r6
 8003510:	4639      	mov	r1, r7
 8003512:	beab      	bkpt	0x00ab
 8003514:	4683      	mov	fp, r0
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <initialise_monitor_handles+0xb4>)
 8003518:	f8cd 9004 	str.w	r9, [sp, #4]
 800351c:	f8c3 b000 	str.w	fp, [r3]
 8003520:	2308      	movs	r3, #8
 8003522:	f8cd a00c 	str.w	sl, [sp, #12]
 8003526:	9302      	str	r3, [sp, #8]
 8003528:	4630      	mov	r0, r6
 800352a:	4639      	mov	r1, r7
 800352c:	beab      	bkpt	0x00ab
 800352e:	4606      	mov	r6, r0
 8003530:	602e      	str	r6, [r5, #0]
 8003532:	682b      	ldr	r3, [r5, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	bf02      	ittt	eq
 8003538:	4b0c      	ldreq	r3, [pc, #48]	@ (800356c <initialise_monitor_handles+0xb4>)
 800353a:	681b      	ldreq	r3, [r3, #0]
 800353c:	602b      	streq	r3, [r5, #0]
 800353e:	2600      	movs	r6, #0
 8003540:	f8d8 3000 	ldr.w	r3, [r8]
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	6066      	str	r6, [r4, #4]
 8003548:	f7ff ffaa 	bl	80034a0 <_has_ext_stdout_stderr>
 800354c:	b130      	cbz	r0, 800355c <initialise_monitor_handles+0xa4>
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <initialise_monitor_handles+0xb4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003556:	682b      	ldr	r3, [r5, #0]
 8003558:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800355c:	b005      	add	sp, #20
 800355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	20000300 	.word	0x20000300
 8003568:	200002f4 	.word	0x200002f4
 800356c:	200002f8 	.word	0x200002f8
 8003570:	08005f5c 	.word	0x08005f5c
 8003574:	200002fc 	.word	0x200002fc

08003578 <_isatty>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	f7ff fd59 	bl	8003030 <findslot>
 800357e:	2409      	movs	r4, #9
 8003580:	4605      	mov	r5, r0
 8003582:	b920      	cbnz	r0, 800358e <_isatty+0x16>
 8003584:	f000 fe68 	bl	8004258 <__errno>
 8003588:	6004      	str	r4, [r0, #0]
 800358a:	2000      	movs	r0, #0
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	4620      	mov	r0, r4
 8003590:	4629      	mov	r1, r5
 8003592:	beab      	bkpt	0x00ab
 8003594:	4604      	mov	r4, r0
 8003596:	2c01      	cmp	r4, #1
 8003598:	4620      	mov	r0, r4
 800359a:	d0f7      	beq.n	800358c <_isatty+0x14>
 800359c:	f000 fe5c 	bl	8004258 <__errno>
 80035a0:	2513      	movs	r5, #19
 80035a2:	4604      	mov	r4, r0
 80035a4:	2600      	movs	r6, #0
 80035a6:	4628      	mov	r0, r5
 80035a8:	4631      	mov	r1, r6
 80035aa:	beab      	bkpt	0x00ab
 80035ac:	4605      	mov	r5, r0
 80035ae:	6025      	str	r5, [r4, #0]
 80035b0:	e7eb      	b.n	800358a <_isatty+0x12>

080035b2 <__cvt>:
 80035b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b6:	ec57 6b10 	vmov	r6, r7, d0
 80035ba:	2f00      	cmp	r7, #0
 80035bc:	460c      	mov	r4, r1
 80035be:	4619      	mov	r1, r3
 80035c0:	463b      	mov	r3, r7
 80035c2:	bfbb      	ittet	lt
 80035c4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80035c8:	461f      	movlt	r7, r3
 80035ca:	2300      	movge	r3, #0
 80035cc:	232d      	movlt	r3, #45	@ 0x2d
 80035ce:	700b      	strb	r3, [r1, #0]
 80035d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035d2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80035d6:	4691      	mov	r9, r2
 80035d8:	f023 0820 	bic.w	r8, r3, #32
 80035dc:	bfbc      	itt	lt
 80035de:	4632      	movlt	r2, r6
 80035e0:	4616      	movlt	r6, r2
 80035e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035e6:	d005      	beq.n	80035f4 <__cvt+0x42>
 80035e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80035ec:	d100      	bne.n	80035f0 <__cvt+0x3e>
 80035ee:	3401      	adds	r4, #1
 80035f0:	2102      	movs	r1, #2
 80035f2:	e000      	b.n	80035f6 <__cvt+0x44>
 80035f4:	2103      	movs	r1, #3
 80035f6:	ab03      	add	r3, sp, #12
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	ab02      	add	r3, sp, #8
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	ec47 6b10 	vmov	d0, r6, r7
 8003602:	4653      	mov	r3, sl
 8003604:	4622      	mov	r2, r4
 8003606:	f000 ff0b 	bl	8004420 <_dtoa_r>
 800360a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800360e:	4605      	mov	r5, r0
 8003610:	d119      	bne.n	8003646 <__cvt+0x94>
 8003612:	f019 0f01 	tst.w	r9, #1
 8003616:	d00e      	beq.n	8003636 <__cvt+0x84>
 8003618:	eb00 0904 	add.w	r9, r0, r4
 800361c:	2200      	movs	r2, #0
 800361e:	2300      	movs	r3, #0
 8003620:	4630      	mov	r0, r6
 8003622:	4639      	mov	r1, r7
 8003624:	f7fd fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 8003628:	b108      	cbz	r0, 800362e <__cvt+0x7c>
 800362a:	f8cd 900c 	str.w	r9, [sp, #12]
 800362e:	2230      	movs	r2, #48	@ 0x30
 8003630:	9b03      	ldr	r3, [sp, #12]
 8003632:	454b      	cmp	r3, r9
 8003634:	d31e      	bcc.n	8003674 <__cvt+0xc2>
 8003636:	9b03      	ldr	r3, [sp, #12]
 8003638:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800363a:	1b5b      	subs	r3, r3, r5
 800363c:	4628      	mov	r0, r5
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	b004      	add	sp, #16
 8003642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003646:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800364a:	eb00 0904 	add.w	r9, r0, r4
 800364e:	d1e5      	bne.n	800361c <__cvt+0x6a>
 8003650:	7803      	ldrb	r3, [r0, #0]
 8003652:	2b30      	cmp	r3, #48	@ 0x30
 8003654:	d10a      	bne.n	800366c <__cvt+0xba>
 8003656:	2200      	movs	r2, #0
 8003658:	2300      	movs	r3, #0
 800365a:	4630      	mov	r0, r6
 800365c:	4639      	mov	r1, r7
 800365e:	f7fd fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8003662:	b918      	cbnz	r0, 800366c <__cvt+0xba>
 8003664:	f1c4 0401 	rsb	r4, r4, #1
 8003668:	f8ca 4000 	str.w	r4, [sl]
 800366c:	f8da 3000 	ldr.w	r3, [sl]
 8003670:	4499      	add	r9, r3
 8003672:	e7d3      	b.n	800361c <__cvt+0x6a>
 8003674:	1c59      	adds	r1, r3, #1
 8003676:	9103      	str	r1, [sp, #12]
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e7d9      	b.n	8003630 <__cvt+0x7e>

0800367c <__exponent>:
 800367c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800367e:	2900      	cmp	r1, #0
 8003680:	bfba      	itte	lt
 8003682:	4249      	neglt	r1, r1
 8003684:	232d      	movlt	r3, #45	@ 0x2d
 8003686:	232b      	movge	r3, #43	@ 0x2b
 8003688:	2909      	cmp	r1, #9
 800368a:	7002      	strb	r2, [r0, #0]
 800368c:	7043      	strb	r3, [r0, #1]
 800368e:	dd29      	ble.n	80036e4 <__exponent+0x68>
 8003690:	f10d 0307 	add.w	r3, sp, #7
 8003694:	461d      	mov	r5, r3
 8003696:	270a      	movs	r7, #10
 8003698:	461a      	mov	r2, r3
 800369a:	fbb1 f6f7 	udiv	r6, r1, r7
 800369e:	fb07 1416 	mls	r4, r7, r6, r1
 80036a2:	3430      	adds	r4, #48	@ 0x30
 80036a4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80036a8:	460c      	mov	r4, r1
 80036aa:	2c63      	cmp	r4, #99	@ 0x63
 80036ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80036b0:	4631      	mov	r1, r6
 80036b2:	dcf1      	bgt.n	8003698 <__exponent+0x1c>
 80036b4:	3130      	adds	r1, #48	@ 0x30
 80036b6:	1e94      	subs	r4, r2, #2
 80036b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036bc:	1c41      	adds	r1, r0, #1
 80036be:	4623      	mov	r3, r4
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	d30a      	bcc.n	80036da <__exponent+0x5e>
 80036c4:	f10d 0309 	add.w	r3, sp, #9
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	42ac      	cmp	r4, r5
 80036cc:	bf88      	it	hi
 80036ce:	2300      	movhi	r3, #0
 80036d0:	3302      	adds	r3, #2
 80036d2:	4403      	add	r3, r0
 80036d4:	1a18      	subs	r0, r3, r0
 80036d6:	b003      	add	sp, #12
 80036d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036da:	f813 6b01 	ldrb.w	r6, [r3], #1
 80036de:	f801 6f01 	strb.w	r6, [r1, #1]!
 80036e2:	e7ed      	b.n	80036c0 <__exponent+0x44>
 80036e4:	2330      	movs	r3, #48	@ 0x30
 80036e6:	3130      	adds	r1, #48	@ 0x30
 80036e8:	7083      	strb	r3, [r0, #2]
 80036ea:	70c1      	strb	r1, [r0, #3]
 80036ec:	1d03      	adds	r3, r0, #4
 80036ee:	e7f1      	b.n	80036d4 <__exponent+0x58>

080036f0 <_printf_float>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	b08d      	sub	sp, #52	@ 0x34
 80036f6:	460c      	mov	r4, r1
 80036f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80036fc:	4616      	mov	r6, r2
 80036fe:	461f      	mov	r7, r3
 8003700:	4605      	mov	r5, r0
 8003702:	f000 fd5f 	bl	80041c4 <_localeconv_r>
 8003706:	6803      	ldr	r3, [r0, #0]
 8003708:	9304      	str	r3, [sp, #16]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc fdb0 	bl	8000270 <strlen>
 8003710:	2300      	movs	r3, #0
 8003712:	930a      	str	r3, [sp, #40]	@ 0x28
 8003714:	f8d8 3000 	ldr.w	r3, [r8]
 8003718:	9005      	str	r0, [sp, #20]
 800371a:	3307      	adds	r3, #7
 800371c:	f023 0307 	bic.w	r3, r3, #7
 8003720:	f103 0208 	add.w	r2, r3, #8
 8003724:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003728:	f8d4 b000 	ldr.w	fp, [r4]
 800372c:	f8c8 2000 	str.w	r2, [r8]
 8003730:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003734:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003738:	9307      	str	r3, [sp, #28]
 800373a:	f8cd 8018 	str.w	r8, [sp, #24]
 800373e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003746:	4b9c      	ldr	r3, [pc, #624]	@ (80039b8 <_printf_float+0x2c8>)
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	f7fd f9ee 	bl	8000b2c <__aeabi_dcmpun>
 8003750:	bb70      	cbnz	r0, 80037b0 <_printf_float+0xc0>
 8003752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003756:	4b98      	ldr	r3, [pc, #608]	@ (80039b8 <_printf_float+0x2c8>)
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	f7fd f9c8 	bl	8000af0 <__aeabi_dcmple>
 8003760:	bb30      	cbnz	r0, 80037b0 <_printf_float+0xc0>
 8003762:	2200      	movs	r2, #0
 8003764:	2300      	movs	r3, #0
 8003766:	4640      	mov	r0, r8
 8003768:	4649      	mov	r1, r9
 800376a:	f7fd f9b7 	bl	8000adc <__aeabi_dcmplt>
 800376e:	b110      	cbz	r0, 8003776 <_printf_float+0x86>
 8003770:	232d      	movs	r3, #45	@ 0x2d
 8003772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003776:	4a91      	ldr	r2, [pc, #580]	@ (80039bc <_printf_float+0x2cc>)
 8003778:	4b91      	ldr	r3, [pc, #580]	@ (80039c0 <_printf_float+0x2d0>)
 800377a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800377e:	bf8c      	ite	hi
 8003780:	4690      	movhi	r8, r2
 8003782:	4698      	movls	r8, r3
 8003784:	2303      	movs	r3, #3
 8003786:	6123      	str	r3, [r4, #16]
 8003788:	f02b 0304 	bic.w	r3, fp, #4
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	f04f 0900 	mov.w	r9, #0
 8003792:	9700      	str	r7, [sp, #0]
 8003794:	4633      	mov	r3, r6
 8003796:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 f9d2 	bl	8003b44 <_printf_common>
 80037a0:	3001      	adds	r0, #1
 80037a2:	f040 808d 	bne.w	80038c0 <_printf_float+0x1d0>
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295
 80037aa:	b00d      	add	sp, #52	@ 0x34
 80037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	4640      	mov	r0, r8
 80037b6:	4649      	mov	r1, r9
 80037b8:	f7fd f9b8 	bl	8000b2c <__aeabi_dcmpun>
 80037bc:	b140      	cbz	r0, 80037d0 <_printf_float+0xe0>
 80037be:	464b      	mov	r3, r9
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bfbc      	itt	lt
 80037c4:	232d      	movlt	r3, #45	@ 0x2d
 80037c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80037ca:	4a7e      	ldr	r2, [pc, #504]	@ (80039c4 <_printf_float+0x2d4>)
 80037cc:	4b7e      	ldr	r3, [pc, #504]	@ (80039c8 <_printf_float+0x2d8>)
 80037ce:	e7d4      	b.n	800377a <_printf_float+0x8a>
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80037d6:	9206      	str	r2, [sp, #24]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	d13b      	bne.n	8003854 <_printf_float+0x164>
 80037dc:	2306      	movs	r3, #6
 80037de:	6063      	str	r3, [r4, #4]
 80037e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80037e4:	2300      	movs	r3, #0
 80037e6:	6022      	str	r2, [r4, #0]
 80037e8:	9303      	str	r3, [sp, #12]
 80037ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80037ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80037f0:	ab09      	add	r3, sp, #36	@ 0x24
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	ec49 8b10 	vmov	d0, r8, r9
 80037fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80037fe:	4628      	mov	r0, r5
 8003800:	f7ff fed7 	bl	80035b2 <__cvt>
 8003804:	9b06      	ldr	r3, [sp, #24]
 8003806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003808:	2b47      	cmp	r3, #71	@ 0x47
 800380a:	4680      	mov	r8, r0
 800380c:	d129      	bne.n	8003862 <_printf_float+0x172>
 800380e:	1cc8      	adds	r0, r1, #3
 8003810:	db02      	blt.n	8003818 <_printf_float+0x128>
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	4299      	cmp	r1, r3
 8003816:	dd41      	ble.n	800389c <_printf_float+0x1ac>
 8003818:	f1aa 0a02 	sub.w	sl, sl, #2
 800381c:	fa5f fa8a 	uxtb.w	sl, sl
 8003820:	3901      	subs	r1, #1
 8003822:	4652      	mov	r2, sl
 8003824:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003828:	9109      	str	r1, [sp, #36]	@ 0x24
 800382a:	f7ff ff27 	bl	800367c <__exponent>
 800382e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003830:	1813      	adds	r3, r2, r0
 8003832:	2a01      	cmp	r2, #1
 8003834:	4681      	mov	r9, r0
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	dc02      	bgt.n	8003840 <_printf_float+0x150>
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	07d2      	lsls	r2, r2, #31
 800383e:	d501      	bpl.n	8003844 <_printf_float+0x154>
 8003840:	3301      	adds	r3, #1
 8003842:	6123      	str	r3, [r4, #16]
 8003844:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0a2      	beq.n	8003792 <_printf_float+0xa2>
 800384c:	232d      	movs	r3, #45	@ 0x2d
 800384e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003852:	e79e      	b.n	8003792 <_printf_float+0xa2>
 8003854:	9a06      	ldr	r2, [sp, #24]
 8003856:	2a47      	cmp	r2, #71	@ 0x47
 8003858:	d1c2      	bne.n	80037e0 <_printf_float+0xf0>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1c0      	bne.n	80037e0 <_printf_float+0xf0>
 800385e:	2301      	movs	r3, #1
 8003860:	e7bd      	b.n	80037de <_printf_float+0xee>
 8003862:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003866:	d9db      	bls.n	8003820 <_printf_float+0x130>
 8003868:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800386c:	d118      	bne.n	80038a0 <_printf_float+0x1b0>
 800386e:	2900      	cmp	r1, #0
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	dd0b      	ble.n	800388c <_printf_float+0x19c>
 8003874:	6121      	str	r1, [r4, #16]
 8003876:	b913      	cbnz	r3, 800387e <_printf_float+0x18e>
 8003878:	6822      	ldr	r2, [r4, #0]
 800387a:	07d0      	lsls	r0, r2, #31
 800387c:	d502      	bpl.n	8003884 <_printf_float+0x194>
 800387e:	3301      	adds	r3, #1
 8003880:	440b      	add	r3, r1
 8003882:	6123      	str	r3, [r4, #16]
 8003884:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003886:	f04f 0900 	mov.w	r9, #0
 800388a:	e7db      	b.n	8003844 <_printf_float+0x154>
 800388c:	b913      	cbnz	r3, 8003894 <_printf_float+0x1a4>
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	07d2      	lsls	r2, r2, #31
 8003892:	d501      	bpl.n	8003898 <_printf_float+0x1a8>
 8003894:	3302      	adds	r3, #2
 8003896:	e7f4      	b.n	8003882 <_printf_float+0x192>
 8003898:	2301      	movs	r3, #1
 800389a:	e7f2      	b.n	8003882 <_printf_float+0x192>
 800389c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80038a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038a2:	4299      	cmp	r1, r3
 80038a4:	db05      	blt.n	80038b2 <_printf_float+0x1c2>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	6121      	str	r1, [r4, #16]
 80038aa:	07d8      	lsls	r0, r3, #31
 80038ac:	d5ea      	bpl.n	8003884 <_printf_float+0x194>
 80038ae:	1c4b      	adds	r3, r1, #1
 80038b0:	e7e7      	b.n	8003882 <_printf_float+0x192>
 80038b2:	2900      	cmp	r1, #0
 80038b4:	bfd4      	ite	le
 80038b6:	f1c1 0202 	rsble	r2, r1, #2
 80038ba:	2201      	movgt	r2, #1
 80038bc:	4413      	add	r3, r2
 80038be:	e7e0      	b.n	8003882 <_printf_float+0x192>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	055a      	lsls	r2, r3, #21
 80038c4:	d407      	bmi.n	80038d6 <_printf_float+0x1e6>
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	4642      	mov	r2, r8
 80038ca:	4631      	mov	r1, r6
 80038cc:	4628      	mov	r0, r5
 80038ce:	47b8      	blx	r7
 80038d0:	3001      	adds	r0, #1
 80038d2:	d12b      	bne.n	800392c <_printf_float+0x23c>
 80038d4:	e767      	b.n	80037a6 <_printf_float+0xb6>
 80038d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038da:	f240 80dd 	bls.w	8003a98 <_printf_float+0x3a8>
 80038de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80038e2:	2200      	movs	r2, #0
 80038e4:	2300      	movs	r3, #0
 80038e6:	f7fd f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d033      	beq.n	8003956 <_printf_float+0x266>
 80038ee:	4a37      	ldr	r2, [pc, #220]	@ (80039cc <_printf_float+0x2dc>)
 80038f0:	2301      	movs	r3, #1
 80038f2:	4631      	mov	r1, r6
 80038f4:	4628      	mov	r0, r5
 80038f6:	47b8      	blx	r7
 80038f8:	3001      	adds	r0, #1
 80038fa:	f43f af54 	beq.w	80037a6 <_printf_float+0xb6>
 80038fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003902:	4543      	cmp	r3, r8
 8003904:	db02      	blt.n	800390c <_printf_float+0x21c>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	07d8      	lsls	r0, r3, #31
 800390a:	d50f      	bpl.n	800392c <_printf_float+0x23c>
 800390c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003910:	4631      	mov	r1, r6
 8003912:	4628      	mov	r0, r5
 8003914:	47b8      	blx	r7
 8003916:	3001      	adds	r0, #1
 8003918:	f43f af45 	beq.w	80037a6 <_printf_float+0xb6>
 800391c:	f04f 0900 	mov.w	r9, #0
 8003920:	f108 38ff 	add.w	r8, r8, #4294967295
 8003924:	f104 0a1a 	add.w	sl, r4, #26
 8003928:	45c8      	cmp	r8, r9
 800392a:	dc09      	bgt.n	8003940 <_printf_float+0x250>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	079b      	lsls	r3, r3, #30
 8003930:	f100 8103 	bmi.w	8003b3a <_printf_float+0x44a>
 8003934:	68e0      	ldr	r0, [r4, #12]
 8003936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003938:	4298      	cmp	r0, r3
 800393a:	bfb8      	it	lt
 800393c:	4618      	movlt	r0, r3
 800393e:	e734      	b.n	80037aa <_printf_float+0xba>
 8003940:	2301      	movs	r3, #1
 8003942:	4652      	mov	r2, sl
 8003944:	4631      	mov	r1, r6
 8003946:	4628      	mov	r0, r5
 8003948:	47b8      	blx	r7
 800394a:	3001      	adds	r0, #1
 800394c:	f43f af2b 	beq.w	80037a6 <_printf_float+0xb6>
 8003950:	f109 0901 	add.w	r9, r9, #1
 8003954:	e7e8      	b.n	8003928 <_printf_float+0x238>
 8003956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	dc39      	bgt.n	80039d0 <_printf_float+0x2e0>
 800395c:	4a1b      	ldr	r2, [pc, #108]	@ (80039cc <_printf_float+0x2dc>)
 800395e:	2301      	movs	r3, #1
 8003960:	4631      	mov	r1, r6
 8003962:	4628      	mov	r0, r5
 8003964:	47b8      	blx	r7
 8003966:	3001      	adds	r0, #1
 8003968:	f43f af1d 	beq.w	80037a6 <_printf_float+0xb6>
 800396c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003970:	ea59 0303 	orrs.w	r3, r9, r3
 8003974:	d102      	bne.n	800397c <_printf_float+0x28c>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	07d9      	lsls	r1, r3, #31
 800397a:	d5d7      	bpl.n	800392c <_printf_float+0x23c>
 800397c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	f43f af0d 	beq.w	80037a6 <_printf_float+0xb6>
 800398c:	f04f 0a00 	mov.w	sl, #0
 8003990:	f104 0b1a 	add.w	fp, r4, #26
 8003994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003996:	425b      	negs	r3, r3
 8003998:	4553      	cmp	r3, sl
 800399a:	dc01      	bgt.n	80039a0 <_printf_float+0x2b0>
 800399c:	464b      	mov	r3, r9
 800399e:	e793      	b.n	80038c8 <_printf_float+0x1d8>
 80039a0:	2301      	movs	r3, #1
 80039a2:	465a      	mov	r2, fp
 80039a4:	4631      	mov	r1, r6
 80039a6:	4628      	mov	r0, r5
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	f43f aefb 	beq.w	80037a6 <_printf_float+0xb6>
 80039b0:	f10a 0a01 	add.w	sl, sl, #1
 80039b4:	e7ee      	b.n	8003994 <_printf_float+0x2a4>
 80039b6:	bf00      	nop
 80039b8:	7fefffff 	.word	0x7fefffff
 80039bc:	08005f64 	.word	0x08005f64
 80039c0:	08005f60 	.word	0x08005f60
 80039c4:	08005f6c 	.word	0x08005f6c
 80039c8:	08005f68 	.word	0x08005f68
 80039cc:	08005f70 	.word	0x08005f70
 80039d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80039d6:	4553      	cmp	r3, sl
 80039d8:	bfa8      	it	ge
 80039da:	4653      	movge	r3, sl
 80039dc:	2b00      	cmp	r3, #0
 80039de:	4699      	mov	r9, r3
 80039e0:	dc36      	bgt.n	8003a50 <_printf_float+0x360>
 80039e2:	f04f 0b00 	mov.w	fp, #0
 80039e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039ea:	f104 021a 	add.w	r2, r4, #26
 80039ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039f0:	9306      	str	r3, [sp, #24]
 80039f2:	eba3 0309 	sub.w	r3, r3, r9
 80039f6:	455b      	cmp	r3, fp
 80039f8:	dc31      	bgt.n	8003a5e <_printf_float+0x36e>
 80039fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039fc:	459a      	cmp	sl, r3
 80039fe:	dc3a      	bgt.n	8003a76 <_printf_float+0x386>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	07da      	lsls	r2, r3, #31
 8003a04:	d437      	bmi.n	8003a76 <_printf_float+0x386>
 8003a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a08:	ebaa 0903 	sub.w	r9, sl, r3
 8003a0c:	9b06      	ldr	r3, [sp, #24]
 8003a0e:	ebaa 0303 	sub.w	r3, sl, r3
 8003a12:	4599      	cmp	r9, r3
 8003a14:	bfa8      	it	ge
 8003a16:	4699      	movge	r9, r3
 8003a18:	f1b9 0f00 	cmp.w	r9, #0
 8003a1c:	dc33      	bgt.n	8003a86 <_printf_float+0x396>
 8003a1e:	f04f 0800 	mov.w	r8, #0
 8003a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a26:	f104 0b1a 	add.w	fp, r4, #26
 8003a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a2c:	ebaa 0303 	sub.w	r3, sl, r3
 8003a30:	eba3 0309 	sub.w	r3, r3, r9
 8003a34:	4543      	cmp	r3, r8
 8003a36:	f77f af79 	ble.w	800392c <_printf_float+0x23c>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	465a      	mov	r2, fp
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	f43f aeae 	beq.w	80037a6 <_printf_float+0xb6>
 8003a4a:	f108 0801 	add.w	r8, r8, #1
 8003a4e:	e7ec      	b.n	8003a2a <_printf_float+0x33a>
 8003a50:	4642      	mov	r2, r8
 8003a52:	4631      	mov	r1, r6
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b8      	blx	r7
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d1c2      	bne.n	80039e2 <_printf_float+0x2f2>
 8003a5c:	e6a3      	b.n	80037a6 <_printf_float+0xb6>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4631      	mov	r1, r6
 8003a62:	4628      	mov	r0, r5
 8003a64:	9206      	str	r2, [sp, #24]
 8003a66:	47b8      	blx	r7
 8003a68:	3001      	adds	r0, #1
 8003a6a:	f43f ae9c 	beq.w	80037a6 <_printf_float+0xb6>
 8003a6e:	9a06      	ldr	r2, [sp, #24]
 8003a70:	f10b 0b01 	add.w	fp, fp, #1
 8003a74:	e7bb      	b.n	80039ee <_printf_float+0x2fe>
 8003a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	47b8      	blx	r7
 8003a80:	3001      	adds	r0, #1
 8003a82:	d1c0      	bne.n	8003a06 <_printf_float+0x316>
 8003a84:	e68f      	b.n	80037a6 <_printf_float+0xb6>
 8003a86:	9a06      	ldr	r2, [sp, #24]
 8003a88:	464b      	mov	r3, r9
 8003a8a:	4442      	add	r2, r8
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4628      	mov	r0, r5
 8003a90:	47b8      	blx	r7
 8003a92:	3001      	adds	r0, #1
 8003a94:	d1c3      	bne.n	8003a1e <_printf_float+0x32e>
 8003a96:	e686      	b.n	80037a6 <_printf_float+0xb6>
 8003a98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a9c:	f1ba 0f01 	cmp.w	sl, #1
 8003aa0:	dc01      	bgt.n	8003aa6 <_printf_float+0x3b6>
 8003aa2:	07db      	lsls	r3, r3, #31
 8003aa4:	d536      	bpl.n	8003b14 <_printf_float+0x424>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4628      	mov	r0, r5
 8003aae:	47b8      	blx	r7
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	f43f ae78 	beq.w	80037a6 <_printf_float+0xb6>
 8003ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aba:	4631      	mov	r1, r6
 8003abc:	4628      	mov	r0, r5
 8003abe:	47b8      	blx	r7
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	f43f ae70 	beq.w	80037a6 <_printf_float+0xb6>
 8003ac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003aca:	2200      	movs	r2, #0
 8003acc:	2300      	movs	r3, #0
 8003ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ad2:	f7fc fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ad6:	b9c0      	cbnz	r0, 8003b0a <_printf_float+0x41a>
 8003ad8:	4653      	mov	r3, sl
 8003ada:	f108 0201 	add.w	r2, r8, #1
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d10c      	bne.n	8003b02 <_printf_float+0x412>
 8003ae8:	e65d      	b.n	80037a6 <_printf_float+0xb6>
 8003aea:	2301      	movs	r3, #1
 8003aec:	465a      	mov	r2, fp
 8003aee:	4631      	mov	r1, r6
 8003af0:	4628      	mov	r0, r5
 8003af2:	47b8      	blx	r7
 8003af4:	3001      	adds	r0, #1
 8003af6:	f43f ae56 	beq.w	80037a6 <_printf_float+0xb6>
 8003afa:	f108 0801 	add.w	r8, r8, #1
 8003afe:	45d0      	cmp	r8, sl
 8003b00:	dbf3      	blt.n	8003aea <_printf_float+0x3fa>
 8003b02:	464b      	mov	r3, r9
 8003b04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b08:	e6df      	b.n	80038ca <_printf_float+0x1da>
 8003b0a:	f04f 0800 	mov.w	r8, #0
 8003b0e:	f104 0b1a 	add.w	fp, r4, #26
 8003b12:	e7f4      	b.n	8003afe <_printf_float+0x40e>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4642      	mov	r2, r8
 8003b18:	e7e1      	b.n	8003ade <_printf_float+0x3ee>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	464a      	mov	r2, r9
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4628      	mov	r0, r5
 8003b22:	47b8      	blx	r7
 8003b24:	3001      	adds	r0, #1
 8003b26:	f43f ae3e 	beq.w	80037a6 <_printf_float+0xb6>
 8003b2a:	f108 0801 	add.w	r8, r8, #1
 8003b2e:	68e3      	ldr	r3, [r4, #12]
 8003b30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003b32:	1a5b      	subs	r3, r3, r1
 8003b34:	4543      	cmp	r3, r8
 8003b36:	dcf0      	bgt.n	8003b1a <_printf_float+0x42a>
 8003b38:	e6fc      	b.n	8003934 <_printf_float+0x244>
 8003b3a:	f04f 0800 	mov.w	r8, #0
 8003b3e:	f104 0919 	add.w	r9, r4, #25
 8003b42:	e7f4      	b.n	8003b2e <_printf_float+0x43e>

08003b44 <_printf_common>:
 8003b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b48:	4616      	mov	r6, r2
 8003b4a:	4698      	mov	r8, r3
 8003b4c:	688a      	ldr	r2, [r1, #8]
 8003b4e:	690b      	ldr	r3, [r1, #16]
 8003b50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b54:	4293      	cmp	r3, r2
 8003b56:	bfb8      	it	lt
 8003b58:	4613      	movlt	r3, r2
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b60:	4607      	mov	r7, r0
 8003b62:	460c      	mov	r4, r1
 8003b64:	b10a      	cbz	r2, 8003b6a <_printf_common+0x26>
 8003b66:	3301      	adds	r3, #1
 8003b68:	6033      	str	r3, [r6, #0]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	0699      	lsls	r1, r3, #26
 8003b6e:	bf42      	ittt	mi
 8003b70:	6833      	ldrmi	r3, [r6, #0]
 8003b72:	3302      	addmi	r3, #2
 8003b74:	6033      	strmi	r3, [r6, #0]
 8003b76:	6825      	ldr	r5, [r4, #0]
 8003b78:	f015 0506 	ands.w	r5, r5, #6
 8003b7c:	d106      	bne.n	8003b8c <_printf_common+0x48>
 8003b7e:	f104 0a19 	add.w	sl, r4, #25
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	6832      	ldr	r2, [r6, #0]
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	42ab      	cmp	r3, r5
 8003b8a:	dc26      	bgt.n	8003bda <_printf_common+0x96>
 8003b8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b90:	6822      	ldr	r2, [r4, #0]
 8003b92:	3b00      	subs	r3, #0
 8003b94:	bf18      	it	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	0692      	lsls	r2, r2, #26
 8003b9a:	d42b      	bmi.n	8003bf4 <_printf_common+0xb0>
 8003b9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c8      	blx	r9
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d01e      	beq.n	8003be8 <_printf_common+0xa4>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	6922      	ldr	r2, [r4, #16]
 8003bae:	f003 0306 	and.w	r3, r3, #6
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	bf02      	ittt	eq
 8003bb6:	68e5      	ldreq	r5, [r4, #12]
 8003bb8:	6833      	ldreq	r3, [r6, #0]
 8003bba:	1aed      	subeq	r5, r5, r3
 8003bbc:	68a3      	ldr	r3, [r4, #8]
 8003bbe:	bf0c      	ite	eq
 8003bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc4:	2500      	movne	r5, #0
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	bfc4      	itt	gt
 8003bca:	1a9b      	subgt	r3, r3, r2
 8003bcc:	18ed      	addgt	r5, r5, r3
 8003bce:	2600      	movs	r6, #0
 8003bd0:	341a      	adds	r4, #26
 8003bd2:	42b5      	cmp	r5, r6
 8003bd4:	d11a      	bne.n	8003c0c <_printf_common+0xc8>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e008      	b.n	8003bec <_printf_common+0xa8>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4652      	mov	r2, sl
 8003bde:	4641      	mov	r1, r8
 8003be0:	4638      	mov	r0, r7
 8003be2:	47c8      	blx	r9
 8003be4:	3001      	adds	r0, #1
 8003be6:	d103      	bne.n	8003bf0 <_printf_common+0xac>
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf0:	3501      	adds	r5, #1
 8003bf2:	e7c6      	b.n	8003b82 <_printf_common+0x3e>
 8003bf4:	18e1      	adds	r1, r4, r3
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	2030      	movs	r0, #48	@ 0x30
 8003bfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bfe:	4422      	add	r2, r4
 8003c00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c08:	3302      	adds	r3, #2
 8003c0a:	e7c7      	b.n	8003b9c <_printf_common+0x58>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4622      	mov	r2, r4
 8003c10:	4641      	mov	r1, r8
 8003c12:	4638      	mov	r0, r7
 8003c14:	47c8      	blx	r9
 8003c16:	3001      	adds	r0, #1
 8003c18:	d0e6      	beq.n	8003be8 <_printf_common+0xa4>
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7d9      	b.n	8003bd2 <_printf_common+0x8e>
	...

08003c20 <_printf_i>:
 8003c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c24:	7e0f      	ldrb	r7, [r1, #24]
 8003c26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c28:	2f78      	cmp	r7, #120	@ 0x78
 8003c2a:	4691      	mov	r9, r2
 8003c2c:	4680      	mov	r8, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	469a      	mov	sl, r3
 8003c32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c36:	d807      	bhi.n	8003c48 <_printf_i+0x28>
 8003c38:	2f62      	cmp	r7, #98	@ 0x62
 8003c3a:	d80a      	bhi.n	8003c52 <_printf_i+0x32>
 8003c3c:	2f00      	cmp	r7, #0
 8003c3e:	f000 80d1 	beq.w	8003de4 <_printf_i+0x1c4>
 8003c42:	2f58      	cmp	r7, #88	@ 0x58
 8003c44:	f000 80b8 	beq.w	8003db8 <_printf_i+0x198>
 8003c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c50:	e03a      	b.n	8003cc8 <_printf_i+0xa8>
 8003c52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c56:	2b15      	cmp	r3, #21
 8003c58:	d8f6      	bhi.n	8003c48 <_printf_i+0x28>
 8003c5a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c60 <_printf_i+0x40>)
 8003c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c60:	08003cb9 	.word	0x08003cb9
 8003c64:	08003ccd 	.word	0x08003ccd
 8003c68:	08003c49 	.word	0x08003c49
 8003c6c:	08003c49 	.word	0x08003c49
 8003c70:	08003c49 	.word	0x08003c49
 8003c74:	08003c49 	.word	0x08003c49
 8003c78:	08003ccd 	.word	0x08003ccd
 8003c7c:	08003c49 	.word	0x08003c49
 8003c80:	08003c49 	.word	0x08003c49
 8003c84:	08003c49 	.word	0x08003c49
 8003c88:	08003c49 	.word	0x08003c49
 8003c8c:	08003dcb 	.word	0x08003dcb
 8003c90:	08003cf7 	.word	0x08003cf7
 8003c94:	08003d85 	.word	0x08003d85
 8003c98:	08003c49 	.word	0x08003c49
 8003c9c:	08003c49 	.word	0x08003c49
 8003ca0:	08003ded 	.word	0x08003ded
 8003ca4:	08003c49 	.word	0x08003c49
 8003ca8:	08003cf7 	.word	0x08003cf7
 8003cac:	08003c49 	.word	0x08003c49
 8003cb0:	08003c49 	.word	0x08003c49
 8003cb4:	08003d8d 	.word	0x08003d8d
 8003cb8:	6833      	ldr	r3, [r6, #0]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6032      	str	r2, [r6, #0]
 8003cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e09c      	b.n	8003e06 <_printf_i+0x1e6>
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	6820      	ldr	r0, [r4, #0]
 8003cd0:	1d19      	adds	r1, r3, #4
 8003cd2:	6031      	str	r1, [r6, #0]
 8003cd4:	0606      	lsls	r6, r0, #24
 8003cd6:	d501      	bpl.n	8003cdc <_printf_i+0xbc>
 8003cd8:	681d      	ldr	r5, [r3, #0]
 8003cda:	e003      	b.n	8003ce4 <_printf_i+0xc4>
 8003cdc:	0645      	lsls	r5, r0, #25
 8003cde:	d5fb      	bpl.n	8003cd8 <_printf_i+0xb8>
 8003ce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	da03      	bge.n	8003cf0 <_printf_i+0xd0>
 8003ce8:	232d      	movs	r3, #45	@ 0x2d
 8003cea:	426d      	negs	r5, r5
 8003cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cf0:	4858      	ldr	r0, [pc, #352]	@ (8003e54 <_printf_i+0x234>)
 8003cf2:	230a      	movs	r3, #10
 8003cf4:	e011      	b.n	8003d1a <_printf_i+0xfa>
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	0608      	lsls	r0, r1, #24
 8003cfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d00:	d402      	bmi.n	8003d08 <_printf_i+0xe8>
 8003d02:	0649      	lsls	r1, r1, #25
 8003d04:	bf48      	it	mi
 8003d06:	b2ad      	uxthmi	r5, r5
 8003d08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d0a:	4852      	ldr	r0, [pc, #328]	@ (8003e54 <_printf_i+0x234>)
 8003d0c:	6033      	str	r3, [r6, #0]
 8003d0e:	bf14      	ite	ne
 8003d10:	230a      	movne	r3, #10
 8003d12:	2308      	moveq	r3, #8
 8003d14:	2100      	movs	r1, #0
 8003d16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d1a:	6866      	ldr	r6, [r4, #4]
 8003d1c:	60a6      	str	r6, [r4, #8]
 8003d1e:	2e00      	cmp	r6, #0
 8003d20:	db05      	blt.n	8003d2e <_printf_i+0x10e>
 8003d22:	6821      	ldr	r1, [r4, #0]
 8003d24:	432e      	orrs	r6, r5
 8003d26:	f021 0104 	bic.w	r1, r1, #4
 8003d2a:	6021      	str	r1, [r4, #0]
 8003d2c:	d04b      	beq.n	8003dc6 <_printf_i+0x1a6>
 8003d2e:	4616      	mov	r6, r2
 8003d30:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d34:	fb03 5711 	mls	r7, r3, r1, r5
 8003d38:	5dc7      	ldrb	r7, [r0, r7]
 8003d3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d3e:	462f      	mov	r7, r5
 8003d40:	42bb      	cmp	r3, r7
 8003d42:	460d      	mov	r5, r1
 8003d44:	d9f4      	bls.n	8003d30 <_printf_i+0x110>
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d10b      	bne.n	8003d62 <_printf_i+0x142>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	07df      	lsls	r7, r3, #31
 8003d4e:	d508      	bpl.n	8003d62 <_printf_i+0x142>
 8003d50:	6923      	ldr	r3, [r4, #16]
 8003d52:	6861      	ldr	r1, [r4, #4]
 8003d54:	4299      	cmp	r1, r3
 8003d56:	bfde      	ittt	le
 8003d58:	2330      	movle	r3, #48	@ 0x30
 8003d5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d62:	1b92      	subs	r2, r2, r6
 8003d64:	6122      	str	r2, [r4, #16]
 8003d66:	f8cd a000 	str.w	sl, [sp]
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	aa03      	add	r2, sp, #12
 8003d6e:	4621      	mov	r1, r4
 8003d70:	4640      	mov	r0, r8
 8003d72:	f7ff fee7 	bl	8003b44 <_printf_common>
 8003d76:	3001      	adds	r0, #1
 8003d78:	d14a      	bne.n	8003e10 <_printf_i+0x1f0>
 8003d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7e:	b004      	add	sp, #16
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	f043 0320 	orr.w	r3, r3, #32
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	4832      	ldr	r0, [pc, #200]	@ (8003e58 <_printf_i+0x238>)
 8003d8e:	2778      	movs	r7, #120	@ 0x78
 8003d90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	061f      	lsls	r7, r3, #24
 8003d9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d9e:	d402      	bmi.n	8003da6 <_printf_i+0x186>
 8003da0:	065f      	lsls	r7, r3, #25
 8003da2:	bf48      	it	mi
 8003da4:	b2ad      	uxthmi	r5, r5
 8003da6:	6031      	str	r1, [r6, #0]
 8003da8:	07d9      	lsls	r1, r3, #31
 8003daa:	bf44      	itt	mi
 8003dac:	f043 0320 	orrmi.w	r3, r3, #32
 8003db0:	6023      	strmi	r3, [r4, #0]
 8003db2:	b11d      	cbz	r5, 8003dbc <_printf_i+0x19c>
 8003db4:	2310      	movs	r3, #16
 8003db6:	e7ad      	b.n	8003d14 <_printf_i+0xf4>
 8003db8:	4826      	ldr	r0, [pc, #152]	@ (8003e54 <_printf_i+0x234>)
 8003dba:	e7e9      	b.n	8003d90 <_printf_i+0x170>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	f023 0320 	bic.w	r3, r3, #32
 8003dc2:	6023      	str	r3, [r4, #0]
 8003dc4:	e7f6      	b.n	8003db4 <_printf_i+0x194>
 8003dc6:	4616      	mov	r6, r2
 8003dc8:	e7bd      	b.n	8003d46 <_printf_i+0x126>
 8003dca:	6833      	ldr	r3, [r6, #0]
 8003dcc:	6825      	ldr	r5, [r4, #0]
 8003dce:	6961      	ldr	r1, [r4, #20]
 8003dd0:	1d18      	adds	r0, r3, #4
 8003dd2:	6030      	str	r0, [r6, #0]
 8003dd4:	062e      	lsls	r6, r5, #24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	d501      	bpl.n	8003dde <_printf_i+0x1be>
 8003dda:	6019      	str	r1, [r3, #0]
 8003ddc:	e002      	b.n	8003de4 <_printf_i+0x1c4>
 8003dde:	0668      	lsls	r0, r5, #25
 8003de0:	d5fb      	bpl.n	8003dda <_printf_i+0x1ba>
 8003de2:	8019      	strh	r1, [r3, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	4616      	mov	r6, r2
 8003dea:	e7bc      	b.n	8003d66 <_printf_i+0x146>
 8003dec:	6833      	ldr	r3, [r6, #0]
 8003dee:	1d1a      	adds	r2, r3, #4
 8003df0:	6032      	str	r2, [r6, #0]
 8003df2:	681e      	ldr	r6, [r3, #0]
 8003df4:	6862      	ldr	r2, [r4, #4]
 8003df6:	2100      	movs	r1, #0
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f7fc f9e9 	bl	80001d0 <memchr>
 8003dfe:	b108      	cbz	r0, 8003e04 <_printf_i+0x1e4>
 8003e00:	1b80      	subs	r0, r0, r6
 8003e02:	6060      	str	r0, [r4, #4]
 8003e04:	6863      	ldr	r3, [r4, #4]
 8003e06:	6123      	str	r3, [r4, #16]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e0e:	e7aa      	b.n	8003d66 <_printf_i+0x146>
 8003e10:	6923      	ldr	r3, [r4, #16]
 8003e12:	4632      	mov	r2, r6
 8003e14:	4649      	mov	r1, r9
 8003e16:	4640      	mov	r0, r8
 8003e18:	47d0      	blx	sl
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d0ad      	beq.n	8003d7a <_printf_i+0x15a>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	079b      	lsls	r3, r3, #30
 8003e22:	d413      	bmi.n	8003e4c <_printf_i+0x22c>
 8003e24:	68e0      	ldr	r0, [r4, #12]
 8003e26:	9b03      	ldr	r3, [sp, #12]
 8003e28:	4298      	cmp	r0, r3
 8003e2a:	bfb8      	it	lt
 8003e2c:	4618      	movlt	r0, r3
 8003e2e:	e7a6      	b.n	8003d7e <_printf_i+0x15e>
 8003e30:	2301      	movs	r3, #1
 8003e32:	4632      	mov	r2, r6
 8003e34:	4649      	mov	r1, r9
 8003e36:	4640      	mov	r0, r8
 8003e38:	47d0      	blx	sl
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d09d      	beq.n	8003d7a <_printf_i+0x15a>
 8003e3e:	3501      	adds	r5, #1
 8003e40:	68e3      	ldr	r3, [r4, #12]
 8003e42:	9903      	ldr	r1, [sp, #12]
 8003e44:	1a5b      	subs	r3, r3, r1
 8003e46:	42ab      	cmp	r3, r5
 8003e48:	dcf2      	bgt.n	8003e30 <_printf_i+0x210>
 8003e4a:	e7eb      	b.n	8003e24 <_printf_i+0x204>
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	f104 0619 	add.w	r6, r4, #25
 8003e52:	e7f5      	b.n	8003e40 <_printf_i+0x220>
 8003e54:	08005f72 	.word	0x08005f72
 8003e58:	08005f83 	.word	0x08005f83

08003e5c <std>:
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	4604      	mov	r4, r0
 8003e62:	e9c0 3300 	strd	r3, r3, [r0]
 8003e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e6a:	6083      	str	r3, [r0, #8]
 8003e6c:	8181      	strh	r1, [r0, #12]
 8003e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e70:	81c2      	strh	r2, [r0, #14]
 8003e72:	6183      	str	r3, [r0, #24]
 8003e74:	4619      	mov	r1, r3
 8003e76:	2208      	movs	r2, #8
 8003e78:	305c      	adds	r0, #92	@ 0x5c
 8003e7a:	f000 f99b 	bl	80041b4 <memset>
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <std+0x58>)
 8003e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e82:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb8 <std+0x5c>)
 8003e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e86:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <std+0x60>)
 8003e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <std+0x64>)
 8003e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <std+0x68>)
 8003e90:	6224      	str	r4, [r4, #32]
 8003e92:	429c      	cmp	r4, r3
 8003e94:	d006      	beq.n	8003ea4 <std+0x48>
 8003e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e9a:	4294      	cmp	r4, r2
 8003e9c:	d002      	beq.n	8003ea4 <std+0x48>
 8003e9e:	33d0      	adds	r3, #208	@ 0xd0
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	d105      	bne.n	8003eb0 <std+0x54>
 8003ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eac:	f000 b9fe 	b.w	80042ac <__retarget_lock_init_recursive>
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	bf00      	nop
 8003eb4:	08004005 	.word	0x08004005
 8003eb8:	08004027 	.word	0x08004027
 8003ebc:	0800405f 	.word	0x0800405f
 8003ec0:	08004083 	.word	0x08004083
 8003ec4:	200003a0 	.word	0x200003a0

08003ec8 <stdio_exit_handler>:
 8003ec8:	4a02      	ldr	r2, [pc, #8]	@ (8003ed4 <stdio_exit_handler+0xc>)
 8003eca:	4903      	ldr	r1, [pc, #12]	@ (8003ed8 <stdio_exit_handler+0x10>)
 8003ecc:	4803      	ldr	r0, [pc, #12]	@ (8003edc <stdio_exit_handler+0x14>)
 8003ece:	f000 b869 	b.w	8003fa4 <_fwalk_sglue>
 8003ed2:	bf00      	nop
 8003ed4:	200000a8 	.word	0x200000a8
 8003ed8:	08005c41 	.word	0x08005c41
 8003edc:	200000b8 	.word	0x200000b8

08003ee0 <cleanup_stdio>:
 8003ee0:	6841      	ldr	r1, [r0, #4]
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f14 <cleanup_stdio+0x34>)
 8003ee4:	4299      	cmp	r1, r3
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	4604      	mov	r4, r0
 8003eea:	d001      	beq.n	8003ef0 <cleanup_stdio+0x10>
 8003eec:	f001 fea8 	bl	8005c40 <_fflush_r>
 8003ef0:	68a1      	ldr	r1, [r4, #8]
 8003ef2:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <cleanup_stdio+0x38>)
 8003ef4:	4299      	cmp	r1, r3
 8003ef6:	d002      	beq.n	8003efe <cleanup_stdio+0x1e>
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f001 fea1 	bl	8005c40 <_fflush_r>
 8003efe:	68e1      	ldr	r1, [r4, #12]
 8003f00:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <cleanup_stdio+0x3c>)
 8003f02:	4299      	cmp	r1, r3
 8003f04:	d004      	beq.n	8003f10 <cleanup_stdio+0x30>
 8003f06:	4620      	mov	r0, r4
 8003f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f0c:	f001 be98 	b.w	8005c40 <_fflush_r>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	bf00      	nop
 8003f14:	200003a0 	.word	0x200003a0
 8003f18:	20000408 	.word	0x20000408
 8003f1c:	20000470 	.word	0x20000470

08003f20 <global_stdio_init.part.0>:
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <global_stdio_init.part.0+0x30>)
 8003f24:	4c0b      	ldr	r4, [pc, #44]	@ (8003f54 <global_stdio_init.part.0+0x34>)
 8003f26:	4a0c      	ldr	r2, [pc, #48]	@ (8003f58 <global_stdio_init.part.0+0x38>)
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2104      	movs	r1, #4
 8003f30:	f7ff ff94 	bl	8003e5c <std>
 8003f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f38:	2201      	movs	r2, #1
 8003f3a:	2109      	movs	r1, #9
 8003f3c:	f7ff ff8e 	bl	8003e5c <std>
 8003f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f44:	2202      	movs	r2, #2
 8003f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4a:	2112      	movs	r1, #18
 8003f4c:	f7ff bf86 	b.w	8003e5c <std>
 8003f50:	200004d8 	.word	0x200004d8
 8003f54:	200003a0 	.word	0x200003a0
 8003f58:	08003ec9 	.word	0x08003ec9

08003f5c <__sfp_lock_acquire>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	@ (8003f64 <__sfp_lock_acquire+0x8>)
 8003f5e:	f000 b9a6 	b.w	80042ae <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	200004e1 	.word	0x200004e1

08003f68 <__sfp_lock_release>:
 8003f68:	4801      	ldr	r0, [pc, #4]	@ (8003f70 <__sfp_lock_release+0x8>)
 8003f6a:	f000 b9a1 	b.w	80042b0 <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	200004e1 	.word	0x200004e1

08003f74 <__sinit>:
 8003f74:	b510      	push	{r4, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	f7ff fff0 	bl	8003f5c <__sfp_lock_acquire>
 8003f7c:	6a23      	ldr	r3, [r4, #32]
 8003f7e:	b11b      	cbz	r3, 8003f88 <__sinit+0x14>
 8003f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f84:	f7ff bff0 	b.w	8003f68 <__sfp_lock_release>
 8003f88:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <__sinit+0x28>)
 8003f8a:	6223      	str	r3, [r4, #32]
 8003f8c:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <__sinit+0x2c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f5      	bne.n	8003f80 <__sinit+0xc>
 8003f94:	f7ff ffc4 	bl	8003f20 <global_stdio_init.part.0>
 8003f98:	e7f2      	b.n	8003f80 <__sinit+0xc>
 8003f9a:	bf00      	nop
 8003f9c:	08003ee1 	.word	0x08003ee1
 8003fa0:	200004d8 	.word	0x200004d8

08003fa4 <_fwalk_sglue>:
 8003fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa8:	4607      	mov	r7, r0
 8003faa:	4688      	mov	r8, r1
 8003fac:	4614      	mov	r4, r2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8003fb8:	d505      	bpl.n	8003fc6 <_fwalk_sglue+0x22>
 8003fba:	6824      	ldr	r4, [r4, #0]
 8003fbc:	2c00      	cmp	r4, #0
 8003fbe:	d1f7      	bne.n	8003fb0 <_fwalk_sglue+0xc>
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc6:	89ab      	ldrh	r3, [r5, #12]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d907      	bls.n	8003fdc <_fwalk_sglue+0x38>
 8003fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	d003      	beq.n	8003fdc <_fwalk_sglue+0x38>
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	47c0      	blx	r8
 8003fda:	4306      	orrs	r6, r0
 8003fdc:	3568      	adds	r5, #104	@ 0x68
 8003fde:	e7e9      	b.n	8003fb4 <_fwalk_sglue+0x10>

08003fe0 <iprintf>:
 8003fe0:	b40f      	push	{r0, r1, r2, r3}
 8003fe2:	b507      	push	{r0, r1, r2, lr}
 8003fe4:	4906      	ldr	r1, [pc, #24]	@ (8004000 <iprintf+0x20>)
 8003fe6:	ab04      	add	r3, sp, #16
 8003fe8:	6808      	ldr	r0, [r1, #0]
 8003fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fee:	6881      	ldr	r1, [r0, #8]
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	f001 fc89 	bl	8005908 <_vfiprintf_r>
 8003ff6:	b003      	add	sp, #12
 8003ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ffc:	b004      	add	sp, #16
 8003ffe:	4770      	bx	lr
 8004000:	200000b4 	.word	0x200000b4

08004004 <__sread>:
 8004004:	b510      	push	{r4, lr}
 8004006:	460c      	mov	r4, r1
 8004008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800400c:	f000 f900 	bl	8004210 <_read_r>
 8004010:	2800      	cmp	r0, #0
 8004012:	bfab      	itete	ge
 8004014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004016:	89a3      	ldrhlt	r3, [r4, #12]
 8004018:	181b      	addge	r3, r3, r0
 800401a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800401e:	bfac      	ite	ge
 8004020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004022:	81a3      	strhlt	r3, [r4, #12]
 8004024:	bd10      	pop	{r4, pc}

08004026 <__swrite>:
 8004026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402a:	461f      	mov	r7, r3
 800402c:	898b      	ldrh	r3, [r1, #12]
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	4605      	mov	r5, r0
 8004032:	460c      	mov	r4, r1
 8004034:	4616      	mov	r6, r2
 8004036:	d505      	bpl.n	8004044 <__swrite+0x1e>
 8004038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403c:	2302      	movs	r3, #2
 800403e:	2200      	movs	r2, #0
 8004040:	f000 f8d4 	bl	80041ec <_lseek_r>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800404a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	4632      	mov	r2, r6
 8004052:	463b      	mov	r3, r7
 8004054:	4628      	mov	r0, r5
 8004056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800405a:	f000 b8eb 	b.w	8004234 <_write_r>

0800405e <__sseek>:
 800405e:	b510      	push	{r4, lr}
 8004060:	460c      	mov	r4, r1
 8004062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004066:	f000 f8c1 	bl	80041ec <_lseek_r>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	bf15      	itete	ne
 8004070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800407a:	81a3      	strheq	r3, [r4, #12]
 800407c:	bf18      	it	ne
 800407e:	81a3      	strhne	r3, [r4, #12]
 8004080:	bd10      	pop	{r4, pc}

08004082 <__sclose>:
 8004082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004086:	f000 b8a1 	b.w	80041cc <_close_r>

0800408a <__swbuf_r>:
 800408a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408c:	460e      	mov	r6, r1
 800408e:	4614      	mov	r4, r2
 8004090:	4605      	mov	r5, r0
 8004092:	b118      	cbz	r0, 800409c <__swbuf_r+0x12>
 8004094:	6a03      	ldr	r3, [r0, #32]
 8004096:	b90b      	cbnz	r3, 800409c <__swbuf_r+0x12>
 8004098:	f7ff ff6c 	bl	8003f74 <__sinit>
 800409c:	69a3      	ldr	r3, [r4, #24]
 800409e:	60a3      	str	r3, [r4, #8]
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	071a      	lsls	r2, r3, #28
 80040a4:	d501      	bpl.n	80040aa <__swbuf_r+0x20>
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	b943      	cbnz	r3, 80040bc <__swbuf_r+0x32>
 80040aa:	4621      	mov	r1, r4
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 f82b 	bl	8004108 <__swsetup_r>
 80040b2:	b118      	cbz	r0, 80040bc <__swbuf_r+0x32>
 80040b4:	f04f 37ff 	mov.w	r7, #4294967295
 80040b8:	4638      	mov	r0, r7
 80040ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	6922      	ldr	r2, [r4, #16]
 80040c0:	1a98      	subs	r0, r3, r2
 80040c2:	6963      	ldr	r3, [r4, #20]
 80040c4:	b2f6      	uxtb	r6, r6
 80040c6:	4283      	cmp	r3, r0
 80040c8:	4637      	mov	r7, r6
 80040ca:	dc05      	bgt.n	80040d8 <__swbuf_r+0x4e>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	f001 fdb6 	bl	8005c40 <_fflush_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d1ed      	bne.n	80040b4 <__swbuf_r+0x2a>
 80040d8:	68a3      	ldr	r3, [r4, #8]
 80040da:	3b01      	subs	r3, #1
 80040dc:	60a3      	str	r3, [r4, #8]
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	701e      	strb	r6, [r3, #0]
 80040e6:	6962      	ldr	r2, [r4, #20]
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d004      	beq.n	80040f8 <__swbuf_r+0x6e>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	07db      	lsls	r3, r3, #31
 80040f2:	d5e1      	bpl.n	80040b8 <__swbuf_r+0x2e>
 80040f4:	2e0a      	cmp	r6, #10
 80040f6:	d1df      	bne.n	80040b8 <__swbuf_r+0x2e>
 80040f8:	4621      	mov	r1, r4
 80040fa:	4628      	mov	r0, r5
 80040fc:	f001 fda0 	bl	8005c40 <_fflush_r>
 8004100:	2800      	cmp	r0, #0
 8004102:	d0d9      	beq.n	80040b8 <__swbuf_r+0x2e>
 8004104:	e7d6      	b.n	80040b4 <__swbuf_r+0x2a>
	...

08004108 <__swsetup_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <__swsetup_r+0xa8>)
 800410c:	4605      	mov	r5, r0
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	460c      	mov	r4, r1
 8004112:	b118      	cbz	r0, 800411c <__swsetup_r+0x14>
 8004114:	6a03      	ldr	r3, [r0, #32]
 8004116:	b90b      	cbnz	r3, 800411c <__swsetup_r+0x14>
 8004118:	f7ff ff2c 	bl	8003f74 <__sinit>
 800411c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004120:	0719      	lsls	r1, r3, #28
 8004122:	d422      	bmi.n	800416a <__swsetup_r+0x62>
 8004124:	06da      	lsls	r2, r3, #27
 8004126:	d407      	bmi.n	8004138 <__swsetup_r+0x30>
 8004128:	2209      	movs	r2, #9
 800412a:	602a      	str	r2, [r5, #0]
 800412c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	e033      	b.n	80041a0 <__swsetup_r+0x98>
 8004138:	0758      	lsls	r0, r3, #29
 800413a:	d512      	bpl.n	8004162 <__swsetup_r+0x5a>
 800413c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800413e:	b141      	cbz	r1, 8004152 <__swsetup_r+0x4a>
 8004140:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004144:	4299      	cmp	r1, r3
 8004146:	d002      	beq.n	800414e <__swsetup_r+0x46>
 8004148:	4628      	mov	r0, r5
 800414a:	f000 ff39 	bl	8004fc0 <_free_r>
 800414e:	2300      	movs	r3, #0
 8004150:	6363      	str	r3, [r4, #52]	@ 0x34
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	2300      	movs	r3, #0
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f043 0308 	orr.w	r3, r3, #8
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	b94b      	cbnz	r3, 8004182 <__swsetup_r+0x7a>
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004178:	d003      	beq.n	8004182 <__swsetup_r+0x7a>
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f001 fdbf 	bl	8005d00 <__smakebuf_r>
 8004182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004186:	f013 0201 	ands.w	r2, r3, #1
 800418a:	d00a      	beq.n	80041a2 <__swsetup_r+0x9a>
 800418c:	2200      	movs	r2, #0
 800418e:	60a2      	str	r2, [r4, #8]
 8004190:	6962      	ldr	r2, [r4, #20]
 8004192:	4252      	negs	r2, r2
 8004194:	61a2      	str	r2, [r4, #24]
 8004196:	6922      	ldr	r2, [r4, #16]
 8004198:	b942      	cbnz	r2, 80041ac <__swsetup_r+0xa4>
 800419a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800419e:	d1c5      	bne.n	800412c <__swsetup_r+0x24>
 80041a0:	bd38      	pop	{r3, r4, r5, pc}
 80041a2:	0799      	lsls	r1, r3, #30
 80041a4:	bf58      	it	pl
 80041a6:	6962      	ldrpl	r2, [r4, #20]
 80041a8:	60a2      	str	r2, [r4, #8]
 80041aa:	e7f4      	b.n	8004196 <__swsetup_r+0x8e>
 80041ac:	2000      	movs	r0, #0
 80041ae:	e7f7      	b.n	80041a0 <__swsetup_r+0x98>
 80041b0:	200000b4 	.word	0x200000b4

080041b4 <memset>:
 80041b4:	4402      	add	r2, r0
 80041b6:	4603      	mov	r3, r0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	f803 1b01 	strb.w	r1, [r3], #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <_localeconv_r>:
 80041c4:	4800      	ldr	r0, [pc, #0]	@ (80041c8 <_localeconv_r+0x4>)
 80041c6:	4770      	bx	lr
 80041c8:	200001f4 	.word	0x200001f4

080041cc <_close_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	@ (80041e8 <_close_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fe fffc 	bl	80031d4 <_close>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_close_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_close_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200004dc 	.word	0x200004dc

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	@ (800420c <_lseek_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fe ffab 	bl	8003156 <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200004dc 	.word	0x200004dc

08004210 <_read_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	@ (8004230 <_read_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fe ff43 	bl	80030aa <_read>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_read_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_read_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	200004dc 	.word	0x200004dc

08004234 <_write_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d07      	ldr	r5, [pc, #28]	@ (8004254 <_write_r+0x20>)
 8004238:	4604      	mov	r4, r0
 800423a:	4608      	mov	r0, r1
 800423c:	4611      	mov	r1, r2
 800423e:	2200      	movs	r2, #0
 8004240:	602a      	str	r2, [r5, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f7fe ff99 	bl	800317a <_write>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_write_r+0x1e>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_write_r+0x1e>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	200004dc 	.word	0x200004dc

08004258 <__errno>:
 8004258:	4b01      	ldr	r3, [pc, #4]	@ (8004260 <__errno+0x8>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	200000b4 	.word	0x200000b4

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	@ (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	@ (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	@ (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	@ (80042a8 <__libc_init_array+0x44>)
 8004278:	f001 fe38 	bl	8005eec <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	080062dc 	.word	0x080062dc
 80042a0:	080062dc 	.word	0x080062dc
 80042a4:	080062dc 	.word	0x080062dc
 80042a8:	080062e0 	.word	0x080062e0

080042ac <__retarget_lock_init_recursive>:
 80042ac:	4770      	bx	lr

080042ae <__retarget_lock_acquire_recursive>:
 80042ae:	4770      	bx	lr

080042b0 <__retarget_lock_release_recursive>:
 80042b0:	4770      	bx	lr

080042b2 <memcpy>:
 80042b2:	440a      	add	r2, r1
 80042b4:	4291      	cmp	r1, r2
 80042b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80042ba:	d100      	bne.n	80042be <memcpy+0xc>
 80042bc:	4770      	bx	lr
 80042be:	b510      	push	{r4, lr}
 80042c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c8:	4291      	cmp	r1, r2
 80042ca:	d1f9      	bne.n	80042c0 <memcpy+0xe>
 80042cc:	bd10      	pop	{r4, pc}
	...

080042d0 <__assert_func>:
 80042d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042d2:	4614      	mov	r4, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <__assert_func+0x2c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4605      	mov	r5, r0
 80042dc:	68d8      	ldr	r0, [r3, #12]
 80042de:	b14c      	cbz	r4, 80042f4 <__assert_func+0x24>
 80042e0:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <__assert_func+0x30>)
 80042e2:	9100      	str	r1, [sp, #0]
 80042e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042e8:	4906      	ldr	r1, [pc, #24]	@ (8004304 <__assert_func+0x34>)
 80042ea:	462b      	mov	r3, r5
 80042ec:	f001 fcd0 	bl	8005c90 <fiprintf>
 80042f0:	f001 fd74 	bl	8005ddc <abort>
 80042f4:	4b04      	ldr	r3, [pc, #16]	@ (8004308 <__assert_func+0x38>)
 80042f6:	461c      	mov	r4, r3
 80042f8:	e7f3      	b.n	80042e2 <__assert_func+0x12>
 80042fa:	bf00      	nop
 80042fc:	200000b4 	.word	0x200000b4
 8004300:	08005f94 	.word	0x08005f94
 8004304:	08005fa1 	.word	0x08005fa1
 8004308:	08005fcf 	.word	0x08005fcf

0800430c <quorem>:
 800430c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	6903      	ldr	r3, [r0, #16]
 8004312:	690c      	ldr	r4, [r1, #16]
 8004314:	42a3      	cmp	r3, r4
 8004316:	4607      	mov	r7, r0
 8004318:	db7e      	blt.n	8004418 <quorem+0x10c>
 800431a:	3c01      	subs	r4, #1
 800431c:	f101 0814 	add.w	r8, r1, #20
 8004320:	00a3      	lsls	r3, r4, #2
 8004322:	f100 0514 	add.w	r5, r0, #20
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004336:	3301      	adds	r3, #1
 8004338:	429a      	cmp	r2, r3
 800433a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800433e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004342:	d32e      	bcc.n	80043a2 <quorem+0x96>
 8004344:	f04f 0a00 	mov.w	sl, #0
 8004348:	46c4      	mov	ip, r8
 800434a:	46ae      	mov	lr, r5
 800434c:	46d3      	mov	fp, sl
 800434e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004352:	b298      	uxth	r0, r3
 8004354:	fb06 a000 	mla	r0, r6, r0, sl
 8004358:	0c02      	lsrs	r2, r0, #16
 800435a:	0c1b      	lsrs	r3, r3, #16
 800435c:	fb06 2303 	mla	r3, r6, r3, r2
 8004360:	f8de 2000 	ldr.w	r2, [lr]
 8004364:	b280      	uxth	r0, r0
 8004366:	b292      	uxth	r2, r2
 8004368:	1a12      	subs	r2, r2, r0
 800436a:	445a      	add	r2, fp
 800436c:	f8de 0000 	ldr.w	r0, [lr]
 8004370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004374:	b29b      	uxth	r3, r3
 8004376:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800437a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800437e:	b292      	uxth	r2, r2
 8004380:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004384:	45e1      	cmp	r9, ip
 8004386:	f84e 2b04 	str.w	r2, [lr], #4
 800438a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800438e:	d2de      	bcs.n	800434e <quorem+0x42>
 8004390:	9b00      	ldr	r3, [sp, #0]
 8004392:	58eb      	ldr	r3, [r5, r3]
 8004394:	b92b      	cbnz	r3, 80043a2 <quorem+0x96>
 8004396:	9b01      	ldr	r3, [sp, #4]
 8004398:	3b04      	subs	r3, #4
 800439a:	429d      	cmp	r5, r3
 800439c:	461a      	mov	r2, r3
 800439e:	d32f      	bcc.n	8004400 <quorem+0xf4>
 80043a0:	613c      	str	r4, [r7, #16]
 80043a2:	4638      	mov	r0, r7
 80043a4:	f001 f97e 	bl	80056a4 <__mcmp>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	db25      	blt.n	80043f8 <quorem+0xec>
 80043ac:	4629      	mov	r1, r5
 80043ae:	2000      	movs	r0, #0
 80043b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80043b4:	f8d1 c000 	ldr.w	ip, [r1]
 80043b8:	fa1f fe82 	uxth.w	lr, r2
 80043bc:	fa1f f38c 	uxth.w	r3, ip
 80043c0:	eba3 030e 	sub.w	r3, r3, lr
 80043c4:	4403      	add	r3, r0
 80043c6:	0c12      	lsrs	r2, r2, #16
 80043c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80043cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043d6:	45c1      	cmp	r9, r8
 80043d8:	f841 3b04 	str.w	r3, [r1], #4
 80043dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80043e0:	d2e6      	bcs.n	80043b0 <quorem+0xa4>
 80043e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043ea:	b922      	cbnz	r2, 80043f6 <quorem+0xea>
 80043ec:	3b04      	subs	r3, #4
 80043ee:	429d      	cmp	r5, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	d30b      	bcc.n	800440c <quorem+0x100>
 80043f4:	613c      	str	r4, [r7, #16]
 80043f6:	3601      	adds	r6, #1
 80043f8:	4630      	mov	r0, r6
 80043fa:	b003      	add	sp, #12
 80043fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	3b04      	subs	r3, #4
 8004404:	2a00      	cmp	r2, #0
 8004406:	d1cb      	bne.n	80043a0 <quorem+0x94>
 8004408:	3c01      	subs	r4, #1
 800440a:	e7c6      	b.n	800439a <quorem+0x8e>
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	3b04      	subs	r3, #4
 8004410:	2a00      	cmp	r2, #0
 8004412:	d1ef      	bne.n	80043f4 <quorem+0xe8>
 8004414:	3c01      	subs	r4, #1
 8004416:	e7ea      	b.n	80043ee <quorem+0xe2>
 8004418:	2000      	movs	r0, #0
 800441a:	e7ee      	b.n	80043fa <quorem+0xee>
 800441c:	0000      	movs	r0, r0
	...

08004420 <_dtoa_r>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	69c7      	ldr	r7, [r0, #28]
 8004426:	b097      	sub	sp, #92	@ 0x5c
 8004428:	ed8d 0b04 	vstr	d0, [sp, #16]
 800442c:	ec55 4b10 	vmov	r4, r5, d0
 8004430:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004432:	9107      	str	r1, [sp, #28]
 8004434:	4681      	mov	r9, r0
 8004436:	920c      	str	r2, [sp, #48]	@ 0x30
 8004438:	9311      	str	r3, [sp, #68]	@ 0x44
 800443a:	b97f      	cbnz	r7, 800445c <_dtoa_r+0x3c>
 800443c:	2010      	movs	r0, #16
 800443e:	f000 fe09 	bl	8005054 <malloc>
 8004442:	4602      	mov	r2, r0
 8004444:	f8c9 001c 	str.w	r0, [r9, #28]
 8004448:	b920      	cbnz	r0, 8004454 <_dtoa_r+0x34>
 800444a:	4ba9      	ldr	r3, [pc, #676]	@ (80046f0 <_dtoa_r+0x2d0>)
 800444c:	21ef      	movs	r1, #239	@ 0xef
 800444e:	48a9      	ldr	r0, [pc, #676]	@ (80046f4 <_dtoa_r+0x2d4>)
 8004450:	f7ff ff3e 	bl	80042d0 <__assert_func>
 8004454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004458:	6007      	str	r7, [r0, #0]
 800445a:	60c7      	str	r7, [r0, #12]
 800445c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004460:	6819      	ldr	r1, [r3, #0]
 8004462:	b159      	cbz	r1, 800447c <_dtoa_r+0x5c>
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	604a      	str	r2, [r1, #4]
 8004468:	2301      	movs	r3, #1
 800446a:	4093      	lsls	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
 800446e:	4648      	mov	r0, r9
 8004470:	f000 fee6 	bl	8005240 <_Bfree>
 8004474:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	1e2b      	subs	r3, r5, #0
 800447e:	bfb9      	ittee	lt
 8004480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004484:	9305      	strlt	r3, [sp, #20]
 8004486:	2300      	movge	r3, #0
 8004488:	6033      	strge	r3, [r6, #0]
 800448a:	9f05      	ldr	r7, [sp, #20]
 800448c:	4b9a      	ldr	r3, [pc, #616]	@ (80046f8 <_dtoa_r+0x2d8>)
 800448e:	bfbc      	itt	lt
 8004490:	2201      	movlt	r2, #1
 8004492:	6032      	strlt	r2, [r6, #0]
 8004494:	43bb      	bics	r3, r7
 8004496:	d112      	bne.n	80044be <_dtoa_r+0x9e>
 8004498:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800449a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80044a4:	4323      	orrs	r3, r4
 80044a6:	f000 855a 	beq.w	8004f5e <_dtoa_r+0xb3e>
 80044aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800470c <_dtoa_r+0x2ec>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 855c 	beq.w	8004f6e <_dtoa_r+0xb4e>
 80044b6:	f10a 0303 	add.w	r3, sl, #3
 80044ba:	f000 bd56 	b.w	8004f6a <_dtoa_r+0xb4a>
 80044be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80044c2:	2200      	movs	r2, #0
 80044c4:	ec51 0b17 	vmov	r0, r1, d7
 80044c8:	2300      	movs	r3, #0
 80044ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80044ce:	f7fc fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80044d2:	4680      	mov	r8, r0
 80044d4:	b158      	cbz	r0, 80044ee <_dtoa_r+0xce>
 80044d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80044d8:	2301      	movs	r3, #1
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044de:	b113      	cbz	r3, 80044e6 <_dtoa_r+0xc6>
 80044e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80044e2:	4b86      	ldr	r3, [pc, #536]	@ (80046fc <_dtoa_r+0x2dc>)
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004710 <_dtoa_r+0x2f0>
 80044ea:	f000 bd40 	b.w	8004f6e <_dtoa_r+0xb4e>
 80044ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80044f2:	aa14      	add	r2, sp, #80	@ 0x50
 80044f4:	a915      	add	r1, sp, #84	@ 0x54
 80044f6:	4648      	mov	r0, r9
 80044f8:	f001 f984 	bl	8005804 <__d2b>
 80044fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	2e00      	cmp	r6, #0
 8004504:	d078      	beq.n	80045f8 <_dtoa_r+0x1d8>
 8004506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004508:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800450c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800451c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004520:	4619      	mov	r1, r3
 8004522:	2200      	movs	r2, #0
 8004524:	4b76      	ldr	r3, [pc, #472]	@ (8004700 <_dtoa_r+0x2e0>)
 8004526:	f7fb feaf 	bl	8000288 <__aeabi_dsub>
 800452a:	a36b      	add	r3, pc, #428	@ (adr r3, 80046d8 <_dtoa_r+0x2b8>)
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fc f862 	bl	80005f8 <__aeabi_dmul>
 8004534:	a36a      	add	r3, pc, #424	@ (adr r3, 80046e0 <_dtoa_r+0x2c0>)
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f7fb fea7 	bl	800028c <__adddf3>
 800453e:	4604      	mov	r4, r0
 8004540:	4630      	mov	r0, r6
 8004542:	460d      	mov	r5, r1
 8004544:	f7fb ffee 	bl	8000524 <__aeabi_i2d>
 8004548:	a367      	add	r3, pc, #412	@ (adr r3, 80046e8 <_dtoa_r+0x2c8>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f7fc f853 	bl	80005f8 <__aeabi_dmul>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4620      	mov	r0, r4
 8004558:	4629      	mov	r1, r5
 800455a:	f7fb fe97 	bl	800028c <__adddf3>
 800455e:	4604      	mov	r4, r0
 8004560:	460d      	mov	r5, r1
 8004562:	f7fc faf9 	bl	8000b58 <__aeabi_d2iz>
 8004566:	2200      	movs	r2, #0
 8004568:	4607      	mov	r7, r0
 800456a:	2300      	movs	r3, #0
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fc fab4 	bl	8000adc <__aeabi_dcmplt>
 8004574:	b140      	cbz	r0, 8004588 <_dtoa_r+0x168>
 8004576:	4638      	mov	r0, r7
 8004578:	f7fb ffd4 	bl	8000524 <__aeabi_i2d>
 800457c:	4622      	mov	r2, r4
 800457e:	462b      	mov	r3, r5
 8004580:	f7fc faa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004584:	b900      	cbnz	r0, 8004588 <_dtoa_r+0x168>
 8004586:	3f01      	subs	r7, #1
 8004588:	2f16      	cmp	r7, #22
 800458a:	d852      	bhi.n	8004632 <_dtoa_r+0x212>
 800458c:	4b5d      	ldr	r3, [pc, #372]	@ (8004704 <_dtoa_r+0x2e4>)
 800458e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800459a:	f7fc fa9f 	bl	8000adc <__aeabi_dcmplt>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d049      	beq.n	8004636 <_dtoa_r+0x216>
 80045a2:	3f01      	subs	r7, #1
 80045a4:	2300      	movs	r3, #0
 80045a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80045a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045aa:	1b9b      	subs	r3, r3, r6
 80045ac:	1e5a      	subs	r2, r3, #1
 80045ae:	bf45      	ittet	mi
 80045b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80045b4:	9300      	strmi	r3, [sp, #0]
 80045b6:	2300      	movpl	r3, #0
 80045b8:	2300      	movmi	r3, #0
 80045ba:	9206      	str	r2, [sp, #24]
 80045bc:	bf54      	ite	pl
 80045be:	9300      	strpl	r3, [sp, #0]
 80045c0:	9306      	strmi	r3, [sp, #24]
 80045c2:	2f00      	cmp	r7, #0
 80045c4:	db39      	blt.n	800463a <_dtoa_r+0x21a>
 80045c6:	9b06      	ldr	r3, [sp, #24]
 80045c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80045ca:	443b      	add	r3, r7
 80045cc:	9306      	str	r3, [sp, #24]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9308      	str	r3, [sp, #32]
 80045d2:	9b07      	ldr	r3, [sp, #28]
 80045d4:	2b09      	cmp	r3, #9
 80045d6:	d863      	bhi.n	80046a0 <_dtoa_r+0x280>
 80045d8:	2b05      	cmp	r3, #5
 80045da:	bfc4      	itt	gt
 80045dc:	3b04      	subgt	r3, #4
 80045de:	9307      	strgt	r3, [sp, #28]
 80045e0:	9b07      	ldr	r3, [sp, #28]
 80045e2:	f1a3 0302 	sub.w	r3, r3, #2
 80045e6:	bfcc      	ite	gt
 80045e8:	2400      	movgt	r4, #0
 80045ea:	2401      	movle	r4, #1
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d863      	bhi.n	80046b8 <_dtoa_r+0x298>
 80045f0:	e8df f003 	tbb	[pc, r3]
 80045f4:	2b375452 	.word	0x2b375452
 80045f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80045fc:	441e      	add	r6, r3
 80045fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004602:	2b20      	cmp	r3, #32
 8004604:	bfc1      	itttt	gt
 8004606:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800460a:	409f      	lslgt	r7, r3
 800460c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004610:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004614:	bfd6      	itet	le
 8004616:	f1c3 0320 	rsble	r3, r3, #32
 800461a:	ea47 0003 	orrgt.w	r0, r7, r3
 800461e:	fa04 f003 	lslle.w	r0, r4, r3
 8004622:	f7fb ff6f 	bl	8000504 <__aeabi_ui2d>
 8004626:	2201      	movs	r2, #1
 8004628:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800462c:	3e01      	subs	r6, #1
 800462e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004630:	e776      	b.n	8004520 <_dtoa_r+0x100>
 8004632:	2301      	movs	r3, #1
 8004634:	e7b7      	b.n	80045a6 <_dtoa_r+0x186>
 8004636:	9010      	str	r0, [sp, #64]	@ 0x40
 8004638:	e7b6      	b.n	80045a8 <_dtoa_r+0x188>
 800463a:	9b00      	ldr	r3, [sp, #0]
 800463c:	1bdb      	subs	r3, r3, r7
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	427b      	negs	r3, r7
 8004642:	9308      	str	r3, [sp, #32]
 8004644:	2300      	movs	r3, #0
 8004646:	930d      	str	r3, [sp, #52]	@ 0x34
 8004648:	e7c3      	b.n	80045d2 <_dtoa_r+0x1b2>
 800464a:	2301      	movs	r3, #1
 800464c:	9309      	str	r3, [sp, #36]	@ 0x24
 800464e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004650:	eb07 0b03 	add.w	fp, r7, r3
 8004654:	f10b 0301 	add.w	r3, fp, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	bfb8      	it	lt
 800465e:	2301      	movlt	r3, #1
 8004660:	e006      	b.n	8004670 <_dtoa_r+0x250>
 8004662:	2301      	movs	r3, #1
 8004664:	9309      	str	r3, [sp, #36]	@ 0x24
 8004666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	dd28      	ble.n	80046be <_dtoa_r+0x29e>
 800466c:	469b      	mov	fp, r3
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004674:	2100      	movs	r1, #0
 8004676:	2204      	movs	r2, #4
 8004678:	f102 0514 	add.w	r5, r2, #20
 800467c:	429d      	cmp	r5, r3
 800467e:	d926      	bls.n	80046ce <_dtoa_r+0x2ae>
 8004680:	6041      	str	r1, [r0, #4]
 8004682:	4648      	mov	r0, r9
 8004684:	f000 fd9c 	bl	80051c0 <_Balloc>
 8004688:	4682      	mov	sl, r0
 800468a:	2800      	cmp	r0, #0
 800468c:	d142      	bne.n	8004714 <_dtoa_r+0x2f4>
 800468e:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <_dtoa_r+0x2e8>)
 8004690:	4602      	mov	r2, r0
 8004692:	f240 11af 	movw	r1, #431	@ 0x1af
 8004696:	e6da      	b.n	800444e <_dtoa_r+0x2e>
 8004698:	2300      	movs	r3, #0
 800469a:	e7e3      	b.n	8004664 <_dtoa_r+0x244>
 800469c:	2300      	movs	r3, #0
 800469e:	e7d5      	b.n	800464c <_dtoa_r+0x22c>
 80046a0:	2401      	movs	r4, #1
 80046a2:	2300      	movs	r3, #0
 80046a4:	9307      	str	r3, [sp, #28]
 80046a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80046a8:	f04f 3bff 	mov.w	fp, #4294967295
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80046b2:	2312      	movs	r3, #18
 80046b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80046b6:	e7db      	b.n	8004670 <_dtoa_r+0x250>
 80046b8:	2301      	movs	r3, #1
 80046ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80046bc:	e7f4      	b.n	80046a8 <_dtoa_r+0x288>
 80046be:	f04f 0b01 	mov.w	fp, #1
 80046c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80046c6:	465b      	mov	r3, fp
 80046c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80046cc:	e7d0      	b.n	8004670 <_dtoa_r+0x250>
 80046ce:	3101      	adds	r1, #1
 80046d0:	0052      	lsls	r2, r2, #1
 80046d2:	e7d1      	b.n	8004678 <_dtoa_r+0x258>
 80046d4:	f3af 8000 	nop.w
 80046d8:	636f4361 	.word	0x636f4361
 80046dc:	3fd287a7 	.word	0x3fd287a7
 80046e0:	8b60c8b3 	.word	0x8b60c8b3
 80046e4:	3fc68a28 	.word	0x3fc68a28
 80046e8:	509f79fb 	.word	0x509f79fb
 80046ec:	3fd34413 	.word	0x3fd34413
 80046f0:	08005fdd 	.word	0x08005fdd
 80046f4:	08005ff4 	.word	0x08005ff4
 80046f8:	7ff00000 	.word	0x7ff00000
 80046fc:	08005f71 	.word	0x08005f71
 8004700:	3ff80000 	.word	0x3ff80000
 8004704:	08006108 	.word	0x08006108
 8004708:	0800604c 	.word	0x0800604c
 800470c:	08005fd9 	.word	0x08005fd9
 8004710:	08005f70 	.word	0x08005f70
 8004714:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004718:	6018      	str	r0, [r3, #0]
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	2b0e      	cmp	r3, #14
 800471e:	f200 80a1 	bhi.w	8004864 <_dtoa_r+0x444>
 8004722:	2c00      	cmp	r4, #0
 8004724:	f000 809e 	beq.w	8004864 <_dtoa_r+0x444>
 8004728:	2f00      	cmp	r7, #0
 800472a:	dd33      	ble.n	8004794 <_dtoa_r+0x374>
 800472c:	4b9c      	ldr	r3, [pc, #624]	@ (80049a0 <_dtoa_r+0x580>)
 800472e:	f007 020f 	and.w	r2, r7, #15
 8004732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004736:	ed93 7b00 	vldr	d7, [r3]
 800473a:	05f8      	lsls	r0, r7, #23
 800473c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004740:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004744:	d516      	bpl.n	8004774 <_dtoa_r+0x354>
 8004746:	4b97      	ldr	r3, [pc, #604]	@ (80049a4 <_dtoa_r+0x584>)
 8004748:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800474c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004750:	f7fc f87c 	bl	800084c <__aeabi_ddiv>
 8004754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004758:	f004 040f 	and.w	r4, r4, #15
 800475c:	2603      	movs	r6, #3
 800475e:	4d91      	ldr	r5, [pc, #580]	@ (80049a4 <_dtoa_r+0x584>)
 8004760:	b954      	cbnz	r4, 8004778 <_dtoa_r+0x358>
 8004762:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800476a:	f7fc f86f 	bl	800084c <__aeabi_ddiv>
 800476e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004772:	e028      	b.n	80047c6 <_dtoa_r+0x3a6>
 8004774:	2602      	movs	r6, #2
 8004776:	e7f2      	b.n	800475e <_dtoa_r+0x33e>
 8004778:	07e1      	lsls	r1, r4, #31
 800477a:	d508      	bpl.n	800478e <_dtoa_r+0x36e>
 800477c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004780:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004784:	f7fb ff38 	bl	80005f8 <__aeabi_dmul>
 8004788:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800478c:	3601      	adds	r6, #1
 800478e:	1064      	asrs	r4, r4, #1
 8004790:	3508      	adds	r5, #8
 8004792:	e7e5      	b.n	8004760 <_dtoa_r+0x340>
 8004794:	f000 80af 	beq.w	80048f6 <_dtoa_r+0x4d6>
 8004798:	427c      	negs	r4, r7
 800479a:	4b81      	ldr	r3, [pc, #516]	@ (80049a0 <_dtoa_r+0x580>)
 800479c:	4d81      	ldr	r5, [pc, #516]	@ (80049a4 <_dtoa_r+0x584>)
 800479e:	f004 020f 	and.w	r2, r4, #15
 80047a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80047ae:	f7fb ff23 	bl	80005f8 <__aeabi_dmul>
 80047b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047b6:	1124      	asrs	r4, r4, #4
 80047b8:	2300      	movs	r3, #0
 80047ba:	2602      	movs	r6, #2
 80047bc:	2c00      	cmp	r4, #0
 80047be:	f040 808f 	bne.w	80048e0 <_dtoa_r+0x4c0>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1d3      	bne.n	800476e <_dtoa_r+0x34e>
 80047c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8094 	beq.w	80048fa <_dtoa_r+0x4da>
 80047d2:	4b75      	ldr	r3, [pc, #468]	@ (80049a8 <_dtoa_r+0x588>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	4620      	mov	r0, r4
 80047d8:	4629      	mov	r1, r5
 80047da:	f7fc f97f 	bl	8000adc <__aeabi_dcmplt>
 80047de:	2800      	cmp	r0, #0
 80047e0:	f000 808b 	beq.w	80048fa <_dtoa_r+0x4da>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8087 	beq.w	80048fa <_dtoa_r+0x4da>
 80047ec:	f1bb 0f00 	cmp.w	fp, #0
 80047f0:	dd34      	ble.n	800485c <_dtoa_r+0x43c>
 80047f2:	4620      	mov	r0, r4
 80047f4:	4b6d      	ldr	r3, [pc, #436]	@ (80049ac <_dtoa_r+0x58c>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	4629      	mov	r1, r5
 80047fa:	f7fb fefd 	bl	80005f8 <__aeabi_dmul>
 80047fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004802:	f107 38ff 	add.w	r8, r7, #4294967295
 8004806:	3601      	adds	r6, #1
 8004808:	465c      	mov	r4, fp
 800480a:	4630      	mov	r0, r6
 800480c:	f7fb fe8a 	bl	8000524 <__aeabi_i2d>
 8004810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004814:	f7fb fef0 	bl	80005f8 <__aeabi_dmul>
 8004818:	4b65      	ldr	r3, [pc, #404]	@ (80049b0 <_dtoa_r+0x590>)
 800481a:	2200      	movs	r2, #0
 800481c:	f7fb fd36 	bl	800028c <__adddf3>
 8004820:	4605      	mov	r5, r0
 8004822:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004826:	2c00      	cmp	r4, #0
 8004828:	d16a      	bne.n	8004900 <_dtoa_r+0x4e0>
 800482a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800482e:	4b61      	ldr	r3, [pc, #388]	@ (80049b4 <_dtoa_r+0x594>)
 8004830:	2200      	movs	r2, #0
 8004832:	f7fb fd29 	bl	8000288 <__aeabi_dsub>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800483e:	462a      	mov	r2, r5
 8004840:	4633      	mov	r3, r6
 8004842:	f7fc f969 	bl	8000b18 <__aeabi_dcmpgt>
 8004846:	2800      	cmp	r0, #0
 8004848:	f040 8298 	bne.w	8004d7c <_dtoa_r+0x95c>
 800484c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004850:	462a      	mov	r2, r5
 8004852:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004856:	f7fc f941 	bl	8000adc <__aeabi_dcmplt>
 800485a:	bb38      	cbnz	r0, 80048ac <_dtoa_r+0x48c>
 800485c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004860:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004864:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004866:	2b00      	cmp	r3, #0
 8004868:	f2c0 8157 	blt.w	8004b1a <_dtoa_r+0x6fa>
 800486c:	2f0e      	cmp	r7, #14
 800486e:	f300 8154 	bgt.w	8004b1a <_dtoa_r+0x6fa>
 8004872:	4b4b      	ldr	r3, [pc, #300]	@ (80049a0 <_dtoa_r+0x580>)
 8004874:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004878:	ed93 7b00 	vldr	d7, [r3]
 800487c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800487e:	2b00      	cmp	r3, #0
 8004880:	ed8d 7b00 	vstr	d7, [sp]
 8004884:	f280 80e5 	bge.w	8004a52 <_dtoa_r+0x632>
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f300 80e1 	bgt.w	8004a52 <_dtoa_r+0x632>
 8004890:	d10c      	bne.n	80048ac <_dtoa_r+0x48c>
 8004892:	4b48      	ldr	r3, [pc, #288]	@ (80049b4 <_dtoa_r+0x594>)
 8004894:	2200      	movs	r2, #0
 8004896:	ec51 0b17 	vmov	r0, r1, d7
 800489a:	f7fb fead 	bl	80005f8 <__aeabi_dmul>
 800489e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048a2:	f7fc f92f 	bl	8000b04 <__aeabi_dcmpge>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f000 8266 	beq.w	8004d78 <_dtoa_r+0x958>
 80048ac:	2400      	movs	r4, #0
 80048ae:	4625      	mov	r5, r4
 80048b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80048b2:	4656      	mov	r6, sl
 80048b4:	ea6f 0803 	mvn.w	r8, r3
 80048b8:	2700      	movs	r7, #0
 80048ba:	4621      	mov	r1, r4
 80048bc:	4648      	mov	r0, r9
 80048be:	f000 fcbf 	bl	8005240 <_Bfree>
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	f000 80bd 	beq.w	8004a42 <_dtoa_r+0x622>
 80048c8:	b12f      	cbz	r7, 80048d6 <_dtoa_r+0x4b6>
 80048ca:	42af      	cmp	r7, r5
 80048cc:	d003      	beq.n	80048d6 <_dtoa_r+0x4b6>
 80048ce:	4639      	mov	r1, r7
 80048d0:	4648      	mov	r0, r9
 80048d2:	f000 fcb5 	bl	8005240 <_Bfree>
 80048d6:	4629      	mov	r1, r5
 80048d8:	4648      	mov	r0, r9
 80048da:	f000 fcb1 	bl	8005240 <_Bfree>
 80048de:	e0b0      	b.n	8004a42 <_dtoa_r+0x622>
 80048e0:	07e2      	lsls	r2, r4, #31
 80048e2:	d505      	bpl.n	80048f0 <_dtoa_r+0x4d0>
 80048e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048e8:	f7fb fe86 	bl	80005f8 <__aeabi_dmul>
 80048ec:	3601      	adds	r6, #1
 80048ee:	2301      	movs	r3, #1
 80048f0:	1064      	asrs	r4, r4, #1
 80048f2:	3508      	adds	r5, #8
 80048f4:	e762      	b.n	80047bc <_dtoa_r+0x39c>
 80048f6:	2602      	movs	r6, #2
 80048f8:	e765      	b.n	80047c6 <_dtoa_r+0x3a6>
 80048fa:	9c03      	ldr	r4, [sp, #12]
 80048fc:	46b8      	mov	r8, r7
 80048fe:	e784      	b.n	800480a <_dtoa_r+0x3ea>
 8004900:	4b27      	ldr	r3, [pc, #156]	@ (80049a0 <_dtoa_r+0x580>)
 8004902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004904:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800490c:	4454      	add	r4, sl
 800490e:	2900      	cmp	r1, #0
 8004910:	d054      	beq.n	80049bc <_dtoa_r+0x59c>
 8004912:	4929      	ldr	r1, [pc, #164]	@ (80049b8 <_dtoa_r+0x598>)
 8004914:	2000      	movs	r0, #0
 8004916:	f7fb ff99 	bl	800084c <__aeabi_ddiv>
 800491a:	4633      	mov	r3, r6
 800491c:	462a      	mov	r2, r5
 800491e:	f7fb fcb3 	bl	8000288 <__aeabi_dsub>
 8004922:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004926:	4656      	mov	r6, sl
 8004928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800492c:	f7fc f914 	bl	8000b58 <__aeabi_d2iz>
 8004930:	4605      	mov	r5, r0
 8004932:	f7fb fdf7 	bl	8000524 <__aeabi_i2d>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800493e:	f7fb fca3 	bl	8000288 <__aeabi_dsub>
 8004942:	3530      	adds	r5, #48	@ 0x30
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800494c:	f806 5b01 	strb.w	r5, [r6], #1
 8004950:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004954:	f7fc f8c2 	bl	8000adc <__aeabi_dcmplt>
 8004958:	2800      	cmp	r0, #0
 800495a:	d172      	bne.n	8004a42 <_dtoa_r+0x622>
 800495c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004960:	4911      	ldr	r1, [pc, #68]	@ (80049a8 <_dtoa_r+0x588>)
 8004962:	2000      	movs	r0, #0
 8004964:	f7fb fc90 	bl	8000288 <__aeabi_dsub>
 8004968:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800496c:	f7fc f8b6 	bl	8000adc <__aeabi_dcmplt>
 8004970:	2800      	cmp	r0, #0
 8004972:	f040 80b4 	bne.w	8004ade <_dtoa_r+0x6be>
 8004976:	42a6      	cmp	r6, r4
 8004978:	f43f af70 	beq.w	800485c <_dtoa_r+0x43c>
 800497c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004980:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <_dtoa_r+0x58c>)
 8004982:	2200      	movs	r2, #0
 8004984:	f7fb fe38 	bl	80005f8 <__aeabi_dmul>
 8004988:	4b08      	ldr	r3, [pc, #32]	@ (80049ac <_dtoa_r+0x58c>)
 800498a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800498e:	2200      	movs	r2, #0
 8004990:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004994:	f7fb fe30 	bl	80005f8 <__aeabi_dmul>
 8004998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499c:	e7c4      	b.n	8004928 <_dtoa_r+0x508>
 800499e:	bf00      	nop
 80049a0:	08006108 	.word	0x08006108
 80049a4:	080060e0 	.word	0x080060e0
 80049a8:	3ff00000 	.word	0x3ff00000
 80049ac:	40240000 	.word	0x40240000
 80049b0:	401c0000 	.word	0x401c0000
 80049b4:	40140000 	.word	0x40140000
 80049b8:	3fe00000 	.word	0x3fe00000
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	f7fb fe1a 	bl	80005f8 <__aeabi_dmul>
 80049c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80049c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80049ca:	4656      	mov	r6, sl
 80049cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049d0:	f7fc f8c2 	bl	8000b58 <__aeabi_d2iz>
 80049d4:	4605      	mov	r5, r0
 80049d6:	f7fb fda5 	bl	8000524 <__aeabi_i2d>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049e2:	f7fb fc51 	bl	8000288 <__aeabi_dsub>
 80049e6:	3530      	adds	r5, #48	@ 0x30
 80049e8:	f806 5b01 	strb.w	r5, [r6], #1
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	d124      	bne.n	8004a46 <_dtoa_r+0x626>
 80049fc:	4baf      	ldr	r3, [pc, #700]	@ (8004cbc <_dtoa_r+0x89c>)
 80049fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004a02:	f7fb fc43 	bl	800028c <__adddf3>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a0e:	f7fc f883 	bl	8000b18 <__aeabi_dcmpgt>
 8004a12:	2800      	cmp	r0, #0
 8004a14:	d163      	bne.n	8004ade <_dtoa_r+0x6be>
 8004a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004a1a:	49a8      	ldr	r1, [pc, #672]	@ (8004cbc <_dtoa_r+0x89c>)
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7fb fc33 	bl	8000288 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a2a:	f7fc f857 	bl	8000adc <__aeabi_dcmplt>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f43f af14 	beq.w	800485c <_dtoa_r+0x43c>
 8004a34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004a36:	1e73      	subs	r3, r6, #1
 8004a38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004a3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004a3e:	2b30      	cmp	r3, #48	@ 0x30
 8004a40:	d0f8      	beq.n	8004a34 <_dtoa_r+0x614>
 8004a42:	4647      	mov	r7, r8
 8004a44:	e03b      	b.n	8004abe <_dtoa_r+0x69e>
 8004a46:	4b9e      	ldr	r3, [pc, #632]	@ (8004cc0 <_dtoa_r+0x8a0>)
 8004a48:	f7fb fdd6 	bl	80005f8 <__aeabi_dmul>
 8004a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a50:	e7bc      	b.n	80049cc <_dtoa_r+0x5ac>
 8004a52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004a56:	4656      	mov	r6, sl
 8004a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	4629      	mov	r1, r5
 8004a60:	f7fb fef4 	bl	800084c <__aeabi_ddiv>
 8004a64:	f7fc f878 	bl	8000b58 <__aeabi_d2iz>
 8004a68:	4680      	mov	r8, r0
 8004a6a:	f7fb fd5b 	bl	8000524 <__aeabi_i2d>
 8004a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a72:	f7fb fdc1 	bl	80005f8 <__aeabi_dmul>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004a82:	f7fb fc01 	bl	8000288 <__aeabi_dsub>
 8004a86:	f806 4b01 	strb.w	r4, [r6], #1
 8004a8a:	9d03      	ldr	r5, [sp, #12]
 8004a8c:	eba6 040a 	sub.w	r4, r6, sl
 8004a90:	42a5      	cmp	r5, r4
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	d133      	bne.n	8004b00 <_dtoa_r+0x6e0>
 8004a98:	f7fb fbf8 	bl	800028c <__adddf3>
 8004a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	f7fc f838 	bl	8000b18 <__aeabi_dcmpgt>
 8004aa8:	b9c0      	cbnz	r0, 8004adc <_dtoa_r+0x6bc>
 8004aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fc f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ab6:	b110      	cbz	r0, 8004abe <_dtoa_r+0x69e>
 8004ab8:	f018 0f01 	tst.w	r8, #1
 8004abc:	d10e      	bne.n	8004adc <_dtoa_r+0x6bc>
 8004abe:	9902      	ldr	r1, [sp, #8]
 8004ac0:	4648      	mov	r0, r9
 8004ac2:	f000 fbbd 	bl	8005240 <_Bfree>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	7033      	strb	r3, [r6, #0]
 8004aca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004acc:	3701      	adds	r7, #1
 8004ace:	601f      	str	r7, [r3, #0]
 8004ad0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 824b 	beq.w	8004f6e <_dtoa_r+0xb4e>
 8004ad8:	601e      	str	r6, [r3, #0]
 8004ada:	e248      	b.n	8004f6e <_dtoa_r+0xb4e>
 8004adc:	46b8      	mov	r8, r7
 8004ade:	4633      	mov	r3, r6
 8004ae0:	461e      	mov	r6, r3
 8004ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ae6:	2a39      	cmp	r2, #57	@ 0x39
 8004ae8:	d106      	bne.n	8004af8 <_dtoa_r+0x6d8>
 8004aea:	459a      	cmp	sl, r3
 8004aec:	d1f8      	bne.n	8004ae0 <_dtoa_r+0x6c0>
 8004aee:	2230      	movs	r2, #48	@ 0x30
 8004af0:	f108 0801 	add.w	r8, r8, #1
 8004af4:	f88a 2000 	strb.w	r2, [sl]
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	3201      	adds	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e7a0      	b.n	8004a42 <_dtoa_r+0x622>
 8004b00:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc0 <_dtoa_r+0x8a0>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	f7fb fd78 	bl	80005f8 <__aeabi_dmul>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	460d      	mov	r5, r1
 8004b10:	f7fb ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d09f      	beq.n	8004a58 <_dtoa_r+0x638>
 8004b18:	e7d1      	b.n	8004abe <_dtoa_r+0x69e>
 8004b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	f000 80ea 	beq.w	8004cf6 <_dtoa_r+0x8d6>
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	2a01      	cmp	r2, #1
 8004b26:	f300 80cd 	bgt.w	8004cc4 <_dtoa_r+0x8a4>
 8004b2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	f000 80c1 	beq.w	8004cb4 <_dtoa_r+0x894>
 8004b32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004b36:	9c08      	ldr	r4, [sp, #32]
 8004b38:	9e00      	ldr	r6, [sp, #0]
 8004b3a:	9a00      	ldr	r2, [sp, #0]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	9200      	str	r2, [sp, #0]
 8004b40:	9a06      	ldr	r2, [sp, #24]
 8004b42:	2101      	movs	r1, #1
 8004b44:	441a      	add	r2, r3
 8004b46:	4648      	mov	r0, r9
 8004b48:	9206      	str	r2, [sp, #24]
 8004b4a:	f000 fc2d 	bl	80053a8 <__i2b>
 8004b4e:	4605      	mov	r5, r0
 8004b50:	b166      	cbz	r6, 8004b6c <_dtoa_r+0x74c>
 8004b52:	9b06      	ldr	r3, [sp, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	dd09      	ble.n	8004b6c <_dtoa_r+0x74c>
 8004b58:	42b3      	cmp	r3, r6
 8004b5a:	9a00      	ldr	r2, [sp, #0]
 8004b5c:	bfa8      	it	ge
 8004b5e:	4633      	movge	r3, r6
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	9200      	str	r2, [sp, #0]
 8004b64:	9a06      	ldr	r2, [sp, #24]
 8004b66:	1af6      	subs	r6, r6, r3
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	9306      	str	r3, [sp, #24]
 8004b6c:	9b08      	ldr	r3, [sp, #32]
 8004b6e:	b30b      	cbz	r3, 8004bb4 <_dtoa_r+0x794>
 8004b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80c6 	beq.w	8004d04 <_dtoa_r+0x8e4>
 8004b78:	2c00      	cmp	r4, #0
 8004b7a:	f000 80c0 	beq.w	8004cfe <_dtoa_r+0x8de>
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4622      	mov	r2, r4
 8004b82:	4648      	mov	r0, r9
 8004b84:	f000 fcc8 	bl	8005518 <__pow5mult>
 8004b88:	9a02      	ldr	r2, [sp, #8]
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	4648      	mov	r0, r9
 8004b90:	f000 fc20 	bl	80053d4 <__multiply>
 8004b94:	9902      	ldr	r1, [sp, #8]
 8004b96:	4680      	mov	r8, r0
 8004b98:	4648      	mov	r0, r9
 8004b9a:	f000 fb51 	bl	8005240 <_Bfree>
 8004b9e:	9b08      	ldr	r3, [sp, #32]
 8004ba0:	1b1b      	subs	r3, r3, r4
 8004ba2:	9308      	str	r3, [sp, #32]
 8004ba4:	f000 80b1 	beq.w	8004d0a <_dtoa_r+0x8ea>
 8004ba8:	9a08      	ldr	r2, [sp, #32]
 8004baa:	4641      	mov	r1, r8
 8004bac:	4648      	mov	r0, r9
 8004bae:	f000 fcb3 	bl	8005518 <__pow5mult>
 8004bb2:	9002      	str	r0, [sp, #8]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4648      	mov	r0, r9
 8004bb8:	f000 fbf6 	bl	80053a8 <__i2b>
 8004bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 81d8 	beq.w	8004f76 <_dtoa_r+0xb56>
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4601      	mov	r1, r0
 8004bca:	4648      	mov	r0, r9
 8004bcc:	f000 fca4 	bl	8005518 <__pow5mult>
 8004bd0:	9b07      	ldr	r3, [sp, #28]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	f300 809f 	bgt.w	8004d18 <_dtoa_r+0x8f8>
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f040 8097 	bne.w	8004d10 <_dtoa_r+0x8f0>
 8004be2:	9b05      	ldr	r3, [sp, #20]
 8004be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 8093 	bne.w	8004d14 <_dtoa_r+0x8f4>
 8004bee:	9b05      	ldr	r3, [sp, #20]
 8004bf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004bf4:	0d1b      	lsrs	r3, r3, #20
 8004bf6:	051b      	lsls	r3, r3, #20
 8004bf8:	b133      	cbz	r3, 8004c08 <_dtoa_r+0x7e8>
 8004bfa:	9b00      	ldr	r3, [sp, #0]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	9b06      	ldr	r3, [sp, #24]
 8004c02:	3301      	adds	r3, #1
 8004c04:	9306      	str	r3, [sp, #24]
 8004c06:	2301      	movs	r3, #1
 8004c08:	9308      	str	r3, [sp, #32]
 8004c0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 81b8 	beq.w	8004f82 <_dtoa_r+0xb62>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c18:	6918      	ldr	r0, [r3, #16]
 8004c1a:	f000 fb79 	bl	8005310 <__hi0bits>
 8004c1e:	f1c0 0020 	rsb	r0, r0, #32
 8004c22:	9b06      	ldr	r3, [sp, #24]
 8004c24:	4418      	add	r0, r3
 8004c26:	f010 001f 	ands.w	r0, r0, #31
 8004c2a:	f000 8082 	beq.w	8004d32 <_dtoa_r+0x912>
 8004c2e:	f1c0 0320 	rsb	r3, r0, #32
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	dd73      	ble.n	8004d1e <_dtoa_r+0x8fe>
 8004c36:	9b00      	ldr	r3, [sp, #0]
 8004c38:	f1c0 001c 	rsb	r0, r0, #28
 8004c3c:	4403      	add	r3, r0
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	9b06      	ldr	r3, [sp, #24]
 8004c42:	4403      	add	r3, r0
 8004c44:	4406      	add	r6, r0
 8004c46:	9306      	str	r3, [sp, #24]
 8004c48:	9b00      	ldr	r3, [sp, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dd05      	ble.n	8004c5a <_dtoa_r+0x83a>
 8004c4e:	9902      	ldr	r1, [sp, #8]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4648      	mov	r0, r9
 8004c54:	f000 fcba 	bl	80055cc <__lshift>
 8004c58:	9002      	str	r0, [sp, #8]
 8004c5a:	9b06      	ldr	r3, [sp, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	dd05      	ble.n	8004c6c <_dtoa_r+0x84c>
 8004c60:	4621      	mov	r1, r4
 8004c62:	461a      	mov	r2, r3
 8004c64:	4648      	mov	r0, r9
 8004c66:	f000 fcb1 	bl	80055cc <__lshift>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d061      	beq.n	8004d36 <_dtoa_r+0x916>
 8004c72:	9802      	ldr	r0, [sp, #8]
 8004c74:	4621      	mov	r1, r4
 8004c76:	f000 fd15 	bl	80056a4 <__mcmp>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	da5b      	bge.n	8004d36 <_dtoa_r+0x916>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9902      	ldr	r1, [sp, #8]
 8004c82:	220a      	movs	r2, #10
 8004c84:	4648      	mov	r0, r9
 8004c86:	f000 fafd 	bl	8005284 <__multadd>
 8004c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c8c:	9002      	str	r0, [sp, #8]
 8004c8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8177 	beq.w	8004f86 <_dtoa_r+0xb66>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	220a      	movs	r2, #10
 8004c9e:	4648      	mov	r0, r9
 8004ca0:	f000 faf0 	bl	8005284 <__multadd>
 8004ca4:	f1bb 0f00 	cmp.w	fp, #0
 8004ca8:	4605      	mov	r5, r0
 8004caa:	dc6f      	bgt.n	8004d8c <_dtoa_r+0x96c>
 8004cac:	9b07      	ldr	r3, [sp, #28]
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	dc49      	bgt.n	8004d46 <_dtoa_r+0x926>
 8004cb2:	e06b      	b.n	8004d8c <_dtoa_r+0x96c>
 8004cb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004cba:	e73c      	b.n	8004b36 <_dtoa_r+0x716>
 8004cbc:	3fe00000 	.word	0x3fe00000
 8004cc0:	40240000 	.word	0x40240000
 8004cc4:	9b03      	ldr	r3, [sp, #12]
 8004cc6:	1e5c      	subs	r4, r3, #1
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	db09      	blt.n	8004ce2 <_dtoa_r+0x8c2>
 8004cce:	1b1c      	subs	r4, r3, r4
 8004cd0:	9b03      	ldr	r3, [sp, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f6bf af30 	bge.w	8004b38 <_dtoa_r+0x718>
 8004cd8:	9b00      	ldr	r3, [sp, #0]
 8004cda:	9a03      	ldr	r2, [sp, #12]
 8004cdc:	1a9e      	subs	r6, r3, r2
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e72b      	b.n	8004b3a <_dtoa_r+0x71a>
 8004ce2:	9b08      	ldr	r3, [sp, #32]
 8004ce4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004ce6:	9408      	str	r4, [sp, #32]
 8004ce8:	1ae3      	subs	r3, r4, r3
 8004cea:	441a      	add	r2, r3
 8004cec:	9e00      	ldr	r6, [sp, #0]
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	920d      	str	r2, [sp, #52]	@ 0x34
 8004cf2:	2400      	movs	r4, #0
 8004cf4:	e721      	b.n	8004b3a <_dtoa_r+0x71a>
 8004cf6:	9c08      	ldr	r4, [sp, #32]
 8004cf8:	9e00      	ldr	r6, [sp, #0]
 8004cfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004cfc:	e728      	b.n	8004b50 <_dtoa_r+0x730>
 8004cfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004d02:	e751      	b.n	8004ba8 <_dtoa_r+0x788>
 8004d04:	9a08      	ldr	r2, [sp, #32]
 8004d06:	9902      	ldr	r1, [sp, #8]
 8004d08:	e750      	b.n	8004bac <_dtoa_r+0x78c>
 8004d0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8004d0e:	e751      	b.n	8004bb4 <_dtoa_r+0x794>
 8004d10:	2300      	movs	r3, #0
 8004d12:	e779      	b.n	8004c08 <_dtoa_r+0x7e8>
 8004d14:	9b04      	ldr	r3, [sp, #16]
 8004d16:	e777      	b.n	8004c08 <_dtoa_r+0x7e8>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9308      	str	r3, [sp, #32]
 8004d1c:	e779      	b.n	8004c12 <_dtoa_r+0x7f2>
 8004d1e:	d093      	beq.n	8004c48 <_dtoa_r+0x828>
 8004d20:	9a00      	ldr	r2, [sp, #0]
 8004d22:	331c      	adds	r3, #28
 8004d24:	441a      	add	r2, r3
 8004d26:	9200      	str	r2, [sp, #0]
 8004d28:	9a06      	ldr	r2, [sp, #24]
 8004d2a:	441a      	add	r2, r3
 8004d2c:	441e      	add	r6, r3
 8004d2e:	9206      	str	r2, [sp, #24]
 8004d30:	e78a      	b.n	8004c48 <_dtoa_r+0x828>
 8004d32:	4603      	mov	r3, r0
 8004d34:	e7f4      	b.n	8004d20 <_dtoa_r+0x900>
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	46b8      	mov	r8, r7
 8004d3c:	dc20      	bgt.n	8004d80 <_dtoa_r+0x960>
 8004d3e:	469b      	mov	fp, r3
 8004d40:	9b07      	ldr	r3, [sp, #28]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	dd1e      	ble.n	8004d84 <_dtoa_r+0x964>
 8004d46:	f1bb 0f00 	cmp.w	fp, #0
 8004d4a:	f47f adb1 	bne.w	80048b0 <_dtoa_r+0x490>
 8004d4e:	4621      	mov	r1, r4
 8004d50:	465b      	mov	r3, fp
 8004d52:	2205      	movs	r2, #5
 8004d54:	4648      	mov	r0, r9
 8004d56:	f000 fa95 	bl	8005284 <__multadd>
 8004d5a:	4601      	mov	r1, r0
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	9802      	ldr	r0, [sp, #8]
 8004d60:	f000 fca0 	bl	80056a4 <__mcmp>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f77f ada3 	ble.w	80048b0 <_dtoa_r+0x490>
 8004d6a:	4656      	mov	r6, sl
 8004d6c:	2331      	movs	r3, #49	@ 0x31
 8004d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8004d72:	f108 0801 	add.w	r8, r8, #1
 8004d76:	e59f      	b.n	80048b8 <_dtoa_r+0x498>
 8004d78:	9c03      	ldr	r4, [sp, #12]
 8004d7a:	46b8      	mov	r8, r7
 8004d7c:	4625      	mov	r5, r4
 8004d7e:	e7f4      	b.n	8004d6a <_dtoa_r+0x94a>
 8004d80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8101 	beq.w	8004f8e <_dtoa_r+0xb6e>
 8004d8c:	2e00      	cmp	r6, #0
 8004d8e:	dd05      	ble.n	8004d9c <_dtoa_r+0x97c>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4632      	mov	r2, r6
 8004d94:	4648      	mov	r0, r9
 8004d96:	f000 fc19 	bl	80055cc <__lshift>
 8004d9a:	4605      	mov	r5, r0
 8004d9c:	9b08      	ldr	r3, [sp, #32]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d05c      	beq.n	8004e5c <_dtoa_r+0xa3c>
 8004da2:	6869      	ldr	r1, [r5, #4]
 8004da4:	4648      	mov	r0, r9
 8004da6:	f000 fa0b 	bl	80051c0 <_Balloc>
 8004daa:	4606      	mov	r6, r0
 8004dac:	b928      	cbnz	r0, 8004dba <_dtoa_r+0x99a>
 8004dae:	4b82      	ldr	r3, [pc, #520]	@ (8004fb8 <_dtoa_r+0xb98>)
 8004db0:	4602      	mov	r2, r0
 8004db2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004db6:	f7ff bb4a 	b.w	800444e <_dtoa_r+0x2e>
 8004dba:	692a      	ldr	r2, [r5, #16]
 8004dbc:	3202      	adds	r2, #2
 8004dbe:	0092      	lsls	r2, r2, #2
 8004dc0:	f105 010c 	add.w	r1, r5, #12
 8004dc4:	300c      	adds	r0, #12
 8004dc6:	f7ff fa74 	bl	80042b2 <memcpy>
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4631      	mov	r1, r6
 8004dce:	4648      	mov	r0, r9
 8004dd0:	f000 fbfc 	bl	80055cc <__lshift>
 8004dd4:	f10a 0301 	add.w	r3, sl, #1
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	eb0a 030b 	add.w	r3, sl, fp
 8004dde:	9308      	str	r3, [sp, #32]
 8004de0:	9b04      	ldr	r3, [sp, #16]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	462f      	mov	r7, r5
 8004de8:	9306      	str	r3, [sp, #24]
 8004dea:	4605      	mov	r5, r0
 8004dec:	9b00      	ldr	r3, [sp, #0]
 8004dee:	9802      	ldr	r0, [sp, #8]
 8004df0:	4621      	mov	r1, r4
 8004df2:	f103 3bff 	add.w	fp, r3, #4294967295
 8004df6:	f7ff fa89 	bl	800430c <quorem>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	3330      	adds	r3, #48	@ 0x30
 8004dfe:	9003      	str	r0, [sp, #12]
 8004e00:	4639      	mov	r1, r7
 8004e02:	9802      	ldr	r0, [sp, #8]
 8004e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e06:	f000 fc4d 	bl	80056a4 <__mcmp>
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	9004      	str	r0, [sp, #16]
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4648      	mov	r0, r9
 8004e12:	f000 fc63 	bl	80056dc <__mdiff>
 8004e16:	68c2      	ldr	r2, [r0, #12]
 8004e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e1a:	4606      	mov	r6, r0
 8004e1c:	bb02      	cbnz	r2, 8004e60 <_dtoa_r+0xa40>
 8004e1e:	4601      	mov	r1, r0
 8004e20:	9802      	ldr	r0, [sp, #8]
 8004e22:	f000 fc3f 	bl	80056a4 <__mcmp>
 8004e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e32:	f000 fa05 	bl	8005240 <_Bfree>
 8004e36:	9b07      	ldr	r3, [sp, #28]
 8004e38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e3a:	9e00      	ldr	r6, [sp, #0]
 8004e3c:	ea42 0103 	orr.w	r1, r2, r3
 8004e40:	9b06      	ldr	r3, [sp, #24]
 8004e42:	4319      	orrs	r1, r3
 8004e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e46:	d10d      	bne.n	8004e64 <_dtoa_r+0xa44>
 8004e48:	2b39      	cmp	r3, #57	@ 0x39
 8004e4a:	d027      	beq.n	8004e9c <_dtoa_r+0xa7c>
 8004e4c:	9a04      	ldr	r2, [sp, #16]
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	dd01      	ble.n	8004e56 <_dtoa_r+0xa36>
 8004e52:	9b03      	ldr	r3, [sp, #12]
 8004e54:	3331      	adds	r3, #49	@ 0x31
 8004e56:	f88b 3000 	strb.w	r3, [fp]
 8004e5a:	e52e      	b.n	80048ba <_dtoa_r+0x49a>
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	e7b9      	b.n	8004dd4 <_dtoa_r+0x9b4>
 8004e60:	2201      	movs	r2, #1
 8004e62:	e7e2      	b.n	8004e2a <_dtoa_r+0xa0a>
 8004e64:	9904      	ldr	r1, [sp, #16]
 8004e66:	2900      	cmp	r1, #0
 8004e68:	db04      	blt.n	8004e74 <_dtoa_r+0xa54>
 8004e6a:	9807      	ldr	r0, [sp, #28]
 8004e6c:	4301      	orrs	r1, r0
 8004e6e:	9806      	ldr	r0, [sp, #24]
 8004e70:	4301      	orrs	r1, r0
 8004e72:	d120      	bne.n	8004eb6 <_dtoa_r+0xa96>
 8004e74:	2a00      	cmp	r2, #0
 8004e76:	ddee      	ble.n	8004e56 <_dtoa_r+0xa36>
 8004e78:	9902      	ldr	r1, [sp, #8]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4648      	mov	r0, r9
 8004e80:	f000 fba4 	bl	80055cc <__lshift>
 8004e84:	4621      	mov	r1, r4
 8004e86:	9002      	str	r0, [sp, #8]
 8004e88:	f000 fc0c 	bl	80056a4 <__mcmp>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	9b00      	ldr	r3, [sp, #0]
 8004e90:	dc02      	bgt.n	8004e98 <_dtoa_r+0xa78>
 8004e92:	d1e0      	bne.n	8004e56 <_dtoa_r+0xa36>
 8004e94:	07da      	lsls	r2, r3, #31
 8004e96:	d5de      	bpl.n	8004e56 <_dtoa_r+0xa36>
 8004e98:	2b39      	cmp	r3, #57	@ 0x39
 8004e9a:	d1da      	bne.n	8004e52 <_dtoa_r+0xa32>
 8004e9c:	2339      	movs	r3, #57	@ 0x39
 8004e9e:	f88b 3000 	strb.w	r3, [fp]
 8004ea2:	4633      	mov	r3, r6
 8004ea4:	461e      	mov	r6, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004eac:	2a39      	cmp	r2, #57	@ 0x39
 8004eae:	d04e      	beq.n	8004f4e <_dtoa_r+0xb2e>
 8004eb0:	3201      	adds	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e501      	b.n	80048ba <_dtoa_r+0x49a>
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	dd03      	ble.n	8004ec2 <_dtoa_r+0xaa2>
 8004eba:	2b39      	cmp	r3, #57	@ 0x39
 8004ebc:	d0ee      	beq.n	8004e9c <_dtoa_r+0xa7c>
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	e7c9      	b.n	8004e56 <_dtoa_r+0xa36>
 8004ec2:	9a00      	ldr	r2, [sp, #0]
 8004ec4:	9908      	ldr	r1, [sp, #32]
 8004ec6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004eca:	428a      	cmp	r2, r1
 8004ecc:	d028      	beq.n	8004f20 <_dtoa_r+0xb00>
 8004ece:	9902      	ldr	r1, [sp, #8]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	220a      	movs	r2, #10
 8004ed4:	4648      	mov	r0, r9
 8004ed6:	f000 f9d5 	bl	8005284 <__multadd>
 8004eda:	42af      	cmp	r7, r5
 8004edc:	9002      	str	r0, [sp, #8]
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	f04f 020a 	mov.w	r2, #10
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	4648      	mov	r0, r9
 8004eea:	d107      	bne.n	8004efc <_dtoa_r+0xadc>
 8004eec:	f000 f9ca 	bl	8005284 <__multadd>
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	9b00      	ldr	r3, [sp, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	e777      	b.n	8004dec <_dtoa_r+0x9cc>
 8004efc:	f000 f9c2 	bl	8005284 <__multadd>
 8004f00:	4629      	mov	r1, r5
 8004f02:	4607      	mov	r7, r0
 8004f04:	2300      	movs	r3, #0
 8004f06:	220a      	movs	r2, #10
 8004f08:	4648      	mov	r0, r9
 8004f0a:	f000 f9bb 	bl	8005284 <__multadd>
 8004f0e:	4605      	mov	r5, r0
 8004f10:	e7f0      	b.n	8004ef4 <_dtoa_r+0xad4>
 8004f12:	f1bb 0f00 	cmp.w	fp, #0
 8004f16:	bfcc      	ite	gt
 8004f18:	465e      	movgt	r6, fp
 8004f1a:	2601      	movle	r6, #1
 8004f1c:	4456      	add	r6, sl
 8004f1e:	2700      	movs	r7, #0
 8004f20:	9902      	ldr	r1, [sp, #8]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	4648      	mov	r0, r9
 8004f28:	f000 fb50 	bl	80055cc <__lshift>
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	9002      	str	r0, [sp, #8]
 8004f30:	f000 fbb8 	bl	80056a4 <__mcmp>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	dcb4      	bgt.n	8004ea2 <_dtoa_r+0xa82>
 8004f38:	d102      	bne.n	8004f40 <_dtoa_r+0xb20>
 8004f3a:	9b00      	ldr	r3, [sp, #0]
 8004f3c:	07db      	lsls	r3, r3, #31
 8004f3e:	d4b0      	bmi.n	8004ea2 <_dtoa_r+0xa82>
 8004f40:	4633      	mov	r3, r6
 8004f42:	461e      	mov	r6, r3
 8004f44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f48:	2a30      	cmp	r2, #48	@ 0x30
 8004f4a:	d0fa      	beq.n	8004f42 <_dtoa_r+0xb22>
 8004f4c:	e4b5      	b.n	80048ba <_dtoa_r+0x49a>
 8004f4e:	459a      	cmp	sl, r3
 8004f50:	d1a8      	bne.n	8004ea4 <_dtoa_r+0xa84>
 8004f52:	2331      	movs	r3, #49	@ 0x31
 8004f54:	f108 0801 	add.w	r8, r8, #1
 8004f58:	f88a 3000 	strb.w	r3, [sl]
 8004f5c:	e4ad      	b.n	80048ba <_dtoa_r+0x49a>
 8004f5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004fbc <_dtoa_r+0xb9c>
 8004f64:	b11b      	cbz	r3, 8004f6e <_dtoa_r+0xb4e>
 8004f66:	f10a 0308 	add.w	r3, sl, #8
 8004f6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4650      	mov	r0, sl
 8004f70:	b017      	add	sp, #92	@ 0x5c
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f76:	9b07      	ldr	r3, [sp, #28]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	f77f ae2e 	ble.w	8004bda <_dtoa_r+0x7ba>
 8004f7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f80:	9308      	str	r3, [sp, #32]
 8004f82:	2001      	movs	r0, #1
 8004f84:	e64d      	b.n	8004c22 <_dtoa_r+0x802>
 8004f86:	f1bb 0f00 	cmp.w	fp, #0
 8004f8a:	f77f aed9 	ble.w	8004d40 <_dtoa_r+0x920>
 8004f8e:	4656      	mov	r6, sl
 8004f90:	9802      	ldr	r0, [sp, #8]
 8004f92:	4621      	mov	r1, r4
 8004f94:	f7ff f9ba 	bl	800430c <quorem>
 8004f98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004f9c:	f806 3b01 	strb.w	r3, [r6], #1
 8004fa0:	eba6 020a 	sub.w	r2, r6, sl
 8004fa4:	4593      	cmp	fp, r2
 8004fa6:	ddb4      	ble.n	8004f12 <_dtoa_r+0xaf2>
 8004fa8:	9902      	ldr	r1, [sp, #8]
 8004faa:	2300      	movs	r3, #0
 8004fac:	220a      	movs	r2, #10
 8004fae:	4648      	mov	r0, r9
 8004fb0:	f000 f968 	bl	8005284 <__multadd>
 8004fb4:	9002      	str	r0, [sp, #8]
 8004fb6:	e7eb      	b.n	8004f90 <_dtoa_r+0xb70>
 8004fb8:	0800604c 	.word	0x0800604c
 8004fbc:	08005fd0 	.word	0x08005fd0

08004fc0 <_free_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d041      	beq.n	800504c <_free_r+0x8c>
 8004fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fcc:	1f0c      	subs	r4, r1, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfb8      	it	lt
 8004fd2:	18e4      	addlt	r4, r4, r3
 8004fd4:	f000 f8e8 	bl	80051a8 <__malloc_lock>
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <_free_r+0x90>)
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	b933      	cbnz	r3, 8004fec <_free_r+0x2c>
 8004fde:	6063      	str	r3, [r4, #4]
 8004fe0:	6014      	str	r4, [r2, #0]
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fe8:	f000 b8e4 	b.w	80051b4 <__malloc_unlock>
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d908      	bls.n	8005002 <_free_r+0x42>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	1821      	adds	r1, r4, r0
 8004ff4:	428b      	cmp	r3, r1
 8004ff6:	bf01      	itttt	eq
 8004ff8:	6819      	ldreq	r1, [r3, #0]
 8004ffa:	685b      	ldreq	r3, [r3, #4]
 8004ffc:	1809      	addeq	r1, r1, r0
 8004ffe:	6021      	streq	r1, [r4, #0]
 8005000:	e7ed      	b.n	8004fde <_free_r+0x1e>
 8005002:	461a      	mov	r2, r3
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	b10b      	cbz	r3, 800500c <_free_r+0x4c>
 8005008:	42a3      	cmp	r3, r4
 800500a:	d9fa      	bls.n	8005002 <_free_r+0x42>
 800500c:	6811      	ldr	r1, [r2, #0]
 800500e:	1850      	adds	r0, r2, r1
 8005010:	42a0      	cmp	r0, r4
 8005012:	d10b      	bne.n	800502c <_free_r+0x6c>
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	4401      	add	r1, r0
 8005018:	1850      	adds	r0, r2, r1
 800501a:	4283      	cmp	r3, r0
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	d1e0      	bne.n	8004fe2 <_free_r+0x22>
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	6053      	str	r3, [r2, #4]
 8005026:	4408      	add	r0, r1
 8005028:	6010      	str	r0, [r2, #0]
 800502a:	e7da      	b.n	8004fe2 <_free_r+0x22>
 800502c:	d902      	bls.n	8005034 <_free_r+0x74>
 800502e:	230c      	movs	r3, #12
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	e7d6      	b.n	8004fe2 <_free_r+0x22>
 8005034:	6820      	ldr	r0, [r4, #0]
 8005036:	1821      	adds	r1, r4, r0
 8005038:	428b      	cmp	r3, r1
 800503a:	bf04      	itt	eq
 800503c:	6819      	ldreq	r1, [r3, #0]
 800503e:	685b      	ldreq	r3, [r3, #4]
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	bf04      	itt	eq
 8005044:	1809      	addeq	r1, r1, r0
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	6054      	str	r4, [r2, #4]
 800504a:	e7ca      	b.n	8004fe2 <_free_r+0x22>
 800504c:	bd38      	pop	{r3, r4, r5, pc}
 800504e:	bf00      	nop
 8005050:	200004e8 	.word	0x200004e8

08005054 <malloc>:
 8005054:	4b02      	ldr	r3, [pc, #8]	@ (8005060 <malloc+0xc>)
 8005056:	4601      	mov	r1, r0
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	f000 b825 	b.w	80050a8 <_malloc_r>
 800505e:	bf00      	nop
 8005060:	200000b4 	.word	0x200000b4

08005064 <sbrk_aligned>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0f      	ldr	r6, [pc, #60]	@ (80050a4 <sbrk_aligned+0x40>)
 8005068:	460c      	mov	r4, r1
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	4605      	mov	r5, r0
 800506e:	b911      	cbnz	r1, 8005076 <sbrk_aligned+0x12>
 8005070:	f000 fea4 	bl	8005dbc <_sbrk_r>
 8005074:	6030      	str	r0, [r6, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fe9f 	bl	8005dbc <_sbrk_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d103      	bne.n	800508a <sbrk_aligned+0x26>
 8005082:	f04f 34ff 	mov.w	r4, #4294967295
 8005086:	4620      	mov	r0, r4
 8005088:	bd70      	pop	{r4, r5, r6, pc}
 800508a:	1cc4      	adds	r4, r0, #3
 800508c:	f024 0403 	bic.w	r4, r4, #3
 8005090:	42a0      	cmp	r0, r4
 8005092:	d0f8      	beq.n	8005086 <sbrk_aligned+0x22>
 8005094:	1a21      	subs	r1, r4, r0
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fe90 	bl	8005dbc <_sbrk_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d1f2      	bne.n	8005086 <sbrk_aligned+0x22>
 80050a0:	e7ef      	b.n	8005082 <sbrk_aligned+0x1e>
 80050a2:	bf00      	nop
 80050a4:	200004e4 	.word	0x200004e4

080050a8 <_malloc_r>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	1ccd      	adds	r5, r1, #3
 80050ae:	f025 0503 	bic.w	r5, r5, #3
 80050b2:	3508      	adds	r5, #8
 80050b4:	2d0c      	cmp	r5, #12
 80050b6:	bf38      	it	cc
 80050b8:	250c      	movcc	r5, #12
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	4606      	mov	r6, r0
 80050be:	db01      	blt.n	80050c4 <_malloc_r+0x1c>
 80050c0:	42a9      	cmp	r1, r5
 80050c2:	d904      	bls.n	80050ce <_malloc_r+0x26>
 80050c4:	230c      	movs	r3, #12
 80050c6:	6033      	str	r3, [r6, #0]
 80050c8:	2000      	movs	r0, #0
 80050ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051a4 <_malloc_r+0xfc>
 80050d2:	f000 f869 	bl	80051a8 <__malloc_lock>
 80050d6:	f8d8 3000 	ldr.w	r3, [r8]
 80050da:	461c      	mov	r4, r3
 80050dc:	bb44      	cbnz	r4, 8005130 <_malloc_r+0x88>
 80050de:	4629      	mov	r1, r5
 80050e0:	4630      	mov	r0, r6
 80050e2:	f7ff ffbf 	bl	8005064 <sbrk_aligned>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	4604      	mov	r4, r0
 80050ea:	d158      	bne.n	800519e <_malloc_r+0xf6>
 80050ec:	f8d8 4000 	ldr.w	r4, [r8]
 80050f0:	4627      	mov	r7, r4
 80050f2:	2f00      	cmp	r7, #0
 80050f4:	d143      	bne.n	800517e <_malloc_r+0xd6>
 80050f6:	2c00      	cmp	r4, #0
 80050f8:	d04b      	beq.n	8005192 <_malloc_r+0xea>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	4639      	mov	r1, r7
 80050fe:	4630      	mov	r0, r6
 8005100:	eb04 0903 	add.w	r9, r4, r3
 8005104:	f000 fe5a 	bl	8005dbc <_sbrk_r>
 8005108:	4581      	cmp	r9, r0
 800510a:	d142      	bne.n	8005192 <_malloc_r+0xea>
 800510c:	6821      	ldr	r1, [r4, #0]
 800510e:	1a6d      	subs	r5, r5, r1
 8005110:	4629      	mov	r1, r5
 8005112:	4630      	mov	r0, r6
 8005114:	f7ff ffa6 	bl	8005064 <sbrk_aligned>
 8005118:	3001      	adds	r0, #1
 800511a:	d03a      	beq.n	8005192 <_malloc_r+0xea>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	442b      	add	r3, r5
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	f8d8 3000 	ldr.w	r3, [r8]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	bb62      	cbnz	r2, 8005184 <_malloc_r+0xdc>
 800512a:	f8c8 7000 	str.w	r7, [r8]
 800512e:	e00f      	b.n	8005150 <_malloc_r+0xa8>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	1b52      	subs	r2, r2, r5
 8005134:	d420      	bmi.n	8005178 <_malloc_r+0xd0>
 8005136:	2a0b      	cmp	r2, #11
 8005138:	d917      	bls.n	800516a <_malloc_r+0xc2>
 800513a:	1961      	adds	r1, r4, r5
 800513c:	42a3      	cmp	r3, r4
 800513e:	6025      	str	r5, [r4, #0]
 8005140:	bf18      	it	ne
 8005142:	6059      	strne	r1, [r3, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	bf08      	it	eq
 8005148:	f8c8 1000 	streq.w	r1, [r8]
 800514c:	5162      	str	r2, [r4, r5]
 800514e:	604b      	str	r3, [r1, #4]
 8005150:	4630      	mov	r0, r6
 8005152:	f000 f82f 	bl	80051b4 <__malloc_unlock>
 8005156:	f104 000b 	add.w	r0, r4, #11
 800515a:	1d23      	adds	r3, r4, #4
 800515c:	f020 0007 	bic.w	r0, r0, #7
 8005160:	1ac2      	subs	r2, r0, r3
 8005162:	bf1c      	itt	ne
 8005164:	1a1b      	subne	r3, r3, r0
 8005166:	50a3      	strne	r3, [r4, r2]
 8005168:	e7af      	b.n	80050ca <_malloc_r+0x22>
 800516a:	6862      	ldr	r2, [r4, #4]
 800516c:	42a3      	cmp	r3, r4
 800516e:	bf0c      	ite	eq
 8005170:	f8c8 2000 	streq.w	r2, [r8]
 8005174:	605a      	strne	r2, [r3, #4]
 8005176:	e7eb      	b.n	8005150 <_malloc_r+0xa8>
 8005178:	4623      	mov	r3, r4
 800517a:	6864      	ldr	r4, [r4, #4]
 800517c:	e7ae      	b.n	80050dc <_malloc_r+0x34>
 800517e:	463c      	mov	r4, r7
 8005180:	687f      	ldr	r7, [r7, #4]
 8005182:	e7b6      	b.n	80050f2 <_malloc_r+0x4a>
 8005184:	461a      	mov	r2, r3
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	42a3      	cmp	r3, r4
 800518a:	d1fb      	bne.n	8005184 <_malloc_r+0xdc>
 800518c:	2300      	movs	r3, #0
 800518e:	6053      	str	r3, [r2, #4]
 8005190:	e7de      	b.n	8005150 <_malloc_r+0xa8>
 8005192:	230c      	movs	r3, #12
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	4630      	mov	r0, r6
 8005198:	f000 f80c 	bl	80051b4 <__malloc_unlock>
 800519c:	e794      	b.n	80050c8 <_malloc_r+0x20>
 800519e:	6005      	str	r5, [r0, #0]
 80051a0:	e7d6      	b.n	8005150 <_malloc_r+0xa8>
 80051a2:	bf00      	nop
 80051a4:	200004e8 	.word	0x200004e8

080051a8 <__malloc_lock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	@ (80051b0 <__malloc_lock+0x8>)
 80051aa:	f7ff b880 	b.w	80042ae <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	200004e0 	.word	0x200004e0

080051b4 <__malloc_unlock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	@ (80051bc <__malloc_unlock+0x8>)
 80051b6:	f7ff b87b 	b.w	80042b0 <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	200004e0 	.word	0x200004e0

080051c0 <_Balloc>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	69c6      	ldr	r6, [r0, #28]
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	b976      	cbnz	r6, 80051e8 <_Balloc+0x28>
 80051ca:	2010      	movs	r0, #16
 80051cc:	f7ff ff42 	bl	8005054 <malloc>
 80051d0:	4602      	mov	r2, r0
 80051d2:	61e0      	str	r0, [r4, #28]
 80051d4:	b920      	cbnz	r0, 80051e0 <_Balloc+0x20>
 80051d6:	4b18      	ldr	r3, [pc, #96]	@ (8005238 <_Balloc+0x78>)
 80051d8:	4818      	ldr	r0, [pc, #96]	@ (800523c <_Balloc+0x7c>)
 80051da:	216b      	movs	r1, #107	@ 0x6b
 80051dc:	f7ff f878 	bl	80042d0 <__assert_func>
 80051e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051e4:	6006      	str	r6, [r0, #0]
 80051e6:	60c6      	str	r6, [r0, #12]
 80051e8:	69e6      	ldr	r6, [r4, #28]
 80051ea:	68f3      	ldr	r3, [r6, #12]
 80051ec:	b183      	cbz	r3, 8005210 <_Balloc+0x50>
 80051ee:	69e3      	ldr	r3, [r4, #28]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051f6:	b9b8      	cbnz	r0, 8005228 <_Balloc+0x68>
 80051f8:	2101      	movs	r1, #1
 80051fa:	fa01 f605 	lsl.w	r6, r1, r5
 80051fe:	1d72      	adds	r2, r6, #5
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fdf1 	bl	8005dea <_calloc_r>
 8005208:	b160      	cbz	r0, 8005224 <_Balloc+0x64>
 800520a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800520e:	e00e      	b.n	800522e <_Balloc+0x6e>
 8005210:	2221      	movs	r2, #33	@ 0x21
 8005212:	2104      	movs	r1, #4
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fde8 	bl	8005dea <_calloc_r>
 800521a:	69e3      	ldr	r3, [r4, #28]
 800521c:	60f0      	str	r0, [r6, #12]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e4      	bne.n	80051ee <_Balloc+0x2e>
 8005224:	2000      	movs	r0, #0
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	6802      	ldr	r2, [r0, #0]
 800522a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800522e:	2300      	movs	r3, #0
 8005230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005234:	e7f7      	b.n	8005226 <_Balloc+0x66>
 8005236:	bf00      	nop
 8005238:	08005fdd 	.word	0x08005fdd
 800523c:	0800605d 	.word	0x0800605d

08005240 <_Bfree>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	69c6      	ldr	r6, [r0, #28]
 8005244:	4605      	mov	r5, r0
 8005246:	460c      	mov	r4, r1
 8005248:	b976      	cbnz	r6, 8005268 <_Bfree+0x28>
 800524a:	2010      	movs	r0, #16
 800524c:	f7ff ff02 	bl	8005054 <malloc>
 8005250:	4602      	mov	r2, r0
 8005252:	61e8      	str	r0, [r5, #28]
 8005254:	b920      	cbnz	r0, 8005260 <_Bfree+0x20>
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <_Bfree+0x3c>)
 8005258:	4809      	ldr	r0, [pc, #36]	@ (8005280 <_Bfree+0x40>)
 800525a:	218f      	movs	r1, #143	@ 0x8f
 800525c:	f7ff f838 	bl	80042d0 <__assert_func>
 8005260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005264:	6006      	str	r6, [r0, #0]
 8005266:	60c6      	str	r6, [r0, #12]
 8005268:	b13c      	cbz	r4, 800527a <_Bfree+0x3a>
 800526a:	69eb      	ldr	r3, [r5, #28]
 800526c:	6862      	ldr	r2, [r4, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005274:	6021      	str	r1, [r4, #0]
 8005276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	08005fdd 	.word	0x08005fdd
 8005280:	0800605d 	.word	0x0800605d

08005284 <__multadd>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	690d      	ldr	r5, [r1, #16]
 800528a:	4607      	mov	r7, r0
 800528c:	460c      	mov	r4, r1
 800528e:	461e      	mov	r6, r3
 8005290:	f101 0c14 	add.w	ip, r1, #20
 8005294:	2000      	movs	r0, #0
 8005296:	f8dc 3000 	ldr.w	r3, [ip]
 800529a:	b299      	uxth	r1, r3
 800529c:	fb02 6101 	mla	r1, r2, r1, r6
 80052a0:	0c1e      	lsrs	r6, r3, #16
 80052a2:	0c0b      	lsrs	r3, r1, #16
 80052a4:	fb02 3306 	mla	r3, r2, r6, r3
 80052a8:	b289      	uxth	r1, r1
 80052aa:	3001      	adds	r0, #1
 80052ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052b0:	4285      	cmp	r5, r0
 80052b2:	f84c 1b04 	str.w	r1, [ip], #4
 80052b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80052ba:	dcec      	bgt.n	8005296 <__multadd+0x12>
 80052bc:	b30e      	cbz	r6, 8005302 <__multadd+0x7e>
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dc19      	bgt.n	80052f8 <__multadd+0x74>
 80052c4:	6861      	ldr	r1, [r4, #4]
 80052c6:	4638      	mov	r0, r7
 80052c8:	3101      	adds	r1, #1
 80052ca:	f7ff ff79 	bl	80051c0 <_Balloc>
 80052ce:	4680      	mov	r8, r0
 80052d0:	b928      	cbnz	r0, 80052de <__multadd+0x5a>
 80052d2:	4602      	mov	r2, r0
 80052d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <__multadd+0x84>)
 80052d6:	480d      	ldr	r0, [pc, #52]	@ (800530c <__multadd+0x88>)
 80052d8:	21ba      	movs	r1, #186	@ 0xba
 80052da:	f7fe fff9 	bl	80042d0 <__assert_func>
 80052de:	6922      	ldr	r2, [r4, #16]
 80052e0:	3202      	adds	r2, #2
 80052e2:	f104 010c 	add.w	r1, r4, #12
 80052e6:	0092      	lsls	r2, r2, #2
 80052e8:	300c      	adds	r0, #12
 80052ea:	f7fe ffe2 	bl	80042b2 <memcpy>
 80052ee:	4621      	mov	r1, r4
 80052f0:	4638      	mov	r0, r7
 80052f2:	f7ff ffa5 	bl	8005240 <_Bfree>
 80052f6:	4644      	mov	r4, r8
 80052f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052fc:	3501      	adds	r5, #1
 80052fe:	615e      	str	r6, [r3, #20]
 8005300:	6125      	str	r5, [r4, #16]
 8005302:	4620      	mov	r0, r4
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	0800604c 	.word	0x0800604c
 800530c:	0800605d 	.word	0x0800605d

08005310 <__hi0bits>:
 8005310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005314:	4603      	mov	r3, r0
 8005316:	bf36      	itet	cc
 8005318:	0403      	lslcc	r3, r0, #16
 800531a:	2000      	movcs	r0, #0
 800531c:	2010      	movcc	r0, #16
 800531e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005322:	bf3c      	itt	cc
 8005324:	021b      	lslcc	r3, r3, #8
 8005326:	3008      	addcc	r0, #8
 8005328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800532c:	bf3c      	itt	cc
 800532e:	011b      	lslcc	r3, r3, #4
 8005330:	3004      	addcc	r0, #4
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	bf3c      	itt	cc
 8005338:	009b      	lslcc	r3, r3, #2
 800533a:	3002      	addcc	r0, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	db05      	blt.n	800534c <__hi0bits+0x3c>
 8005340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005344:	f100 0001 	add.w	r0, r0, #1
 8005348:	bf08      	it	eq
 800534a:	2020      	moveq	r0, #32
 800534c:	4770      	bx	lr

0800534e <__lo0bits>:
 800534e:	6803      	ldr	r3, [r0, #0]
 8005350:	4602      	mov	r2, r0
 8005352:	f013 0007 	ands.w	r0, r3, #7
 8005356:	d00b      	beq.n	8005370 <__lo0bits+0x22>
 8005358:	07d9      	lsls	r1, r3, #31
 800535a:	d421      	bmi.n	80053a0 <__lo0bits+0x52>
 800535c:	0798      	lsls	r0, r3, #30
 800535e:	bf49      	itett	mi
 8005360:	085b      	lsrmi	r3, r3, #1
 8005362:	089b      	lsrpl	r3, r3, #2
 8005364:	2001      	movmi	r0, #1
 8005366:	6013      	strmi	r3, [r2, #0]
 8005368:	bf5c      	itt	pl
 800536a:	6013      	strpl	r3, [r2, #0]
 800536c:	2002      	movpl	r0, #2
 800536e:	4770      	bx	lr
 8005370:	b299      	uxth	r1, r3
 8005372:	b909      	cbnz	r1, 8005378 <__lo0bits+0x2a>
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	2010      	movs	r0, #16
 8005378:	b2d9      	uxtb	r1, r3
 800537a:	b909      	cbnz	r1, 8005380 <__lo0bits+0x32>
 800537c:	3008      	adds	r0, #8
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	0719      	lsls	r1, r3, #28
 8005382:	bf04      	itt	eq
 8005384:	091b      	lsreq	r3, r3, #4
 8005386:	3004      	addeq	r0, #4
 8005388:	0799      	lsls	r1, r3, #30
 800538a:	bf04      	itt	eq
 800538c:	089b      	lsreq	r3, r3, #2
 800538e:	3002      	addeq	r0, #2
 8005390:	07d9      	lsls	r1, r3, #31
 8005392:	d403      	bmi.n	800539c <__lo0bits+0x4e>
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	f100 0001 	add.w	r0, r0, #1
 800539a:	d003      	beq.n	80053a4 <__lo0bits+0x56>
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	4770      	bx	lr
 80053a0:	2000      	movs	r0, #0
 80053a2:	4770      	bx	lr
 80053a4:	2020      	movs	r0, #32
 80053a6:	4770      	bx	lr

080053a8 <__i2b>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	460c      	mov	r4, r1
 80053ac:	2101      	movs	r1, #1
 80053ae:	f7ff ff07 	bl	80051c0 <_Balloc>
 80053b2:	4602      	mov	r2, r0
 80053b4:	b928      	cbnz	r0, 80053c2 <__i2b+0x1a>
 80053b6:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <__i2b+0x24>)
 80053b8:	4805      	ldr	r0, [pc, #20]	@ (80053d0 <__i2b+0x28>)
 80053ba:	f240 1145 	movw	r1, #325	@ 0x145
 80053be:	f7fe ff87 	bl	80042d0 <__assert_func>
 80053c2:	2301      	movs	r3, #1
 80053c4:	6144      	str	r4, [r0, #20]
 80053c6:	6103      	str	r3, [r0, #16]
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	0800604c 	.word	0x0800604c
 80053d0:	0800605d 	.word	0x0800605d

080053d4 <__multiply>:
 80053d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d8:	4617      	mov	r7, r2
 80053da:	690a      	ldr	r2, [r1, #16]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	bfa8      	it	ge
 80053e2:	463b      	movge	r3, r7
 80053e4:	4689      	mov	r9, r1
 80053e6:	bfa4      	itt	ge
 80053e8:	460f      	movge	r7, r1
 80053ea:	4699      	movge	r9, r3
 80053ec:	693d      	ldr	r5, [r7, #16]
 80053ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6879      	ldr	r1, [r7, #4]
 80053f6:	eb05 060a 	add.w	r6, r5, sl
 80053fa:	42b3      	cmp	r3, r6
 80053fc:	b085      	sub	sp, #20
 80053fe:	bfb8      	it	lt
 8005400:	3101      	addlt	r1, #1
 8005402:	f7ff fedd 	bl	80051c0 <_Balloc>
 8005406:	b930      	cbnz	r0, 8005416 <__multiply+0x42>
 8005408:	4602      	mov	r2, r0
 800540a:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <__multiply+0x13c>)
 800540c:	4841      	ldr	r0, [pc, #260]	@ (8005514 <__multiply+0x140>)
 800540e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005412:	f7fe ff5d 	bl	80042d0 <__assert_func>
 8005416:	f100 0414 	add.w	r4, r0, #20
 800541a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800541e:	4623      	mov	r3, r4
 8005420:	2200      	movs	r2, #0
 8005422:	4573      	cmp	r3, lr
 8005424:	d320      	bcc.n	8005468 <__multiply+0x94>
 8005426:	f107 0814 	add.w	r8, r7, #20
 800542a:	f109 0114 	add.w	r1, r9, #20
 800542e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005432:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005436:	9302      	str	r3, [sp, #8]
 8005438:	1beb      	subs	r3, r5, r7
 800543a:	3b15      	subs	r3, #21
 800543c:	f023 0303 	bic.w	r3, r3, #3
 8005440:	3304      	adds	r3, #4
 8005442:	3715      	adds	r7, #21
 8005444:	42bd      	cmp	r5, r7
 8005446:	bf38      	it	cc
 8005448:	2304      	movcc	r3, #4
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	9b02      	ldr	r3, [sp, #8]
 800544e:	9103      	str	r1, [sp, #12]
 8005450:	428b      	cmp	r3, r1
 8005452:	d80c      	bhi.n	800546e <__multiply+0x9a>
 8005454:	2e00      	cmp	r6, #0
 8005456:	dd03      	ble.n	8005460 <__multiply+0x8c>
 8005458:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800545c:	2b00      	cmp	r3, #0
 800545e:	d055      	beq.n	800550c <__multiply+0x138>
 8005460:	6106      	str	r6, [r0, #16]
 8005462:	b005      	add	sp, #20
 8005464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005468:	f843 2b04 	str.w	r2, [r3], #4
 800546c:	e7d9      	b.n	8005422 <__multiply+0x4e>
 800546e:	f8b1 a000 	ldrh.w	sl, [r1]
 8005472:	f1ba 0f00 	cmp.w	sl, #0
 8005476:	d01f      	beq.n	80054b8 <__multiply+0xe4>
 8005478:	46c4      	mov	ip, r8
 800547a:	46a1      	mov	r9, r4
 800547c:	2700      	movs	r7, #0
 800547e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005482:	f8d9 3000 	ldr.w	r3, [r9]
 8005486:	fa1f fb82 	uxth.w	fp, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005490:	443b      	add	r3, r7
 8005492:	f8d9 7000 	ldr.w	r7, [r9]
 8005496:	0c12      	lsrs	r2, r2, #16
 8005498:	0c3f      	lsrs	r7, r7, #16
 800549a:	fb0a 7202 	mla	r2, sl, r2, r7
 800549e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054a8:	4565      	cmp	r5, ip
 80054aa:	f849 3b04 	str.w	r3, [r9], #4
 80054ae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80054b2:	d8e4      	bhi.n	800547e <__multiply+0xaa>
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	50e7      	str	r7, [r4, r3]
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80054be:	3104      	adds	r1, #4
 80054c0:	f1b9 0f00 	cmp.w	r9, #0
 80054c4:	d020      	beq.n	8005508 <__multiply+0x134>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	4647      	mov	r7, r8
 80054ca:	46a4      	mov	ip, r4
 80054cc:	f04f 0a00 	mov.w	sl, #0
 80054d0:	f8b7 b000 	ldrh.w	fp, [r7]
 80054d4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80054d8:	fb09 220b 	mla	r2, r9, fp, r2
 80054dc:	4452      	add	r2, sl
 80054de:	b29b      	uxth	r3, r3
 80054e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054e4:	f84c 3b04 	str.w	r3, [ip], #4
 80054e8:	f857 3b04 	ldr.w	r3, [r7], #4
 80054ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054f0:	f8bc 3000 	ldrh.w	r3, [ip]
 80054f4:	fb09 330a 	mla	r3, r9, sl, r3
 80054f8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80054fc:	42bd      	cmp	r5, r7
 80054fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005502:	d8e5      	bhi.n	80054d0 <__multiply+0xfc>
 8005504:	9a01      	ldr	r2, [sp, #4]
 8005506:	50a3      	str	r3, [r4, r2]
 8005508:	3404      	adds	r4, #4
 800550a:	e79f      	b.n	800544c <__multiply+0x78>
 800550c:	3e01      	subs	r6, #1
 800550e:	e7a1      	b.n	8005454 <__multiply+0x80>
 8005510:	0800604c 	.word	0x0800604c
 8005514:	0800605d 	.word	0x0800605d

08005518 <__pow5mult>:
 8005518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800551c:	4615      	mov	r5, r2
 800551e:	f012 0203 	ands.w	r2, r2, #3
 8005522:	4607      	mov	r7, r0
 8005524:	460e      	mov	r6, r1
 8005526:	d007      	beq.n	8005538 <__pow5mult+0x20>
 8005528:	4c25      	ldr	r4, [pc, #148]	@ (80055c0 <__pow5mult+0xa8>)
 800552a:	3a01      	subs	r2, #1
 800552c:	2300      	movs	r3, #0
 800552e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005532:	f7ff fea7 	bl	8005284 <__multadd>
 8005536:	4606      	mov	r6, r0
 8005538:	10ad      	asrs	r5, r5, #2
 800553a:	d03d      	beq.n	80055b8 <__pow5mult+0xa0>
 800553c:	69fc      	ldr	r4, [r7, #28]
 800553e:	b97c      	cbnz	r4, 8005560 <__pow5mult+0x48>
 8005540:	2010      	movs	r0, #16
 8005542:	f7ff fd87 	bl	8005054 <malloc>
 8005546:	4602      	mov	r2, r0
 8005548:	61f8      	str	r0, [r7, #28]
 800554a:	b928      	cbnz	r0, 8005558 <__pow5mult+0x40>
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <__pow5mult+0xac>)
 800554e:	481e      	ldr	r0, [pc, #120]	@ (80055c8 <__pow5mult+0xb0>)
 8005550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005554:	f7fe febc 	bl	80042d0 <__assert_func>
 8005558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800555c:	6004      	str	r4, [r0, #0]
 800555e:	60c4      	str	r4, [r0, #12]
 8005560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005568:	b94c      	cbnz	r4, 800557e <__pow5mult+0x66>
 800556a:	f240 2171 	movw	r1, #625	@ 0x271
 800556e:	4638      	mov	r0, r7
 8005570:	f7ff ff1a 	bl	80053a8 <__i2b>
 8005574:	2300      	movs	r3, #0
 8005576:	f8c8 0008 	str.w	r0, [r8, #8]
 800557a:	4604      	mov	r4, r0
 800557c:	6003      	str	r3, [r0, #0]
 800557e:	f04f 0900 	mov.w	r9, #0
 8005582:	07eb      	lsls	r3, r5, #31
 8005584:	d50a      	bpl.n	800559c <__pow5mult+0x84>
 8005586:	4631      	mov	r1, r6
 8005588:	4622      	mov	r2, r4
 800558a:	4638      	mov	r0, r7
 800558c:	f7ff ff22 	bl	80053d4 <__multiply>
 8005590:	4631      	mov	r1, r6
 8005592:	4680      	mov	r8, r0
 8005594:	4638      	mov	r0, r7
 8005596:	f7ff fe53 	bl	8005240 <_Bfree>
 800559a:	4646      	mov	r6, r8
 800559c:	106d      	asrs	r5, r5, #1
 800559e:	d00b      	beq.n	80055b8 <__pow5mult+0xa0>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	b938      	cbnz	r0, 80055b4 <__pow5mult+0x9c>
 80055a4:	4622      	mov	r2, r4
 80055a6:	4621      	mov	r1, r4
 80055a8:	4638      	mov	r0, r7
 80055aa:	f7ff ff13 	bl	80053d4 <__multiply>
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	f8c0 9000 	str.w	r9, [r0]
 80055b4:	4604      	mov	r4, r0
 80055b6:	e7e4      	b.n	8005582 <__pow5mult+0x6a>
 80055b8:	4630      	mov	r0, r6
 80055ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055be:	bf00      	nop
 80055c0:	080060d4 	.word	0x080060d4
 80055c4:	08005fdd 	.word	0x08005fdd
 80055c8:	0800605d 	.word	0x0800605d

080055cc <__lshift>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	460c      	mov	r4, r1
 80055d2:	6849      	ldr	r1, [r1, #4]
 80055d4:	6923      	ldr	r3, [r4, #16]
 80055d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055da:	68a3      	ldr	r3, [r4, #8]
 80055dc:	4607      	mov	r7, r0
 80055de:	4691      	mov	r9, r2
 80055e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055e4:	f108 0601 	add.w	r6, r8, #1
 80055e8:	42b3      	cmp	r3, r6
 80055ea:	db0b      	blt.n	8005604 <__lshift+0x38>
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7ff fde7 	bl	80051c0 <_Balloc>
 80055f2:	4605      	mov	r5, r0
 80055f4:	b948      	cbnz	r0, 800560a <__lshift+0x3e>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b28      	ldr	r3, [pc, #160]	@ (800569c <__lshift+0xd0>)
 80055fa:	4829      	ldr	r0, [pc, #164]	@ (80056a0 <__lshift+0xd4>)
 80055fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005600:	f7fe fe66 	bl	80042d0 <__assert_func>
 8005604:	3101      	adds	r1, #1
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	e7ee      	b.n	80055e8 <__lshift+0x1c>
 800560a:	2300      	movs	r3, #0
 800560c:	f100 0114 	add.w	r1, r0, #20
 8005610:	f100 0210 	add.w	r2, r0, #16
 8005614:	4618      	mov	r0, r3
 8005616:	4553      	cmp	r3, sl
 8005618:	db33      	blt.n	8005682 <__lshift+0xb6>
 800561a:	6920      	ldr	r0, [r4, #16]
 800561c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005620:	f104 0314 	add.w	r3, r4, #20
 8005624:	f019 091f 	ands.w	r9, r9, #31
 8005628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800562c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005630:	d02b      	beq.n	800568a <__lshift+0xbe>
 8005632:	f1c9 0e20 	rsb	lr, r9, #32
 8005636:	468a      	mov	sl, r1
 8005638:	2200      	movs	r2, #0
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	fa00 f009 	lsl.w	r0, r0, r9
 8005640:	4310      	orrs	r0, r2
 8005642:	f84a 0b04 	str.w	r0, [sl], #4
 8005646:	f853 2b04 	ldr.w	r2, [r3], #4
 800564a:	459c      	cmp	ip, r3
 800564c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005650:	d8f3      	bhi.n	800563a <__lshift+0x6e>
 8005652:	ebac 0304 	sub.w	r3, ip, r4
 8005656:	3b15      	subs	r3, #21
 8005658:	f023 0303 	bic.w	r3, r3, #3
 800565c:	3304      	adds	r3, #4
 800565e:	f104 0015 	add.w	r0, r4, #21
 8005662:	4560      	cmp	r0, ip
 8005664:	bf88      	it	hi
 8005666:	2304      	movhi	r3, #4
 8005668:	50ca      	str	r2, [r1, r3]
 800566a:	b10a      	cbz	r2, 8005670 <__lshift+0xa4>
 800566c:	f108 0602 	add.w	r6, r8, #2
 8005670:	3e01      	subs	r6, #1
 8005672:	4638      	mov	r0, r7
 8005674:	612e      	str	r6, [r5, #16]
 8005676:	4621      	mov	r1, r4
 8005678:	f7ff fde2 	bl	8005240 <_Bfree>
 800567c:	4628      	mov	r0, r5
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	f842 0f04 	str.w	r0, [r2, #4]!
 8005686:	3301      	adds	r3, #1
 8005688:	e7c5      	b.n	8005616 <__lshift+0x4a>
 800568a:	3904      	subs	r1, #4
 800568c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005690:	f841 2f04 	str.w	r2, [r1, #4]!
 8005694:	459c      	cmp	ip, r3
 8005696:	d8f9      	bhi.n	800568c <__lshift+0xc0>
 8005698:	e7ea      	b.n	8005670 <__lshift+0xa4>
 800569a:	bf00      	nop
 800569c:	0800604c 	.word	0x0800604c
 80056a0:	0800605d 	.word	0x0800605d

080056a4 <__mcmp>:
 80056a4:	690a      	ldr	r2, [r1, #16]
 80056a6:	4603      	mov	r3, r0
 80056a8:	6900      	ldr	r0, [r0, #16]
 80056aa:	1a80      	subs	r0, r0, r2
 80056ac:	b530      	push	{r4, r5, lr}
 80056ae:	d10e      	bne.n	80056ce <__mcmp+0x2a>
 80056b0:	3314      	adds	r3, #20
 80056b2:	3114      	adds	r1, #20
 80056b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80056b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80056bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80056c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80056c4:	4295      	cmp	r5, r2
 80056c6:	d003      	beq.n	80056d0 <__mcmp+0x2c>
 80056c8:	d205      	bcs.n	80056d6 <__mcmp+0x32>
 80056ca:	f04f 30ff 	mov.w	r0, #4294967295
 80056ce:	bd30      	pop	{r4, r5, pc}
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d3f3      	bcc.n	80056bc <__mcmp+0x18>
 80056d4:	e7fb      	b.n	80056ce <__mcmp+0x2a>
 80056d6:	2001      	movs	r0, #1
 80056d8:	e7f9      	b.n	80056ce <__mcmp+0x2a>
	...

080056dc <__mdiff>:
 80056dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	4689      	mov	r9, r1
 80056e2:	4606      	mov	r6, r0
 80056e4:	4611      	mov	r1, r2
 80056e6:	4648      	mov	r0, r9
 80056e8:	4614      	mov	r4, r2
 80056ea:	f7ff ffdb 	bl	80056a4 <__mcmp>
 80056ee:	1e05      	subs	r5, r0, #0
 80056f0:	d112      	bne.n	8005718 <__mdiff+0x3c>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	f7ff fd63 	bl	80051c0 <_Balloc>
 80056fa:	4602      	mov	r2, r0
 80056fc:	b928      	cbnz	r0, 800570a <__mdiff+0x2e>
 80056fe:	4b3f      	ldr	r3, [pc, #252]	@ (80057fc <__mdiff+0x120>)
 8005700:	f240 2137 	movw	r1, #567	@ 0x237
 8005704:	483e      	ldr	r0, [pc, #248]	@ (8005800 <__mdiff+0x124>)
 8005706:	f7fe fde3 	bl	80042d0 <__assert_func>
 800570a:	2301      	movs	r3, #1
 800570c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005710:	4610      	mov	r0, r2
 8005712:	b003      	add	sp, #12
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	bfbc      	itt	lt
 800571a:	464b      	movlt	r3, r9
 800571c:	46a1      	movlt	r9, r4
 800571e:	4630      	mov	r0, r6
 8005720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005724:	bfba      	itte	lt
 8005726:	461c      	movlt	r4, r3
 8005728:	2501      	movlt	r5, #1
 800572a:	2500      	movge	r5, #0
 800572c:	f7ff fd48 	bl	80051c0 <_Balloc>
 8005730:	4602      	mov	r2, r0
 8005732:	b918      	cbnz	r0, 800573c <__mdiff+0x60>
 8005734:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <__mdiff+0x120>)
 8005736:	f240 2145 	movw	r1, #581	@ 0x245
 800573a:	e7e3      	b.n	8005704 <__mdiff+0x28>
 800573c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005740:	6926      	ldr	r6, [r4, #16]
 8005742:	60c5      	str	r5, [r0, #12]
 8005744:	f109 0310 	add.w	r3, r9, #16
 8005748:	f109 0514 	add.w	r5, r9, #20
 800574c:	f104 0e14 	add.w	lr, r4, #20
 8005750:	f100 0b14 	add.w	fp, r0, #20
 8005754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	46d9      	mov	r9, fp
 8005760:	f04f 0c00 	mov.w	ip, #0
 8005764:	9b01      	ldr	r3, [sp, #4]
 8005766:	f85e 0b04 	ldr.w	r0, [lr], #4
 800576a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	fa1f f38a 	uxth.w	r3, sl
 8005774:	4619      	mov	r1, r3
 8005776:	b283      	uxth	r3, r0
 8005778:	1acb      	subs	r3, r1, r3
 800577a:	0c00      	lsrs	r0, r0, #16
 800577c:	4463      	add	r3, ip
 800577e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800578c:	4576      	cmp	r6, lr
 800578e:	f849 3b04 	str.w	r3, [r9], #4
 8005792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005796:	d8e5      	bhi.n	8005764 <__mdiff+0x88>
 8005798:	1b33      	subs	r3, r6, r4
 800579a:	3b15      	subs	r3, #21
 800579c:	f023 0303 	bic.w	r3, r3, #3
 80057a0:	3415      	adds	r4, #21
 80057a2:	3304      	adds	r3, #4
 80057a4:	42a6      	cmp	r6, r4
 80057a6:	bf38      	it	cc
 80057a8:	2304      	movcc	r3, #4
 80057aa:	441d      	add	r5, r3
 80057ac:	445b      	add	r3, fp
 80057ae:	461e      	mov	r6, r3
 80057b0:	462c      	mov	r4, r5
 80057b2:	4544      	cmp	r4, r8
 80057b4:	d30e      	bcc.n	80057d4 <__mdiff+0xf8>
 80057b6:	f108 0103 	add.w	r1, r8, #3
 80057ba:	1b49      	subs	r1, r1, r5
 80057bc:	f021 0103 	bic.w	r1, r1, #3
 80057c0:	3d03      	subs	r5, #3
 80057c2:	45a8      	cmp	r8, r5
 80057c4:	bf38      	it	cc
 80057c6:	2100      	movcc	r1, #0
 80057c8:	440b      	add	r3, r1
 80057ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80057ce:	b191      	cbz	r1, 80057f6 <__mdiff+0x11a>
 80057d0:	6117      	str	r7, [r2, #16]
 80057d2:	e79d      	b.n	8005710 <__mdiff+0x34>
 80057d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80057d8:	46e6      	mov	lr, ip
 80057da:	0c08      	lsrs	r0, r1, #16
 80057dc:	fa1c fc81 	uxtah	ip, ip, r1
 80057e0:	4471      	add	r1, lr
 80057e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80057e6:	b289      	uxth	r1, r1
 80057e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80057ec:	f846 1b04 	str.w	r1, [r6], #4
 80057f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057f4:	e7dd      	b.n	80057b2 <__mdiff+0xd6>
 80057f6:	3f01      	subs	r7, #1
 80057f8:	e7e7      	b.n	80057ca <__mdiff+0xee>
 80057fa:	bf00      	nop
 80057fc:	0800604c 	.word	0x0800604c
 8005800:	0800605d 	.word	0x0800605d

08005804 <__d2b>:
 8005804:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005808:	460f      	mov	r7, r1
 800580a:	2101      	movs	r1, #1
 800580c:	ec59 8b10 	vmov	r8, r9, d0
 8005810:	4616      	mov	r6, r2
 8005812:	f7ff fcd5 	bl	80051c0 <_Balloc>
 8005816:	4604      	mov	r4, r0
 8005818:	b930      	cbnz	r0, 8005828 <__d2b+0x24>
 800581a:	4602      	mov	r2, r0
 800581c:	4b23      	ldr	r3, [pc, #140]	@ (80058ac <__d2b+0xa8>)
 800581e:	4824      	ldr	r0, [pc, #144]	@ (80058b0 <__d2b+0xac>)
 8005820:	f240 310f 	movw	r1, #783	@ 0x30f
 8005824:	f7fe fd54 	bl	80042d0 <__assert_func>
 8005828:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800582c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005830:	b10d      	cbz	r5, 8005836 <__d2b+0x32>
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	f1b8 0300 	subs.w	r3, r8, #0
 800583c:	d023      	beq.n	8005886 <__d2b+0x82>
 800583e:	4668      	mov	r0, sp
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	f7ff fd84 	bl	800534e <__lo0bits>
 8005846:	e9dd 1200 	ldrd	r1, r2, [sp]
 800584a:	b1d0      	cbz	r0, 8005882 <__d2b+0x7e>
 800584c:	f1c0 0320 	rsb	r3, r0, #32
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	430b      	orrs	r3, r1
 8005856:	40c2      	lsrs	r2, r0
 8005858:	6163      	str	r3, [r4, #20]
 800585a:	9201      	str	r2, [sp, #4]
 800585c:	9b01      	ldr	r3, [sp, #4]
 800585e:	61a3      	str	r3, [r4, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf0c      	ite	eq
 8005864:	2201      	moveq	r2, #1
 8005866:	2202      	movne	r2, #2
 8005868:	6122      	str	r2, [r4, #16]
 800586a:	b1a5      	cbz	r5, 8005896 <__d2b+0x92>
 800586c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005870:	4405      	add	r5, r0
 8005872:	603d      	str	r5, [r7, #0]
 8005874:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005878:	6030      	str	r0, [r6, #0]
 800587a:	4620      	mov	r0, r4
 800587c:	b003      	add	sp, #12
 800587e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005882:	6161      	str	r1, [r4, #20]
 8005884:	e7ea      	b.n	800585c <__d2b+0x58>
 8005886:	a801      	add	r0, sp, #4
 8005888:	f7ff fd61 	bl	800534e <__lo0bits>
 800588c:	9b01      	ldr	r3, [sp, #4]
 800588e:	6163      	str	r3, [r4, #20]
 8005890:	3020      	adds	r0, #32
 8005892:	2201      	movs	r2, #1
 8005894:	e7e8      	b.n	8005868 <__d2b+0x64>
 8005896:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800589a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800589e:	6038      	str	r0, [r7, #0]
 80058a0:	6918      	ldr	r0, [r3, #16]
 80058a2:	f7ff fd35 	bl	8005310 <__hi0bits>
 80058a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80058aa:	e7e5      	b.n	8005878 <__d2b+0x74>
 80058ac:	0800604c 	.word	0x0800604c
 80058b0:	0800605d 	.word	0x0800605d

080058b4 <__sfputc_r>:
 80058b4:	6893      	ldr	r3, [r2, #8]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	b410      	push	{r4}
 80058bc:	6093      	str	r3, [r2, #8]
 80058be:	da08      	bge.n	80058d2 <__sfputc_r+0x1e>
 80058c0:	6994      	ldr	r4, [r2, #24]
 80058c2:	42a3      	cmp	r3, r4
 80058c4:	db01      	blt.n	80058ca <__sfputc_r+0x16>
 80058c6:	290a      	cmp	r1, #10
 80058c8:	d103      	bne.n	80058d2 <__sfputc_r+0x1e>
 80058ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ce:	f7fe bbdc 	b.w	800408a <__swbuf_r>
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	1c58      	adds	r0, r3, #1
 80058d6:	6010      	str	r0, [r2, #0]
 80058d8:	7019      	strb	r1, [r3, #0]
 80058da:	4608      	mov	r0, r1
 80058dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <__sfputs_r>:
 80058e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e4:	4606      	mov	r6, r0
 80058e6:	460f      	mov	r7, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	18d5      	adds	r5, r2, r3
 80058ec:	42ac      	cmp	r4, r5
 80058ee:	d101      	bne.n	80058f4 <__sfputs_r+0x12>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e007      	b.n	8005904 <__sfputs_r+0x22>
 80058f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f8:	463a      	mov	r2, r7
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff ffda 	bl	80058b4 <__sfputc_r>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d1f3      	bne.n	80058ec <__sfputs_r+0xa>
 8005904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005908 <_vfiprintf_r>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	460d      	mov	r5, r1
 800590e:	b09d      	sub	sp, #116	@ 0x74
 8005910:	4614      	mov	r4, r2
 8005912:	4698      	mov	r8, r3
 8005914:	4606      	mov	r6, r0
 8005916:	b118      	cbz	r0, 8005920 <_vfiprintf_r+0x18>
 8005918:	6a03      	ldr	r3, [r0, #32]
 800591a:	b90b      	cbnz	r3, 8005920 <_vfiprintf_r+0x18>
 800591c:	f7fe fb2a 	bl	8003f74 <__sinit>
 8005920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005922:	07d9      	lsls	r1, r3, #31
 8005924:	d405      	bmi.n	8005932 <_vfiprintf_r+0x2a>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	059a      	lsls	r2, r3, #22
 800592a:	d402      	bmi.n	8005932 <_vfiprintf_r+0x2a>
 800592c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800592e:	f7fe fcbe 	bl	80042ae <__retarget_lock_acquire_recursive>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	071b      	lsls	r3, r3, #28
 8005936:	d501      	bpl.n	800593c <_vfiprintf_r+0x34>
 8005938:	692b      	ldr	r3, [r5, #16]
 800593a:	b99b      	cbnz	r3, 8005964 <_vfiprintf_r+0x5c>
 800593c:	4629      	mov	r1, r5
 800593e:	4630      	mov	r0, r6
 8005940:	f7fe fbe2 	bl	8004108 <__swsetup_r>
 8005944:	b170      	cbz	r0, 8005964 <_vfiprintf_r+0x5c>
 8005946:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005948:	07dc      	lsls	r4, r3, #31
 800594a:	d504      	bpl.n	8005956 <_vfiprintf_r+0x4e>
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	b01d      	add	sp, #116	@ 0x74
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	89ab      	ldrh	r3, [r5, #12]
 8005958:	0598      	lsls	r0, r3, #22
 800595a:	d4f7      	bmi.n	800594c <_vfiprintf_r+0x44>
 800595c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800595e:	f7fe fca7 	bl	80042b0 <__retarget_lock_release_recursive>
 8005962:	e7f3      	b.n	800594c <_vfiprintf_r+0x44>
 8005964:	2300      	movs	r3, #0
 8005966:	9309      	str	r3, [sp, #36]	@ 0x24
 8005968:	2320      	movs	r3, #32
 800596a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800596e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005972:	2330      	movs	r3, #48	@ 0x30
 8005974:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b24 <_vfiprintf_r+0x21c>
 8005978:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800597c:	f04f 0901 	mov.w	r9, #1
 8005980:	4623      	mov	r3, r4
 8005982:	469a      	mov	sl, r3
 8005984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005988:	b10a      	cbz	r2, 800598e <_vfiprintf_r+0x86>
 800598a:	2a25      	cmp	r2, #37	@ 0x25
 800598c:	d1f9      	bne.n	8005982 <_vfiprintf_r+0x7a>
 800598e:	ebba 0b04 	subs.w	fp, sl, r4
 8005992:	d00b      	beq.n	80059ac <_vfiprintf_r+0xa4>
 8005994:	465b      	mov	r3, fp
 8005996:	4622      	mov	r2, r4
 8005998:	4629      	mov	r1, r5
 800599a:	4630      	mov	r0, r6
 800599c:	f7ff ffa1 	bl	80058e2 <__sfputs_r>
 80059a0:	3001      	adds	r0, #1
 80059a2:	f000 80a7 	beq.w	8005af4 <_vfiprintf_r+0x1ec>
 80059a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059a8:	445a      	add	r2, fp
 80059aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80059ac:	f89a 3000 	ldrb.w	r3, [sl]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 809f 	beq.w	8005af4 <_vfiprintf_r+0x1ec>
 80059b6:	2300      	movs	r3, #0
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059c0:	f10a 0a01 	add.w	sl, sl, #1
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	9307      	str	r3, [sp, #28]
 80059c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80059ce:	4654      	mov	r4, sl
 80059d0:	2205      	movs	r2, #5
 80059d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d6:	4853      	ldr	r0, [pc, #332]	@ (8005b24 <_vfiprintf_r+0x21c>)
 80059d8:	f7fa fbfa 	bl	80001d0 <memchr>
 80059dc:	9a04      	ldr	r2, [sp, #16]
 80059de:	b9d8      	cbnz	r0, 8005a18 <_vfiprintf_r+0x110>
 80059e0:	06d1      	lsls	r1, r2, #27
 80059e2:	bf44      	itt	mi
 80059e4:	2320      	movmi	r3, #32
 80059e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ea:	0713      	lsls	r3, r2, #28
 80059ec:	bf44      	itt	mi
 80059ee:	232b      	movmi	r3, #43	@ 0x2b
 80059f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059f4:	f89a 3000 	ldrb.w	r3, [sl]
 80059f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059fa:	d015      	beq.n	8005a28 <_vfiprintf_r+0x120>
 80059fc:	9a07      	ldr	r2, [sp, #28]
 80059fe:	4654      	mov	r4, sl
 8005a00:	2000      	movs	r0, #0
 8005a02:	f04f 0c0a 	mov.w	ip, #10
 8005a06:	4621      	mov	r1, r4
 8005a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a0c:	3b30      	subs	r3, #48	@ 0x30
 8005a0e:	2b09      	cmp	r3, #9
 8005a10:	d94b      	bls.n	8005aaa <_vfiprintf_r+0x1a2>
 8005a12:	b1b0      	cbz	r0, 8005a42 <_vfiprintf_r+0x13a>
 8005a14:	9207      	str	r2, [sp, #28]
 8005a16:	e014      	b.n	8005a42 <_vfiprintf_r+0x13a>
 8005a18:	eba0 0308 	sub.w	r3, r0, r8
 8005a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	46a2      	mov	sl, r4
 8005a26:	e7d2      	b.n	80059ce <_vfiprintf_r+0xc6>
 8005a28:	9b03      	ldr	r3, [sp, #12]
 8005a2a:	1d19      	adds	r1, r3, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	9103      	str	r1, [sp, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bfbb      	ittet	lt
 8005a34:	425b      	neglt	r3, r3
 8005a36:	f042 0202 	orrlt.w	r2, r2, #2
 8005a3a:	9307      	strge	r3, [sp, #28]
 8005a3c:	9307      	strlt	r3, [sp, #28]
 8005a3e:	bfb8      	it	lt
 8005a40:	9204      	strlt	r2, [sp, #16]
 8005a42:	7823      	ldrb	r3, [r4, #0]
 8005a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a46:	d10a      	bne.n	8005a5e <_vfiprintf_r+0x156>
 8005a48:	7863      	ldrb	r3, [r4, #1]
 8005a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a4c:	d132      	bne.n	8005ab4 <_vfiprintf_r+0x1ac>
 8005a4e:	9b03      	ldr	r3, [sp, #12]
 8005a50:	1d1a      	adds	r2, r3, #4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	9203      	str	r2, [sp, #12]
 8005a56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a5a:	3402      	adds	r4, #2
 8005a5c:	9305      	str	r3, [sp, #20]
 8005a5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b34 <_vfiprintf_r+0x22c>
 8005a62:	7821      	ldrb	r1, [r4, #0]
 8005a64:	2203      	movs	r2, #3
 8005a66:	4650      	mov	r0, sl
 8005a68:	f7fa fbb2 	bl	80001d0 <memchr>
 8005a6c:	b138      	cbz	r0, 8005a7e <_vfiprintf_r+0x176>
 8005a6e:	9b04      	ldr	r3, [sp, #16]
 8005a70:	eba0 000a 	sub.w	r0, r0, sl
 8005a74:	2240      	movs	r2, #64	@ 0x40
 8005a76:	4082      	lsls	r2, r0
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	3401      	adds	r4, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a82:	4829      	ldr	r0, [pc, #164]	@ (8005b28 <_vfiprintf_r+0x220>)
 8005a84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a88:	2206      	movs	r2, #6
 8005a8a:	f7fa fba1 	bl	80001d0 <memchr>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d03f      	beq.n	8005b12 <_vfiprintf_r+0x20a>
 8005a92:	4b26      	ldr	r3, [pc, #152]	@ (8005b2c <_vfiprintf_r+0x224>)
 8005a94:	bb1b      	cbnz	r3, 8005ade <_vfiprintf_r+0x1d6>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	3307      	adds	r3, #7
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa4:	443b      	add	r3, r7
 8005aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa8:	e76a      	b.n	8005980 <_vfiprintf_r+0x78>
 8005aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aae:	460c      	mov	r4, r1
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	e7a8      	b.n	8005a06 <_vfiprintf_r+0xfe>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	4619      	mov	r1, r3
 8005abc:	f04f 0c0a 	mov.w	ip, #10
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ac6:	3a30      	subs	r2, #48	@ 0x30
 8005ac8:	2a09      	cmp	r2, #9
 8005aca:	d903      	bls.n	8005ad4 <_vfiprintf_r+0x1cc>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0c6      	beq.n	8005a5e <_vfiprintf_r+0x156>
 8005ad0:	9105      	str	r1, [sp, #20]
 8005ad2:	e7c4      	b.n	8005a5e <_vfiprintf_r+0x156>
 8005ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad8:	4604      	mov	r4, r0
 8005ada:	2301      	movs	r3, #1
 8005adc:	e7f0      	b.n	8005ac0 <_vfiprintf_r+0x1b8>
 8005ade:	ab03      	add	r3, sp, #12
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <_vfiprintf_r+0x228>)
 8005ae6:	a904      	add	r1, sp, #16
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7fd fe01 	bl	80036f0 <_printf_float>
 8005aee:	4607      	mov	r7, r0
 8005af0:	1c78      	adds	r0, r7, #1
 8005af2:	d1d6      	bne.n	8005aa2 <_vfiprintf_r+0x19a>
 8005af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005af6:	07d9      	lsls	r1, r3, #31
 8005af8:	d405      	bmi.n	8005b06 <_vfiprintf_r+0x1fe>
 8005afa:	89ab      	ldrh	r3, [r5, #12]
 8005afc:	059a      	lsls	r2, r3, #22
 8005afe:	d402      	bmi.n	8005b06 <_vfiprintf_r+0x1fe>
 8005b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b02:	f7fe fbd5 	bl	80042b0 <__retarget_lock_release_recursive>
 8005b06:	89ab      	ldrh	r3, [r5, #12]
 8005b08:	065b      	lsls	r3, r3, #25
 8005b0a:	f53f af1f 	bmi.w	800594c <_vfiprintf_r+0x44>
 8005b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b10:	e71e      	b.n	8005950 <_vfiprintf_r+0x48>
 8005b12:	ab03      	add	r3, sp, #12
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	462a      	mov	r2, r5
 8005b18:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <_vfiprintf_r+0x228>)
 8005b1a:	a904      	add	r1, sp, #16
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7fe f87f 	bl	8003c20 <_printf_i>
 8005b22:	e7e4      	b.n	8005aee <_vfiprintf_r+0x1e6>
 8005b24:	080060b6 	.word	0x080060b6
 8005b28:	080060c0 	.word	0x080060c0
 8005b2c:	080036f1 	.word	0x080036f1
 8005b30:	080058e3 	.word	0x080058e3
 8005b34:	080060bc 	.word	0x080060bc

08005b38 <__sflush_r>:
 8005b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b40:	0716      	lsls	r6, r2, #28
 8005b42:	4605      	mov	r5, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	d454      	bmi.n	8005bf2 <__sflush_r+0xba>
 8005b48:	684b      	ldr	r3, [r1, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	dc02      	bgt.n	8005b54 <__sflush_r+0x1c>
 8005b4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	dd48      	ble.n	8005be6 <__sflush_r+0xae>
 8005b54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d045      	beq.n	8005be6 <__sflush_r+0xae>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b60:	682f      	ldr	r7, [r5, #0]
 8005b62:	6a21      	ldr	r1, [r4, #32]
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	d030      	beq.n	8005bca <__sflush_r+0x92>
 8005b68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	0759      	lsls	r1, r3, #29
 8005b6e:	d505      	bpl.n	8005b7c <__sflush_r+0x44>
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	1ad2      	subs	r2, r2, r3
 8005b74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b76:	b10b      	cbz	r3, 8005b7c <__sflush_r+0x44>
 8005b78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b7a:	1ad2      	subs	r2, r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b80:	6a21      	ldr	r1, [r4, #32]
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b0      	blx	r6
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	d106      	bne.n	8005b9a <__sflush_r+0x62>
 8005b8c:	6829      	ldr	r1, [r5, #0]
 8005b8e:	291d      	cmp	r1, #29
 8005b90:	d82b      	bhi.n	8005bea <__sflush_r+0xb2>
 8005b92:	4a2a      	ldr	r2, [pc, #168]	@ (8005c3c <__sflush_r+0x104>)
 8005b94:	40ca      	lsrs	r2, r1
 8005b96:	07d6      	lsls	r6, r2, #31
 8005b98:	d527      	bpl.n	8005bea <__sflush_r+0xb2>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	6062      	str	r2, [r4, #4]
 8005b9e:	04d9      	lsls	r1, r3, #19
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	6022      	str	r2, [r4, #0]
 8005ba4:	d504      	bpl.n	8005bb0 <__sflush_r+0x78>
 8005ba6:	1c42      	adds	r2, r0, #1
 8005ba8:	d101      	bne.n	8005bae <__sflush_r+0x76>
 8005baa:	682b      	ldr	r3, [r5, #0]
 8005bac:	b903      	cbnz	r3, 8005bb0 <__sflush_r+0x78>
 8005bae:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb2:	602f      	str	r7, [r5, #0]
 8005bb4:	b1b9      	cbz	r1, 8005be6 <__sflush_r+0xae>
 8005bb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bba:	4299      	cmp	r1, r3
 8005bbc:	d002      	beq.n	8005bc4 <__sflush_r+0x8c>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff f9fe 	bl	8004fc0 <_free_r>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bc8:	e00d      	b.n	8005be6 <__sflush_r+0xae>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b0      	blx	r6
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	1c50      	adds	r0, r2, #1
 8005bd4:	d1c9      	bne.n	8005b6a <__sflush_r+0x32>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0c6      	beq.n	8005b6a <__sflush_r+0x32>
 8005bdc:	2b1d      	cmp	r3, #29
 8005bde:	d001      	beq.n	8005be4 <__sflush_r+0xac>
 8005be0:	2b16      	cmp	r3, #22
 8005be2:	d11e      	bne.n	8005c22 <__sflush_r+0xea>
 8005be4:	602f      	str	r7, [r5, #0]
 8005be6:	2000      	movs	r0, #0
 8005be8:	e022      	b.n	8005c30 <__sflush_r+0xf8>
 8005bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bee:	b21b      	sxth	r3, r3
 8005bf0:	e01b      	b.n	8005c2a <__sflush_r+0xf2>
 8005bf2:	690f      	ldr	r7, [r1, #16]
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	d0f6      	beq.n	8005be6 <__sflush_r+0xae>
 8005bf8:	0793      	lsls	r3, r2, #30
 8005bfa:	680e      	ldr	r6, [r1, #0]
 8005bfc:	bf08      	it	eq
 8005bfe:	694b      	ldreq	r3, [r1, #20]
 8005c00:	600f      	str	r7, [r1, #0]
 8005c02:	bf18      	it	ne
 8005c04:	2300      	movne	r3, #0
 8005c06:	eba6 0807 	sub.w	r8, r6, r7
 8005c0a:	608b      	str	r3, [r1, #8]
 8005c0c:	f1b8 0f00 	cmp.w	r8, #0
 8005c10:	dde9      	ble.n	8005be6 <__sflush_r+0xae>
 8005c12:	6a21      	ldr	r1, [r4, #32]
 8005c14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c16:	4643      	mov	r3, r8
 8005c18:	463a      	mov	r2, r7
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b0      	blx	r6
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	dc08      	bgt.n	8005c34 <__sflush_r+0xfc>
 8005c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2a:	81a3      	strh	r3, [r4, #12]
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c34:	4407      	add	r7, r0
 8005c36:	eba8 0800 	sub.w	r8, r8, r0
 8005c3a:	e7e7      	b.n	8005c0c <__sflush_r+0xd4>
 8005c3c:	20400001 	.word	0x20400001

08005c40 <_fflush_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	690b      	ldr	r3, [r1, #16]
 8005c44:	4605      	mov	r5, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	b913      	cbnz	r3, 8005c50 <_fflush_r+0x10>
 8005c4a:	2500      	movs	r5, #0
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	b118      	cbz	r0, 8005c5a <_fflush_r+0x1a>
 8005c52:	6a03      	ldr	r3, [r0, #32]
 8005c54:	b90b      	cbnz	r3, 8005c5a <_fflush_r+0x1a>
 8005c56:	f7fe f98d 	bl	8003f74 <__sinit>
 8005c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0f3      	beq.n	8005c4a <_fflush_r+0xa>
 8005c62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c64:	07d0      	lsls	r0, r2, #31
 8005c66:	d404      	bmi.n	8005c72 <_fflush_r+0x32>
 8005c68:	0599      	lsls	r1, r3, #22
 8005c6a:	d402      	bmi.n	8005c72 <_fflush_r+0x32>
 8005c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c6e:	f7fe fb1e 	bl	80042ae <__retarget_lock_acquire_recursive>
 8005c72:	4628      	mov	r0, r5
 8005c74:	4621      	mov	r1, r4
 8005c76:	f7ff ff5f 	bl	8005b38 <__sflush_r>
 8005c7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c7c:	07da      	lsls	r2, r3, #31
 8005c7e:	4605      	mov	r5, r0
 8005c80:	d4e4      	bmi.n	8005c4c <_fflush_r+0xc>
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	059b      	lsls	r3, r3, #22
 8005c86:	d4e1      	bmi.n	8005c4c <_fflush_r+0xc>
 8005c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c8a:	f7fe fb11 	bl	80042b0 <__retarget_lock_release_recursive>
 8005c8e:	e7dd      	b.n	8005c4c <_fflush_r+0xc>

08005c90 <fiprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b503      	push	{r0, r1, lr}
 8005c94:	4601      	mov	r1, r0
 8005c96:	ab03      	add	r3, sp, #12
 8005c98:	4805      	ldr	r0, [pc, #20]	@ (8005cb0 <fiprintf+0x20>)
 8005c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	f7ff fe31 	bl	8005908 <_vfiprintf_r>
 8005ca6:	b002      	add	sp, #8
 8005ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cac:	b003      	add	sp, #12
 8005cae:	4770      	bx	lr
 8005cb0:	200000b4 	.word	0x200000b4

08005cb4 <__swhatbuf_r>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	b096      	sub	sp, #88	@ 0x58
 8005cc0:	4615      	mov	r5, r2
 8005cc2:	461e      	mov	r6, r3
 8005cc4:	da0d      	bge.n	8005ce2 <__swhatbuf_r+0x2e>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	bf14      	ite	ne
 8005cd2:	2340      	movne	r3, #64	@ 0x40
 8005cd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005cd8:	2000      	movs	r0, #0
 8005cda:	6031      	str	r1, [r6, #0]
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	b016      	add	sp, #88	@ 0x58
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
 8005ce2:	466a      	mov	r2, sp
 8005ce4:	f000 f848 	bl	8005d78 <_fstat_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	dbec      	blt.n	8005cc6 <__swhatbuf_r+0x12>
 8005cec:	9901      	ldr	r1, [sp, #4]
 8005cee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005cf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005cf6:	4259      	negs	r1, r3
 8005cf8:	4159      	adcs	r1, r3
 8005cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfe:	e7eb      	b.n	8005cd8 <__swhatbuf_r+0x24>

08005d00 <__smakebuf_r>:
 8005d00:	898b      	ldrh	r3, [r1, #12]
 8005d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d04:	079d      	lsls	r5, r3, #30
 8005d06:	4606      	mov	r6, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	d507      	bpl.n	8005d1c <__smakebuf_r+0x1c>
 8005d0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	2301      	movs	r3, #1
 8005d16:	6163      	str	r3, [r4, #20]
 8005d18:	b003      	add	sp, #12
 8005d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1c:	ab01      	add	r3, sp, #4
 8005d1e:	466a      	mov	r2, sp
 8005d20:	f7ff ffc8 	bl	8005cb4 <__swhatbuf_r>
 8005d24:	9f00      	ldr	r7, [sp, #0]
 8005d26:	4605      	mov	r5, r0
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff f9bc 	bl	80050a8 <_malloc_r>
 8005d30:	b948      	cbnz	r0, 8005d46 <__smakebuf_r+0x46>
 8005d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d36:	059a      	lsls	r2, r3, #22
 8005d38:	d4ee      	bmi.n	8005d18 <__smakebuf_r+0x18>
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	f043 0302 	orr.w	r3, r3, #2
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	e7e2      	b.n	8005d0c <__smakebuf_r+0xc>
 8005d46:	89a3      	ldrh	r3, [r4, #12]
 8005d48:	6020      	str	r0, [r4, #0]
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	9b01      	ldr	r3, [sp, #4]
 8005d52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d56:	b15b      	cbz	r3, 8005d70 <__smakebuf_r+0x70>
 8005d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f000 f81d 	bl	8005d9c <_isatty_r>
 8005d62:	b128      	cbz	r0, 8005d70 <__smakebuf_r+0x70>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	431d      	orrs	r5, r3
 8005d74:	81a5      	strh	r5, [r4, #12]
 8005d76:	e7cf      	b.n	8005d18 <__smakebuf_r+0x18>

08005d78 <_fstat_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d07      	ldr	r5, [pc, #28]	@ (8005d98 <_fstat_r+0x20>)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	602b      	str	r3, [r5, #0]
 8005d86:	f7fd fa92 	bl	80032ae <_fstat>
 8005d8a:	1c43      	adds	r3, r0, #1
 8005d8c:	d102      	bne.n	8005d94 <_fstat_r+0x1c>
 8005d8e:	682b      	ldr	r3, [r5, #0]
 8005d90:	b103      	cbz	r3, 8005d94 <_fstat_r+0x1c>
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop
 8005d98:	200004dc 	.word	0x200004dc

08005d9c <_isatty_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_isatty_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fd fbe6 	bl	8003578 <_isatty>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_isatty_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_isatty_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200004dc 	.word	0x200004dc

08005dbc <_sbrk_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d06      	ldr	r5, [pc, #24]	@ (8005dd8 <_sbrk_r+0x1c>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fd fa2c 	bl	8003224 <_sbrk>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_sbrk_r+0x1a>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_sbrk_r+0x1a>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	200004dc 	.word	0x200004dc

08005ddc <abort>:
 8005ddc:	b508      	push	{r3, lr}
 8005dde:	2006      	movs	r0, #6
 8005de0:	f000 f85e 	bl	8005ea0 <raise>
 8005de4:	2001      	movs	r0, #1
 8005de6:	f000 f87f 	bl	8005ee8 <_exit>

08005dea <_calloc_r>:
 8005dea:	b570      	push	{r4, r5, r6, lr}
 8005dec:	fba1 5402 	umull	r5, r4, r1, r2
 8005df0:	b934      	cbnz	r4, 8005e00 <_calloc_r+0x16>
 8005df2:	4629      	mov	r1, r5
 8005df4:	f7ff f958 	bl	80050a8 <_malloc_r>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	b928      	cbnz	r0, 8005e08 <_calloc_r+0x1e>
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	220c      	movs	r2, #12
 8005e02:	6002      	str	r2, [r0, #0]
 8005e04:	2600      	movs	r6, #0
 8005e06:	e7f9      	b.n	8005dfc <_calloc_r+0x12>
 8005e08:	462a      	mov	r2, r5
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	f7fe f9d2 	bl	80041b4 <memset>
 8005e10:	e7f4      	b.n	8005dfc <_calloc_r+0x12>

08005e12 <__ascii_mbtowc>:
 8005e12:	b082      	sub	sp, #8
 8005e14:	b901      	cbnz	r1, 8005e18 <__ascii_mbtowc+0x6>
 8005e16:	a901      	add	r1, sp, #4
 8005e18:	b142      	cbz	r2, 8005e2c <__ascii_mbtowc+0x1a>
 8005e1a:	b14b      	cbz	r3, 8005e30 <__ascii_mbtowc+0x1e>
 8005e1c:	7813      	ldrb	r3, [r2, #0]
 8005e1e:	600b      	str	r3, [r1, #0]
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	1e10      	subs	r0, r2, #0
 8005e24:	bf18      	it	ne
 8005e26:	2001      	movne	r0, #1
 8005e28:	b002      	add	sp, #8
 8005e2a:	4770      	bx	lr
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	e7fb      	b.n	8005e28 <__ascii_mbtowc+0x16>
 8005e30:	f06f 0001 	mvn.w	r0, #1
 8005e34:	e7f8      	b.n	8005e28 <__ascii_mbtowc+0x16>

08005e36 <__ascii_wctomb>:
 8005e36:	4603      	mov	r3, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	b141      	cbz	r1, 8005e4e <__ascii_wctomb+0x18>
 8005e3c:	2aff      	cmp	r2, #255	@ 0xff
 8005e3e:	d904      	bls.n	8005e4a <__ascii_wctomb+0x14>
 8005e40:	228a      	movs	r2, #138	@ 0x8a
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	4770      	bx	lr
 8005e4a:	700a      	strb	r2, [r1, #0]
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	4770      	bx	lr

08005e50 <_raise_r>:
 8005e50:	291f      	cmp	r1, #31
 8005e52:	b538      	push	{r3, r4, r5, lr}
 8005e54:	4605      	mov	r5, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	d904      	bls.n	8005e64 <_raise_r+0x14>
 8005e5a:	2316      	movs	r3, #22
 8005e5c:	6003      	str	r3, [r0, #0]
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e66:	b112      	cbz	r2, 8005e6e <_raise_r+0x1e>
 8005e68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e6c:	b94b      	cbnz	r3, 8005e82 <_raise_r+0x32>
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f000 f830 	bl	8005ed4 <_getpid_r>
 8005e74:	4622      	mov	r2, r4
 8005e76:	4601      	mov	r1, r0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e7e:	f000 b817 	b.w	8005eb0 <_kill_r>
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d00a      	beq.n	8005e9c <_raise_r+0x4c>
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	d103      	bne.n	8005e92 <_raise_r+0x42>
 8005e8a:	2316      	movs	r3, #22
 8005e8c:	6003      	str	r3, [r0, #0]
 8005e8e:	2001      	movs	r0, #1
 8005e90:	e7e7      	b.n	8005e62 <_raise_r+0x12>
 8005e92:	2100      	movs	r1, #0
 8005e94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	4798      	blx	r3
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e7e0      	b.n	8005e62 <_raise_r+0x12>

08005ea0 <raise>:
 8005ea0:	4b02      	ldr	r3, [pc, #8]	@ (8005eac <raise+0xc>)
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f7ff bfd3 	b.w	8005e50 <_raise_r>
 8005eaa:	bf00      	nop
 8005eac:	200000b4 	.word	0x200000b4

08005eb0 <_kill_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d07      	ldr	r5, [pc, #28]	@ (8005ed0 <_kill_r+0x20>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f000 f80b 	bl	8005ed8 <_kill>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d102      	bne.n	8005ecc <_kill_r+0x1c>
 8005ec6:	682b      	ldr	r3, [r5, #0]
 8005ec8:	b103      	cbz	r3, 8005ecc <_kill_r+0x1c>
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	200004dc 	.word	0x200004dc

08005ed4 <_getpid_r>:
 8005ed4:	f7fd b9a4 	b.w	8003220 <_getpid>

08005ed8 <_kill>:
 8005ed8:	4b02      	ldr	r3, [pc, #8]	@ (8005ee4 <_kill+0xc>)
 8005eda:	2258      	movs	r2, #88	@ 0x58
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	4770      	bx	lr
 8005ee4:	200004dc 	.word	0x200004dc

08005ee8 <_exit>:
 8005ee8:	e7fe      	b.n	8005ee8 <_exit>
	...

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
