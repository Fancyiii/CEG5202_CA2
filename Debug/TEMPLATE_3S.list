
TEMPLATE_3S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005fd0  08005fd0  00006fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b4  080063b4  00008270  2**0
                  CONTENTS
  4 .ARM          00000008  080063b4  080063b4  000073b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063bc  080063bc  00008270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063bc  080063bc  000073bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c0  080063c0  000073c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080063c4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000270  08006634  00008270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08006634  000084ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a77c  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002037  00000000  00000000  00012a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00014a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078d  00000000  00000000  00015488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281aa  00000000  00000000  00015c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de2f  00000000  00000000  0003ddbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3390  00000000  00000000  0004bbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ef7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  0013efc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00142a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fb4 	.word	0x08005fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08005fb4 	.word	0x08005fb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
#include "stdio.h"

extern void initialise_monitor_handles(void);	// for semi-hosting support (printf)

int main(void)
{
 8000ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bac:	b0a8      	sub	sp, #160	@ 0xa0
 8000bae:	af10      	add	r7, sp, #64	@ 0x40
	initialise_monitor_handles(); // for semi-hosting support (printf)
 8000bb0:	f002 fce6 	bl	8003580 <initialise_monitor_handles>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bb4:	f001 f8e6 	bl	8001d84 <HAL_Init>

	/* Peripheral initializations using BSP functions */
	BSP_ACCELERO_Init();
 8000bb8:	f000 fb5c 	bl	8001274 <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8000bbc:	f000 fc52 	bl	8001464 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8000bc0:	f000 fbb0 	bl	8001324 <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init();
 8000bc4:	f000 fbdc 	bl	8001380 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();
 8000bc8:	f000 fc1e 	bl	8001408 <BSP_PSENSOR_Init>


	while (1)
	{
		float accel_data[3];
		int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8000bcc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	809a      	strh	r2, [r3, #4]
		BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8000bd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 fb8a 	bl	80012f4 <BSP_ACCELERO_AccGetXYZ>
		// the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
		accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8000be0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bec:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8000d48 <main+0x1a0>
 8000bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8000bf8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c04:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8000d48 <main+0x1a0>
 8000c08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c0c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8000c10:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c1c:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8000d48 <main+0x1a0>
 8000c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c24:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

		float temp_data;
		temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 8000c28:	f000 fc38 	bl	800149c <BSP_TSENSOR_ReadTemp>
 8000c2c:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c

		float humidity_data;
		humidity_data = BSP_HSENSOR_ReadHumidity();  // read humidity sensor
 8000c30:	f000 fb98 	bl	8001364 <BSP_HSENSOR_ReadHumidity>
 8000c34:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58

		float magneto_data[3];
		int16_t magneto_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8000c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	809a      	strh	r2, [r3, #4]
		BSP_MAGNETO_GetXYZ(magneto_data_i16);		// read accelerometer
 8000c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fbc6 	bl	80013d8 <BSP_MAGNETO_GetXYZ>
		// the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
		magneto_data[0] = (float)magneto_data_i16[0] / 100.0f;
 8000c4c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000c50:	ee07 3a90 	vmov	s15, r3
 8000c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c58:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8000d48 <main+0x1a0>
 8000c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c60:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		magneto_data[1] = (float)magneto_data_i16[1] / 100.0f;
 8000c64:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c70:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000d48 <main+0x1a0>
 8000c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c78:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		magneto_data[2] = (float)magneto_data_i16[2] / 100.0f;
 8000c7c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c88:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8000d48 <main+0x1a0>
 8000c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c90:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

		float pressure_data;
		pressure_data = BSP_PSENSOR_ReadPressure();
 8000c94:	f000 fbd8 	bl	8001448 <BSP_PSENSOR_ReadPressure>
 8000c98:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54



		printf("Accel XYZ=%f %f %f; Temperature=%f; humidity=%f; magneto XYZ=%f, %f, %f; pressure=%f\n", accel_data[0], accel_data[1], accel_data[2], temp_data, humidity_data, magneto_data[0], magneto_data[1], magneto_data[2], pressure_data);
 8000c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc52 	bl	8000548 <__aeabi_f2d>
 8000ca4:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8000ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc4c 	bl	8000548 <__aeabi_f2d>
 8000cb0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fc46 	bl	8000548 <__aeabi_f2d>
 8000cbc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8000cc0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000cc2:	f7ff fc41 	bl	8000548 <__aeabi_f2d>
 8000cc6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000cca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8000ccc:	f7ff fc3c 	bl	8000548 <__aeabi_f2d>
 8000cd0:	e9c7 0100 	strd	r0, r1, [r7]
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fc36 	bl	8000548 <__aeabi_f2d>
 8000cdc:	4682      	mov	sl, r0
 8000cde:	468b      	mov	fp, r1
 8000ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc30 	bl	8000548 <__aeabi_f2d>
 8000ce8:	4680      	mov	r8, r0
 8000cea:	4689      	mov	r9, r1
 8000cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc2a 	bl	8000548 <__aeabi_f2d>
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000cfa:	f7ff fc25 	bl	8000548 <__aeabi_f2d>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8000d06:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8000d0a:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8000d0e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8000d12:	ed97 7b00 	vldr	d7, [r7]
 8000d16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000d1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000d1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000d22:	ed97 7b04 	vldr	d7, [r7, #16]
 8000d26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000d2a:	ed97 7b06 	vldr	d7, [r7, #24]
 8000d2e:	ed8d 7b00 	vstr	d7, [sp]
 8000d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <main+0x1a4>)
 8000d38:	f003 f9b6 	bl	80040a8 <iprintf>
		HAL_Delay(1000);	// read once a ~second.
 8000d3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d40:	f001 f890 	bl	8001e64 <HAL_Delay>
	{
 8000d44:	bf00      	nop
 8000d46:	e741      	b.n	8000bcc <main+0x24>
 8000d48:	42c80000 	.word	0x42c80000
 8000d4c:	08005fd0 	.word	0x08005fd0

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a08      	ldr	r2, [pc, #32]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a17      	ldr	r2, [pc, #92]	@ (8000e14 <HAL_I2C_MspInit+0x7c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d128      	bne.n	8000e0c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_I2C_MspInit+0x80>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a16      	ldr	r2, [pc, #88]	@ (8000e18 <HAL_I2C_MspInit+0x80>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_I2C_MspInit+0x80>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000dd2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000de4:	2304      	movs	r3, #4
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <HAL_I2C_MspInit+0x84>)
 8000df0:	f001 f96c 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_I2C_MspInit+0x80>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_I2C_MspInit+0x80>)
 8000dfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_I2C_MspInit+0x80>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	@ 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005800 	.word	0x40005800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a08      	ldr	r2, [pc, #32]	@ (8000e50 <HAL_I2C_MspDeInit+0x30>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10a      	bne.n	8000e48 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <HAL_I2C_MspDeInit+0x34>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e36:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <HAL_I2C_MspDeInit+0x34>)
 8000e38:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000e3c:	6593      	str	r3, [r2, #88]	@ 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8000e3e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_I2C_MspDeInit+0x38>)
 8000e44:	f001 faec 	bl	8002420 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40005800 	.word	0x40005800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	bf00      	nop
 8000e70:	e7fd      	b.n	8000e6e <HardFault_Handler+0x4>

08000e72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e76:	bf00      	nop
 8000e78:	e7fd      	b.n	8000e76 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <BusFault_Handler+0x4>

08000e82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e86:	bf00      	nop
 8000e88:	e7fd      	b.n	8000e86 <UsageFault_Handler+0x4>

08000e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 ffb6 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ec4:	2020      	movs	r0, #32
 8000ec6:	f001 fb9f 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000eca:	2040      	movs	r0, #64	@ 0x40
 8000ecc:	f001 fb9c 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000ed0:	2080      	movs	r0, #128	@ 0x80
 8000ed2:	f001 fb99 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ed6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000eda:	f001 fb95 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000ee6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000eea:	f001 fb8d 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000eee:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ef2:	f001 fb89 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ef6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000efa:	f001 fb85 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000efe:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000f02:	f001 fb81 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f06:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000f0a:	f001 fb7d 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <SystemInit+0x64>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1e:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <SystemInit+0x64>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <SystemInit+0x68>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <SystemInit+0x68>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <SystemInit+0x68>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <SystemInit+0x68>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <SystemInit+0x68>)
 8000f40:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000f44:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000f48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <SystemInit+0x68>)
 8000f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <SystemInit+0x68>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a09      	ldr	r2, [pc, #36]	@ (8000f7c <SystemInit+0x68>)
 8000f58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <SystemInit+0x68>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <SystemInit+0x64>)
 8000f66:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	40021000 	.word	0x40021000

08000f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f86:	e003      	b.n	8000f90 <LoopCopyDataInit>

08000f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f8e:	3104      	adds	r1, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f98:	d3f6      	bcc.n	8000f88 <CopyDataInit>
	ldr	r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f9c:	e002      	b.n	8000fa4 <LoopFillZerobss>

08000f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fa0:	f842 3b04 	str.w	r3, [r2], #4

08000fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <LoopForever+0x16>)
	cmp	r2, r3
 8000fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fa8:	d3f9      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000faa:	f7ff ffb3 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f003 f9bd 	bl	800432c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb2:	f7ff fdf9 	bl	8000ba8 <main>

08000fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fbc:	080063c4 	.word	0x080063c4
	ldr	r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fc4:	20000270 	.word	0x20000270
	ldr	r2, =_sbss
 8000fc8:	20000270 	.word	0x20000270
	ldr	r3, = _ebss
 8000fcc:	200004ec 	.word	0x200004ec

08000fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_2_IRQHandler>
	...

08000fd4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000fdc:	4b27      	ldr	r3, [pc, #156]	@ (800107c <I2Cx_MspInit+0xa8>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a26      	ldr	r2, [pc, #152]	@ (800107c <I2Cx_MspInit+0xa8>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b24      	ldr	r3, [pc, #144]	@ (800107c <I2Cx_MspInit+0xa8>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ff4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ff8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000ffa:	2312      	movs	r3, #18
 8000ffc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001006:	2304      	movs	r3, #4
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	481b      	ldr	r0, [pc, #108]	@ (8001080 <I2Cx_MspInit+0xac>)
 8001012:	f001 f85b 	bl	80020cc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4818      	ldr	r0, [pc, #96]	@ (8001080 <I2Cx_MspInit+0xac>)
 800101e:	f001 f855 	bl	80020cc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <I2Cx_MspInit+0xa8>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <I2Cx_MspInit+0xa8>)
 8001028:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <I2Cx_MspInit+0xa8>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <I2Cx_MspInit+0xa8>)
 800103c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800103e:	4a0f      	ldr	r2, [pc, #60]	@ (800107c <I2Cx_MspInit+0xa8>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001044:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <I2Cx_MspInit+0xa8>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104a:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <I2Cx_MspInit+0xa8>)
 800104c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001050:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	210f      	movs	r1, #15
 8001056:	2021      	movs	r0, #33	@ 0x21
 8001058:	f001 f801 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800105c:	2021      	movs	r0, #33	@ 0x21
 800105e:	f001 f81a 	bl	8002096 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	210f      	movs	r1, #15
 8001066:	2022      	movs	r0, #34	@ 0x22
 8001068:	f000 fff9 	bl	800205e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800106c:	2022      	movs	r0, #34	@ 0x22
 800106e:	f001 f812 	bl	8002096 <HAL_NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400

08001084 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <I2Cx_Init+0x54>)
 8001090:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <I2Cx_Init+0x58>)
 8001096:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2201      	movs	r2, #1
 80010a2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff89 	bl	8000fd4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fac3 	bl	800264e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 ffc8 	bl	8003060 <HAL_I2CEx_ConfigAnalogFilter>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40005800 	.word	0x40005800
 80010dc:	00702681 	.word	0x00702681

080010e0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4603      	mov	r3, r0
 80010f0:	72fb      	strb	r3, [r7, #11]
 80010f2:	460b      	mov	r3, r1
 80010f4:	813b      	strh	r3, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010fe:	7afb      	ldrb	r3, [r7, #11]
 8001100:	b299      	uxth	r1, r3
 8001102:	88f8      	ldrh	r0, [r7, #6]
 8001104:	893a      	ldrh	r2, [r7, #8]
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4603      	mov	r3, r0
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f001 fc6c 	bl	80029f4 <HAL_I2C_Mem_Read>
 800111c:	4603      	mov	r3, r0
 800111e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001126:	7afb      	ldrb	r3, [r7, #11]
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f832 	bl	8001194 <I2Cx_Error>
  }
  return status;
 8001130:	7dfb      	ldrb	r3, [r7, #23]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b08a      	sub	sp, #40	@ 0x28
 800113e:	af04      	add	r7, sp, #16
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	4608      	mov	r0, r1
 8001144:	4611      	mov	r1, r2
 8001146:	461a      	mov	r2, r3
 8001148:	4603      	mov	r3, r0
 800114a:	72fb      	strb	r3, [r7, #11]
 800114c:	460b      	mov	r3, r1
 800114e:	813b      	strh	r3, [r7, #8]
 8001150:	4613      	mov	r3, r2
 8001152:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	b299      	uxth	r1, r3
 800115c:	88f8      	ldrh	r0, [r7, #6]
 800115e:	893a      	ldrh	r2, [r7, #8]
 8001160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4603      	mov	r3, r0
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f001 fb2b 	bl	80027cc <HAL_I2C_Mem_Write>
 8001176:	4603      	mov	r3, r0
 8001178:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d004      	beq.n	800118a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001180:	7afb      	ldrb	r3, [r7, #11]
 8001182:	4619      	mov	r1, r3
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 f805 	bl	8001194 <I2Cx_Error>
  }
  return status;
 800118a:	7dfb      	ldrb	r3, [r7, #23]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f001 fae3 	bl	800276c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff6c 	bl	8001084 <I2Cx_Init>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <SENSOR_IO_Init+0x10>)
 80011ba:	f7ff ff63 	bl	8001084 <I2Cx_Init>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000028c 	.word	0x2000028c

080011c8 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	460b      	mov	r3, r1
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	4613      	mov	r3, r2
 80011d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	79f9      	ldrb	r1, [r7, #7]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	1d7b      	adds	r3, r7, #5
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <SENSOR_IO_Write+0x30>)
 80011ec:	f7ff ffa5 	bl	800113a <I2Cx_WriteMultiple>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000028c 	.word	0x2000028c

080011fc <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	b29a      	uxth	r2, r3
 8001214:	79f9      	ldrb	r1, [r7, #7]
 8001216:	2301      	movs	r3, #1
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 030f 	add.w	r3, r7, #15
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	4804      	ldr	r0, [pc, #16]	@ (8001234 <SENSOR_IO_Read+0x38>)
 8001224:	f7ff ff5c 	bl	80010e0 <I2Cx_ReadMultiple>

  return read_value;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000028c 	.word	0x2000028c

08001238 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af02      	add	r7, sp, #8
 800123e:	603a      	str	r2, [r7, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	460b      	mov	r3, r1
 8001248:	71bb      	strb	r3, [r7, #6]
 800124a:	4613      	mov	r3, r2
 800124c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	b29a      	uxth	r2, r3
 8001252:	79f9      	ldrb	r1, [r7, #7]
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <SENSOR_IO_ReadMultiple+0x38>)
 8001260:	f7ff ff3e 	bl	80010e0 <I2Cx_ReadMultiple>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000028c 	.word	0x2000028c

08001274 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800127e:	2300      	movs	r3, #0
 8001280:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <BSP_ACCELERO_Init+0x78>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4798      	blx	r3
 8001288:	4603      	mov	r3, r0
 800128a:	2b6a      	cmp	r3, #106	@ 0x6a
 800128c:	d002      	beq.n	8001294 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e025      	b.n	80012e0 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <BSP_ACCELERO_Init+0x7c>)
 8001296:	4a15      	ldr	r2, [pc, #84]	@ (80012ec <BSP_ACCELERO_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800129a:	2330      	movs	r3, #48	@ 0x30
 800129c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80012a2:	2300      	movs	r3, #0
 80012a4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80012a6:	2340      	movs	r3, #64	@ 0x40
 80012a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80012b2:	797a      	ldrb	r2, [r7, #5]
 80012b4:	7abb      	ldrb	r3, [r7, #10]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80012bc:	7a3b      	ldrb	r3, [r7, #8]
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <BSP_ACCELERO_Init+0x7c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	89ba      	ldrh	r2, [r7, #12]
 80012dc:	4610      	mov	r0, r2
 80012de:	4798      	blx	r3
  }  

  return ret;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000060 	.word	0x20000060
 80012f0:	200002d8 	.word	0x200002d8

080012f4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	4798      	blx	r3
    }
  }
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200002d8 	.word	0x200002d8

08001324 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <BSP_HSENSOR_Init+0x38>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	20be      	movs	r0, #190	@ 0xbe
 8001330:	4798      	blx	r3
 8001332:	4603      	mov	r3, r0
 8001334:	2bbc      	cmp	r3, #188	@ 0xbc
 8001336:	d002      	beq.n	800133e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e009      	b.n	8001352 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <BSP_HSENSOR_Init+0x3c>)
 8001340:	4a06      	ldr	r2, [pc, #24]	@ (800135c <BSP_HSENSOR_Init+0x38>)
 8001342:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <BSP_HSENSOR_Init+0x3c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	20be      	movs	r0, #190	@ 0xbe
 800134c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001352:	687b      	ldr	r3, [r7, #4]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000004 	.word	0x20000004
 8001360:	200002dc 	.word	0x200002dc

08001364 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <BSP_HSENSOR_ReadHumidity+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	20be      	movs	r0, #190	@ 0xbe
 8001370:	4798      	blx	r3
 8001372:	eef0 7a40 	vmov.f32	s15, s0
}
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200002dc 	.word	0x200002dc

08001380 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <BSP_MAGNETO_Init+0x50>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4798      	blx	r3
 8001390:	4603      	mov	r3, r0
 8001392:	2b3d      	cmp	r3, #61	@ 0x3d
 8001394:	d002      	beq.n	800139c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e013      	b.n	80013c4 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <BSP_MAGNETO_Init+0x54>)
 800139e:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <BSP_MAGNETO_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80013a2:	2358      	movs	r3, #88	@ 0x58
 80013a4:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80013ae:	2308      	movs	r3, #8
 80013b0:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80013b2:	2340      	movs	r3, #64	@ 0x40
 80013b4:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <BSP_MAGNETO_Init+0x54>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	463a      	mov	r2, r7
 80013be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c2:	4798      	blx	r3
  } 

  return ret;  
 80013c4:	79fb      	ldrb	r3, [r7, #7]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000020 	.word	0x20000020
 80013d4:	200002e0 	.word	0x200002e0

080013d8 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <BSP_MAGNETO_GetXYZ+0x2c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d009      	beq.n	80013fc <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <BSP_MAGNETO_GetXYZ+0x2c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <BSP_MAGNETO_GetXYZ+0x2c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
    }
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200002e0 	.word	0x200002e0

08001408 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <BSP_PSENSOR_Init+0x38>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	20ba      	movs	r0, #186	@ 0xba
 8001414:	4798      	blx	r3
 8001416:	4603      	mov	r3, r0
 8001418:	2bb1      	cmp	r3, #177	@ 0xb1
 800141a:	d002      	beq.n	8001422 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	e009      	b.n	8001436 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <BSP_PSENSOR_Init+0x3c>)
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <BSP_PSENSOR_Init+0x38>)
 8001426:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <BSP_PSENSOR_Init+0x3c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	20ba      	movs	r0, #186	@ 0xba
 8001430:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001436:	687b      	ldr	r3, [r7, #4]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000054 	.word	0x20000054
 8001444:	200002e4 	.word	0x200002e4

08001448 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <BSP_PSENSOR_ReadPressure+0x18>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	20ba      	movs	r0, #186	@ 0xba
 8001454:	4798      	blx	r3
 8001456:	eef0 7a40 	vmov.f32	s15, s0
}
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200002e4 	.word	0x200002e4

08001464 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <BSP_TSENSOR_Init+0x30>)
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <BSP_TSENSOR_Init+0x34>)
 8001472:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001474:	f7ff fe9e 	bl	80011b4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <BSP_TSENSOR_Init+0x30>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2100      	movs	r1, #0
 8001480:	20be      	movs	r0, #190	@ 0xbe
 8001482:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001488:	79fb      	ldrb	r3, [r7, #7]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002e8 	.word	0x200002e8
 8001498:	20000010 	.word	0x20000010

0800149c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <BSP_TSENSOR_ReadTemp+0x18>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	20be      	movs	r0, #190	@ 0xbe
 80014a8:	4798      	blx	r3
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200002e8 	.word	0x200002e8

080014b8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2120      	movs	r1, #32
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe97 	bl	80011fc <SENSOR_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	f023 0303 	bic.w	r3, r3, #3
 80014e8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014f8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	2120      	movs	r1, #32
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fe60 	bl	80011c8 <SENSOR_IO_Write>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800151e:	f7ff fe49 	bl	80011b4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	210f      	movs	r1, #15
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe67 	bl	80011fc <SENSOR_IO_Read>
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b2d8      	uxtb	r0, r3
 800154a:	f107 020c 	add.w	r2, r7, #12
 800154e:	2302      	movs	r3, #2
 8001550:	21b0      	movs	r1, #176	@ 0xb0
 8001552:	f7ff fe71 	bl	8001238 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001556:	7b3b      	ldrb	r3, [r7, #12]
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800155e:	7b7b      	ldrb	r3, [r7, #13]
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	b2d8      	uxtb	r0, r3
 800156a:	f107 020c 	add.w	r2, r7, #12
 800156e:	2302      	movs	r3, #2
 8001570:	21b6      	movs	r1, #182	@ 0xb6
 8001572:	f7ff fe61 	bl	8001238 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	b21b      	sxth	r3, r3
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	b21a      	sxth	r2, r3
 800157e:	7b3b      	ldrb	r3, [r7, #12]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2d8      	uxtb	r0, r3
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	2302      	movs	r3, #2
 8001590:	21ba      	movs	r1, #186	@ 0xba
 8001592:	f7ff fe51 	bl	8001238 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	b21b      	sxth	r3, r3
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	2302      	movs	r3, #2
 80015b0:	21a8      	movs	r1, #168	@ 0xa8
 80015b2:	f7ff fe41 	bl	8001238 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80015b6:	7b7b      	ldrb	r3, [r7, #13]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21a      	sxth	r2, r3
 80015be:	7b3b      	ldrb	r3, [r7, #12]
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80015c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80015dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	ee07 3a90 	vmov	s15, r3
 80015e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015ee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80015f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001604:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001614:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001618:	edd7 7a04 	vldr	s15, [r7, #16]
 800161c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001628:	edd7 7a04 	vldr	s15, [r7, #16]
 800162c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001670 <HTS221_H_ReadHumidity+0x134>
 8001630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	dd01      	ble.n	800163e <HTS221_H_ReadHumidity+0x102>
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <HTS221_H_ReadHumidity+0x138>)
 800163c:	e00a      	b.n	8001654 <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 800163e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d502      	bpl.n	8001652 <HTS221_H_ReadHumidity+0x116>
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e000      	b.n	8001654 <HTS221_H_ReadHumidity+0x118>
 8001652:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001654:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001656:	edd7 7a04 	vldr	s15, [r7, #16]
 800165a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800165e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001662:	eef0 7a66 	vmov.f32	s15, s13
}
 8001666:	eeb0 0a67 	vmov.f32	s0, s15
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	447a0000 	.word	0x447a0000
 8001674:	447a0000 	.word	0x447a0000

08001678 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2120      	movs	r1, #32
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fdb6 	bl	80011fc <SENSOR_IO_Read>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	f023 0304 	bic.w	r3, r3, #4
 800169a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	2120      	movs	r1, #32
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fd7f 	bl	80011c8 <SENSOR_IO_Write>
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b088      	sub	sp, #32
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	b2d8      	uxtb	r0, r3
 80016e0:	f107 0208 	add.w	r2, r7, #8
 80016e4:	2302      	movs	r3, #2
 80016e6:	21b2      	movs	r1, #178	@ 0xb2
 80016e8:	f7ff fda6 	bl	8001238 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2135      	movs	r1, #53	@ 0x35
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd82 	bl	80011fc <SENSOR_IO_Read>
 80016f8:	4603      	mov	r3, r0
 80016fa:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80016fc:	7ffb      	ldrb	r3, [r7, #31]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21b      	sxth	r3, r3
 8001704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001708:	b21a      	sxth	r2, r3
 800170a:	7a3b      	ldrb	r3, [r7, #8]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	b21b      	sxth	r3, r3
 8001716:	019b      	lsls	r3, r3, #6
 8001718:	b21b      	sxth	r3, r3
 800171a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800171e:	b21a      	sxth	r2, r3
 8001720:	7a7b      	ldrb	r3, [r7, #9]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001728:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800172c:	10db      	asrs	r3, r3, #3
 800172e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001730:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001734:	10db      	asrs	r3, r3, #3
 8001736:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	f107 0208 	add.w	r2, r7, #8
 8001740:	2304      	movs	r3, #4
 8001742:	21bc      	movs	r1, #188	@ 0xbc
 8001744:	f7ff fd78 	bl	8001238 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001748:	7a7b      	ldrb	r3, [r7, #9]
 800174a:	b21b      	sxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b21a      	sxth	r2, r3
 8001750:	7a3b      	ldrb	r3, [r7, #8]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	b21b      	sxth	r3, r3
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	7abb      	ldrb	r3, [r7, #10]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	b2d8      	uxtb	r0, r3
 800176c:	f107 0208 	add.w	r2, r7, #8
 8001770:	2302      	movs	r3, #2
 8001772:	21aa      	movs	r1, #170	@ 0xaa
 8001774:	f7ff fd60 	bl	8001238 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001778:	7a7b      	ldrb	r3, [r7, #9]
 800177a:	b21b      	sxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	7a3b      	ldrb	r3, [r7, #8]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001788:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800178c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800179a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800179e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80017b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d6:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	ee07 3a90 	vmov	s15, r3
}
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	463b      	mov	r3, r7
 80017f2:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80017f6:	783b      	ldrb	r3, [r7, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	2120      	movs	r1, #32
 80017fc:	203c      	movs	r0, #60	@ 0x3c
 80017fe:	f7ff fce3 	bl	80011c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001802:	787b      	ldrb	r3, [r7, #1]
 8001804:	461a      	mov	r2, r3
 8001806:	2121      	movs	r1, #33	@ 0x21
 8001808:	203c      	movs	r0, #60	@ 0x3c
 800180a:	f7ff fcdd 	bl	80011c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800180e:	78bb      	ldrb	r3, [r7, #2]
 8001810:	461a      	mov	r2, r3
 8001812:	2122      	movs	r1, #34	@ 0x22
 8001814:	203c      	movs	r0, #60	@ 0x3c
 8001816:	f7ff fcd7 	bl	80011c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	461a      	mov	r2, r3
 800181e:	2123      	movs	r1, #35	@ 0x23
 8001820:	203c      	movs	r0, #60	@ 0x3c
 8001822:	f7ff fcd1 	bl	80011c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001826:	793b      	ldrb	r3, [r7, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	2124      	movs	r1, #36	@ 0x24
 800182c:	203c      	movs	r0, #60	@ 0x3c
 800182e:	f7ff fccb 	bl	80011c8 <SENSOR_IO_Write>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001840:	2300      	movs	r3, #0
 8001842:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001844:	2122      	movs	r1, #34	@ 0x22
 8001846:	203c      	movs	r0, #60	@ 0x3c
 8001848:	f7ff fcd8 	bl	80011fc <SENSOR_IO_Read>
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f043 0303 	orr.w	r3, r3, #3
 800185e:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	461a      	mov	r2, r3
 8001864:	2122      	movs	r1, #34	@ 0x22
 8001866:	203c      	movs	r0, #60	@ 0x3c
 8001868:	f7ff fcae 	bl	80011c8 <SENSOR_IO_Write>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001878:	f7ff fc9c 	bl	80011b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800187c:	210f      	movs	r1, #15
 800187e:	203c      	movs	r0, #60	@ 0x3c
 8001880:	f7ff fcbc 	bl	80011fc <SENSOR_IO_Read>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}

0800188a <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001898:	2122      	movs	r1, #34	@ 0x22
 800189a:	203c      	movs	r0, #60	@ 0x3c
 800189c:	f7ff fcae 	bl	80011fc <SENSOR_IO_Read>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	f023 0320 	bic.w	r3, r3, #32
 80018aa:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	461a      	mov	r2, r3
 80018be:	2122      	movs	r1, #34	@ 0x22
 80018c0:	203c      	movs	r0, #60	@ 0x3c
 80018c2:	f7ff fc81 	bl	80011c8 <SENSOR_IO_Write>
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80018e6:	2121      	movs	r1, #33	@ 0x21
 80018e8:	203c      	movs	r0, #60	@ 0x3c
 80018ea:	f7ff fc87 	bl	80011fc <SENSOR_IO_Read>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80018f2:	f107 0208 	add.w	r2, r7, #8
 80018f6:	2306      	movs	r3, #6
 80018f8:	21a8      	movs	r1, #168	@ 0xa8
 80018fa:	203c      	movs	r0, #60	@ 0x3c
 80018fc:	f7ff fc9c 	bl	8001238 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	77fb      	strb	r3, [r7, #31]
 8001904:	e01a      	b.n	800193c <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001906:	7ffb      	ldrb	r3, [r7, #31]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	3301      	adds	r3, #1
 800190c:	3320      	adds	r3, #32
 800190e:	443b      	add	r3, r7
 8001910:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b29b      	uxth	r3, r3
 8001918:	7ffa      	ldrb	r2, [r7, #31]
 800191a:	0052      	lsls	r2, r2, #1
 800191c:	3220      	adds	r2, #32
 800191e:	443a      	add	r2, r7
 8001920:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001924:	4413      	add	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	b212      	sxth	r2, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	3320      	adds	r3, #32
 8001930:	443b      	add	r3, r7
 8001932:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	3301      	adds	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
 800193c:	7ffb      	ldrb	r3, [r7, #31]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d9e1      	bls.n	8001906 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001948:	2b60      	cmp	r3, #96	@ 0x60
 800194a:	d013      	beq.n	8001974 <LIS3MDL_MagReadXYZ+0xa4>
 800194c:	2b60      	cmp	r3, #96	@ 0x60
 800194e:	dc14      	bgt.n	800197a <LIS3MDL_MagReadXYZ+0xaa>
 8001950:	2b40      	cmp	r3, #64	@ 0x40
 8001952:	d00c      	beq.n	800196e <LIS3MDL_MagReadXYZ+0x9e>
 8001954:	2b40      	cmp	r3, #64	@ 0x40
 8001956:	dc10      	bgt.n	800197a <LIS3MDL_MagReadXYZ+0xaa>
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <LIS3MDL_MagReadXYZ+0x92>
 800195c:	2b20      	cmp	r3, #32
 800195e:	d003      	beq.n	8001968 <LIS3MDL_MagReadXYZ+0x98>
 8001960:	e00b      	b.n	800197a <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <LIS3MDL_MagReadXYZ+0xf8>)
 8001964:	61bb      	str	r3, [r7, #24]
    break;
 8001966:	e008      	b.n	800197a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <LIS3MDL_MagReadXYZ+0xfc>)
 800196a:	61bb      	str	r3, [r7, #24]
    break;
 800196c:	e005      	b.n	800197a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800196e:	4b18      	ldr	r3, [pc, #96]	@ (80019d0 <LIS3MDL_MagReadXYZ+0x100>)
 8001970:	61bb      	str	r3, [r7, #24]
    break;
 8001972:	e002      	b.n	800197a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <LIS3MDL_MagReadXYZ+0x104>)
 8001976:	61bb      	str	r3, [r7, #24]
    break;    
 8001978:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	77fb      	strb	r3, [r7, #31]
 800197e:	e01a      	b.n	80019b6 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001980:	7ffb      	ldrb	r3, [r7, #31]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	3320      	adds	r3, #32
 8001986:	443b      	add	r3, r7
 8001988:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	edd7 7a06 	vldr	s15, [r7, #24]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a8:	ee17 2a90 	vmov	r2, s15
 80019ac:	b212      	sxth	r2, r2
 80019ae:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	3301      	adds	r3, #1
 80019b4:	77fb      	strb	r3, [r7, #31]
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d9e1      	bls.n	8001980 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	3e0f5c29 	.word	0x3e0f5c29
 80019cc:	3e947ae1 	.word	0x3e947ae1
 80019d0:	3edc28f6 	.word	0x3edc28f6
 80019d4:	3f147ae1 	.word	0x3f147ae1

080019d8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f879 	bl	8001adc <LPS22HB_Init>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001a00:	f7ff fbd8 	bl	80011b4 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	210f      	movs	r1, #15
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fbf6 	bl	80011fc <SENSOR_IO_Read>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	74fb      	strb	r3, [r7, #19]
 8001a32:	e013      	b.n	8001a5c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	7cfb      	ldrb	r3, [r7, #19]
 8001a3a:	3328      	adds	r3, #40	@ 0x28
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	7cfc      	ldrb	r4, [r7, #19]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7ff fbda 	bl	80011fc <SENSOR_IO_Read>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f104 0318 	add.w	r3, r4, #24
 8001a50:	443b      	add	r3, r7
 8001a52:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001a56:	7cfb      	ldrb	r3, [r7, #19]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	74fb      	strb	r3, [r7, #19]
 8001a5c:	7cfb      	ldrb	r3, [r7, #19]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d9e8      	bls.n	8001a34 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	74fb      	strb	r3, [r7, #19]
 8001a66:	e00f      	b.n	8001a88 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001a68:	7cfb      	ldrb	r3, [r7, #19]
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a72:	461a      	mov	r2, r3
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001a82:	7cfb      	ldrb	r3, [r7, #19]
 8001a84:	3301      	adds	r3, #1
 8001a86:	74fb      	strb	r3, [r7, #19]
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d9ec      	bls.n	8001a68 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001a9e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2264      	movs	r2, #100	@ 0x64
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da01      	bge.n	8001ab4 <LPS22HB_P_ReadPressure+0x94>
 8001ab0:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001ab4:	131b      	asrs	r3, r3, #12
 8001ab6:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001ad8 <LPS22HB_P_ReadPressure+0xb8>
 8001ac6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001aca:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ace:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	42c80000 	.word	0x42c80000

08001adc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	211a      	movs	r1, #26
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fb85 	bl	80011fc <SENSOR_IO_Read>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	211a      	movs	r1, #26
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fb5a 	bl	80011c8 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2110      	movs	r1, #16
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fb6e 	bl	80011fc <SENSOR_IO_Read>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b2a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001b32:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	f023 0302 	bic.w	r3, r3, #2
 8001b3a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fb3b 	bl	80011c8 <SENSOR_IO_Write>
}  
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001b68:	2110      	movs	r1, #16
 8001b6a:	20d4      	movs	r0, #212	@ 0xd4
 8001b6c:	f7ff fb46 	bl	80011fc <SENSOR_IO_Read>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001b78:	7bbb      	ldrb	r3, [r7, #14]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001b80:	7bba      	ldrb	r2, [r7, #14]
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001b88:	7bbb      	ldrb	r3, [r7, #14]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	20d4      	movs	r0, #212	@ 0xd4
 8001b90:	f7ff fb1a 	bl	80011c8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001b94:	2112      	movs	r1, #18
 8001b96:	20d4      	movs	r0, #212	@ 0xd4
 8001b98:	f7ff fb30 	bl	80011fc <SENSOR_IO_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001bae:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001bb0:	7bba      	ldrb	r2, [r7, #14]
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001bb8:	7bbb      	ldrb	r3, [r7, #14]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2112      	movs	r1, #18
 8001bbe:	20d4      	movs	r0, #212	@ 0xd4
 8001bc0:	f7ff fb02 	bl	80011c8 <SENSOR_IO_Write>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	20d4      	movs	r0, #212	@ 0xd4
 8001bda:	f7ff fb0f 	bl	80011fc <SENSOR_IO_Read>
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2110      	movs	r1, #16
 8001bf0:	20d4      	movs	r0, #212	@ 0xd4
 8001bf2:	f7ff fae9 	bl	80011c8 <SENSOR_IO_Write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001c02:	f7ff fad7 	bl	80011b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001c06:	210f      	movs	r1, #15
 8001c08:	20d4      	movs	r0, #212	@ 0xd4
 8001c0a:	f7ff faf7 	bl	80011fc <SENSOR_IO_Read>
 8001c0e:	4603      	mov	r3, r0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001c22:	2115      	movs	r1, #21
 8001c24:	20d4      	movs	r0, #212	@ 0xd4
 8001c26:	f7ff fae9 	bl	80011fc <SENSOR_IO_Read>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	f023 0310 	bic.w	r3, r3, #16
 8001c34:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	461a      	mov	r2, r3
 8001c48:	2115      	movs	r1, #21
 8001c4a:	20d4      	movs	r0, #212	@ 0xd4
 8001c4c:	f7ff fabc 	bl	80011c8 <SENSOR_IO_Write>
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001c6e:	2110      	movs	r1, #16
 8001c70:	20d4      	movs	r0, #212	@ 0xd4
 8001c72:	f7ff fac3 	bl	80011fc <SENSOR_IO_Read>
 8001c76:	4603      	mov	r3, r0
 8001c78:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001c7a:	f107 0208 	add.w	r2, r7, #8
 8001c7e:	2306      	movs	r3, #6
 8001c80:	2128      	movs	r1, #40	@ 0x28
 8001c82:	20d4      	movs	r0, #212	@ 0xd4
 8001c84:	f7ff fad8 	bl	8001238 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e01a      	b.n	8001cc4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3301      	adds	r3, #1
 8001c94:	3320      	adds	r3, #32
 8001c96:	443b      	add	r3, r7
 8001c98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	7ffa      	ldrb	r2, [r7, #31]
 8001ca2:	0052      	lsls	r2, r2, #1
 8001ca4:	3220      	adds	r2, #32
 8001ca6:	443a      	add	r2, r7
 8001ca8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	b212      	sxth	r2, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	3320      	adds	r3, #32
 8001cb8:	443b      	add	r3, r7
 8001cba:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	77fb      	strb	r3, [r7, #31]
 8001cc4:	7ffb      	ldrb	r3, [r7, #31]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d9e1      	bls.n	8001c8e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001cca:	7dfb      	ldrb	r3, [r7, #23]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	d829      	bhi.n	8001d28 <LSM6DSL_AccReadXYZ+0xd0>
 8001cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cdc <LSM6DSL_AccReadXYZ+0x84>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001d11 	.word	0x08001d11
 8001ce0:	08001d29 	.word	0x08001d29
 8001ce4:	08001d29 	.word	0x08001d29
 8001ce8:	08001d29 	.word	0x08001d29
 8001cec:	08001d23 	.word	0x08001d23
 8001cf0:	08001d29 	.word	0x08001d29
 8001cf4:	08001d29 	.word	0x08001d29
 8001cf8:	08001d29 	.word	0x08001d29
 8001cfc:	08001d17 	.word	0x08001d17
 8001d00:	08001d29 	.word	0x08001d29
 8001d04:	08001d29 	.word	0x08001d29
 8001d08:	08001d29 	.word	0x08001d29
 8001d0c:	08001d1d 	.word	0x08001d1d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001d10:	4b18      	ldr	r3, [pc, #96]	@ (8001d74 <LSM6DSL_AccReadXYZ+0x11c>)
 8001d12:	61bb      	str	r3, [r7, #24]
    break;
 8001d14:	e008      	b.n	8001d28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <LSM6DSL_AccReadXYZ+0x120>)
 8001d18:	61bb      	str	r3, [r7, #24]
    break;
 8001d1a:	e005      	b.n	8001d28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <LSM6DSL_AccReadXYZ+0x124>)
 8001d1e:	61bb      	str	r3, [r7, #24]
    break;
 8001d20:	e002      	b.n	8001d28 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <LSM6DSL_AccReadXYZ+0x128>)
 8001d24:	61bb      	str	r3, [r7, #24]
    break;    
 8001d26:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	77fb      	strb	r3, [r7, #31]
 8001d2c:	e01a      	b.n	8001d64 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	3320      	adds	r3, #32
 8001d34:	443b      	add	r3, r7
 8001d36:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d56:	ee17 2a90 	vmov	r2, s15
 8001d5a:	b212      	sxth	r2, r2
 8001d5c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
 8001d60:	3301      	adds	r3, #1
 8001d62:	77fb      	strb	r3, [r7, #31]
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d9e1      	bls.n	8001d2e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	3d79db23 	.word	0x3d79db23
 8001d78:	3df9db23 	.word	0x3df9db23
 8001d7c:	3e79db23 	.word	0x3e79db23
 8001d80:	3ef9db23 	.word	0x3ef9db23

08001d84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 f95a 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 f80d 	bl	8001db4 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	e001      	b.n	8001daa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da6:	f7fe ffd3 	bl	8000d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <HAL_InitTick+0x68>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d022      	beq.n	8001e0e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_InitTick+0x6c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b13      	ldr	r3, [pc, #76]	@ (8001e1c <HAL_InitTick+0x68>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f968 	bl	80020b2 <HAL_SYSTICK_Config>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10f      	bne.n	8001e08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	d809      	bhi.n	8001e02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dee:	2200      	movs	r2, #0
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	f000 f932 	bl	800205e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_InitTick+0x70>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e007      	b.n	8001e12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e004      	b.n	8001e12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000098 	.word	0x20000098
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000094 	.word	0x20000094

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_IncTick+0x1c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a03      	ldr	r2, [pc, #12]	@ (8001e44 <HAL_IncTick+0x1c>)
 8001e38:	6013      	str	r3, [r2, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	200002ec 	.word	0x200002ec
 8001e48:	20000098 	.word	0x20000098

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	@ (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200002ec 	.word	0x200002ec

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d004      	beq.n	8001e88 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <HAL_Delay+0x40>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e88:	bf00      	nop
 8001e8a:	f7ff ffdf 	bl	8001e4c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d8f7      	bhi.n	8001e8a <HAL_Delay+0x26>
  {
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000098 	.word	0x20000098

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	@ (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff29 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff3e 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff31 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020da:	e17f      	b.n	80023dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8171 	beq.w	80023d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d00b      	beq.n	8002114 <HAL_GPIO_Init+0x48>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002108:	2b11      	cmp	r3, #17
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214a:	2201      	movs	r2, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 0201 	and.w	r2, r3, #1
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b03      	cmp	r3, #3
 8002180:	d118      	bne.n	80021b4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002188:	2201      	movs	r2, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	f003 0201 	and.w	r2, r3, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x128>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b12      	cmp	r3, #18
 80021f2:	d123      	bne.n	800223c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	220f      	movs	r2, #15
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	6939      	ldr	r1, [r7, #16]
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80ac 	beq.w	80023d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227e:	4b5f      	ldr	r3, [pc, #380]	@ (80023fc <HAL_GPIO_Init+0x330>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002282:	4a5e      	ldr	r2, [pc, #376]	@ (80023fc <HAL_GPIO_Init+0x330>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6613      	str	r3, [r2, #96]	@ 0x60
 800228a:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <HAL_GPIO_Init+0x330>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002296:	4a5a      	ldr	r2, [pc, #360]	@ (8002400 <HAL_GPIO_Init+0x334>)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022c0:	d025      	beq.n	800230e <HAL_GPIO_Init+0x242>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002404 <HAL_GPIO_Init+0x338>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d01f      	beq.n	800230a <HAL_GPIO_Init+0x23e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002408 <HAL_GPIO_Init+0x33c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d019      	beq.n	8002306 <HAL_GPIO_Init+0x23a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4d      	ldr	r2, [pc, #308]	@ (800240c <HAL_GPIO_Init+0x340>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0x236>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002410 <HAL_GPIO_Init+0x344>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00d      	beq.n	80022fe <HAL_GPIO_Init+0x232>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002414 <HAL_GPIO_Init+0x348>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <HAL_GPIO_Init+0x22e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002418 <HAL_GPIO_Init+0x34c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_GPIO_Init+0x22a>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e00c      	b.n	8002310 <HAL_GPIO_Init+0x244>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e00a      	b.n	8002310 <HAL_GPIO_Init+0x244>
 80022fa:	2305      	movs	r3, #5
 80022fc:	e008      	b.n	8002310 <HAL_GPIO_Init+0x244>
 80022fe:	2304      	movs	r3, #4
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x244>
 8002302:	2303      	movs	r3, #3
 8002304:	e004      	b.n	8002310 <HAL_GPIO_Init+0x244>
 8002306:	2302      	movs	r3, #2
 8002308:	e002      	b.n	8002310 <HAL_GPIO_Init+0x244>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x244>
 800230e:	2300      	movs	r3, #0
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	f002 0203 	and.w	r2, r2, #3
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	4093      	lsls	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002320:	4937      	ldr	r1, [pc, #220]	@ (8002400 <HAL_GPIO_Init+0x334>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	089b      	lsrs	r3, r3, #2
 8002326:	3302      	adds	r3, #2
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800232e:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <HAL_GPIO_Init+0x350>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002352:	4a32      	ldr	r2, [pc, #200]	@ (800241c <HAL_GPIO_Init+0x350>)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002358:	4b30      	ldr	r3, [pc, #192]	@ (800241c <HAL_GPIO_Init+0x350>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800237c:	4a27      	ldr	r2, [pc, #156]	@ (800241c <HAL_GPIO_Init+0x350>)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002382:	4b26      	ldr	r3, [pc, #152]	@ (800241c <HAL_GPIO_Init+0x350>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	43db      	mvns	r3, r3
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023a6:	4a1d      	ldr	r2, [pc, #116]	@ (800241c <HAL_GPIO_Init+0x350>)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_GPIO_Init+0x350>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d0:	4a12      	ldr	r2, [pc, #72]	@ (800241c <HAL_GPIO_Init+0x350>)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f ae78 	bne.w	80020dc <HAL_GPIO_Init+0x10>
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	48000400 	.word	0x48000400
 8002408:	48000800 	.word	0x48000800
 800240c:	48000c00 	.word	0x48000c00
 8002410:	48001000 	.word	0x48001000
 8002414:	48001400 	.word	0x48001400
 8002418:	48001800 	.word	0x48001800
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800242e:	e0cd      	b.n	80025cc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002430:	2201      	movs	r2, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80c0 	beq.w	80025c6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002446:	4a68      	ldr	r2, [pc, #416]	@ (80025e8 <HAL_GPIO_DeInit+0x1c8>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800246e:	d025      	beq.n	80024bc <HAL_GPIO_DeInit+0x9c>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a5e      	ldr	r2, [pc, #376]	@ (80025ec <HAL_GPIO_DeInit+0x1cc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01f      	beq.n	80024b8 <HAL_GPIO_DeInit+0x98>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_GPIO_DeInit+0x1d0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d019      	beq.n	80024b4 <HAL_GPIO_DeInit+0x94>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a5c      	ldr	r2, [pc, #368]	@ (80025f4 <HAL_GPIO_DeInit+0x1d4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_DeInit+0x90>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a5b      	ldr	r2, [pc, #364]	@ (80025f8 <HAL_GPIO_DeInit+0x1d8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_DeInit+0x8c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a5a      	ldr	r2, [pc, #360]	@ (80025fc <HAL_GPIO_DeInit+0x1dc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_DeInit+0x88>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a59      	ldr	r2, [pc, #356]	@ (8002600 <HAL_GPIO_DeInit+0x1e0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_DeInit+0x84>
 80024a0:	2306      	movs	r3, #6
 80024a2:	e00c      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024a4:	2307      	movs	r3, #7
 80024a6:	e00a      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024a8:	2305      	movs	r3, #5
 80024aa:	e008      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e006      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e004      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_DeInit+0x9e>
 80024bc:	2300      	movs	r3, #0
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d132      	bne.n	8002534 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80024ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	494b      	ldr	r1, [pc, #300]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024d8:	4013      	ands	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80024dc:	4b49      	ldr	r3, [pc, #292]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	4947      	ldr	r1, [pc, #284]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80024ea:	4b46      	ldr	r3, [pc, #280]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4944      	ldr	r1, [pc, #272]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80024f8:	4b42      	ldr	r3, [pc, #264]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	4940      	ldr	r1, [pc, #256]	@ (8002604 <HAL_GPIO_DeInit+0x1e4>)
 8002502:	4013      	ands	r3, r2
 8002504:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002516:	4a34      	ldr	r2, [pc, #208]	@ (80025e8 <HAL_GPIO_DeInit+0x1c8>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43da      	mvns	r2, r3
 8002526:	4830      	ldr	r0, [pc, #192]	@ (80025e8 <HAL_GPIO_DeInit+0x1c8>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	400a      	ands	r2, r1
 800252e:	3302      	adds	r3, #2
 8002530:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2103      	movs	r1, #3
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	08d2      	lsrs	r2, r2, #3
 8002568:	4019      	ands	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2103      	movs	r1, #3
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	401a      	ands	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	2101      	movs	r1, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	401a      	ands	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2103      	movs	r1, #3
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b6:	2101      	movs	r1, #1
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	401a      	ands	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f af2b 	bne.w	8002430 <HAL_GPIO_DeInit+0x10>
  }
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40010000 	.word	0x40010000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	48000800 	.word	0x48000800
 80025f4:	48000c00 	.word	0x48000c00
 80025f8:	48001000 	.word	0x48001000
 80025fc:	48001400 	.word	0x48001400
 8002600:	48001800 	.word	0x48001800
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800261e:	4a05      	ldr	r2, [pc, #20]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f806 	bl	8002638 <HAL_GPIO_EXTI_Callback>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e081      	b.n	8002764 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d106      	bne.n	800267a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe fb8f 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2224      	movs	r2, #36	@ 0x24
 800267e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800269e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	e006      	b.n	80026d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d104      	bne.n	80026e8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	ea42 0103 	orr.w	r1, r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69d9      	ldr	r1, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1a      	ldr	r2, [r3, #32]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e021      	b.n	80027c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2224      	movs	r2, #36	@ 0x24
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fb42 	bl	8000e20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	460b      	mov	r3, r1
 80027e0:	813b      	strh	r3, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	f040 80f9 	bne.w	80029e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <HAL_I2C_Mem_Write+0x34>
 80027fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002806:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0ed      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_I2C_Mem_Write+0x4e>
 8002816:	2302      	movs	r3, #2
 8002818:	e0e6      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002822:	f7ff fb13 	bl	8001e4c <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fac3 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0d1      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2221      	movs	r2, #33	@ 0x21
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800286c:	88f8      	ldrh	r0, [r7, #6]
 800286e:	893a      	ldrh	r2, [r7, #8]
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4603      	mov	r3, r0
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f9d3 	bl	8002c28 <I2C_RequestMemoryWrite>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0a9      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2bff      	cmp	r3, #255	@ 0xff
 800289c:	d90e      	bls.n	80028bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	22ff      	movs	r2, #255	@ 0xff
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fba5 	bl	8003004 <I2C_TransferConfig>
 80028ba:	e00f      	b.n	80028dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	2300      	movs	r3, #0
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fb94 	bl	8003004 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 faad 	bl	8002e40 <I2C_WaitOnTXISFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e07b      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d034      	beq.n	8002994 <HAL_I2C_Mem_Write+0x1c8>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292e:	2b00      	cmp	r3, #0
 8002930:	d130      	bne.n	8002994 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002938:	2200      	movs	r2, #0
 800293a:	2180      	movs	r1, #128	@ 0x80
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fa3f 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04d      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	2bff      	cmp	r3, #255	@ 0xff
 8002954:	d90e      	bls.n	8002974 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	22ff      	movs	r2, #255	@ 0xff
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	b2da      	uxtb	r2, r3
 8002962:	8979      	ldrh	r1, [r7, #10]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fb49 	bl	8003004 <I2C_TransferConfig>
 8002972:	e00f      	b.n	8002994 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	b2da      	uxtb	r2, r3
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	2300      	movs	r3, #0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fb38 	bl	8003004 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d19e      	bne.n	80028dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa8c 	bl	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e01a      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2220      	movs	r2, #32
 80029b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_I2C_Mem_Write+0x224>)
 80029c6:	400b      	ands	r3, r1
 80029c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
  }
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	fe00e800 	.word	0xfe00e800

080029f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	4608      	mov	r0, r1
 80029fe:	4611      	mov	r1, r2
 8002a00:	461a      	mov	r2, r3
 8002a02:	4603      	mov	r3, r0
 8002a04:	817b      	strh	r3, [r7, #10]
 8002a06:	460b      	mov	r3, r1
 8002a08:	813b      	strh	r3, [r7, #8]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	f040 80fd 	bne.w	8002c16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_I2C_Mem_Read+0x34>
 8002a22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0f1      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x4e>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0ea      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a4a:	f7ff f9ff 	bl	8001e4c <HAL_GetTick>
 8002a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2319      	movs	r3, #25
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f9af 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d5      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2222      	movs	r2, #34	@ 0x22
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a3a      	ldr	r2, [r7, #32]
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a94:	88f8      	ldrh	r0, [r7, #6]
 8002a96:	893a      	ldrh	r2, [r7, #8]
 8002a98:	8979      	ldrh	r1, [r7, #10]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f913 	bl	8002cd0 <I2C_RequestMemoryRead>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0ad      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2bff      	cmp	r3, #255	@ 0xff
 8002ac4:	d90e      	bls.n	8002ae4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	@ 0xff
 8002aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	4b52      	ldr	r3, [pc, #328]	@ (8002c20 <HAL_I2C_Mem_Read+0x22c>)
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fa91 	bl	8003004 <I2C_TransferConfig>
 8002ae2:	e00f      	b.n	8002b04 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <HAL_I2C_Mem_Read+0x22c>)
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fa80 	bl	8003004 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2104      	movs	r1, #4
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f956 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07c      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d034      	beq.n	8002bc4 <HAL_I2C_Mem_Read+0x1d0>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d130      	bne.n	8002bc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2180      	movs	r1, #128	@ 0x80
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f927 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e04d      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2bff      	cmp	r3, #255	@ 0xff
 8002b84:	d90e      	bls.n	8002ba4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	22ff      	movs	r2, #255	@ 0xff
 8002b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	8979      	ldrh	r1, [r7, #10]
 8002b94:	2300      	movs	r3, #0
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fa31 	bl	8003004 <I2C_TransferConfig>
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	8979      	ldrh	r1, [r7, #10]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 fa20 	bl	8003004 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d19a      	bne.n	8002b04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f974 	bl	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e01a      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2220      	movs	r2, #32
 8002be8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_I2C_Mem_Read+0x230>)
 8002bf6:	400b      	ands	r3, r1
 8002bf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	80002400 	.word	0x80002400
 8002c24:	fe00e800 	.word	0xfe00e800

08002c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	813b      	strh	r3, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <I2C_RequestMemoryWrite+0xa4>)
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9d7 	bl	8003004 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8f0 	bl	8002e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02c      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c70:	893b      	ldrh	r3, [r7, #8]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c7a:	e015      	b.n	8002ca8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8d6 	bl	8002e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e012      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c9e:	893b      	ldrh	r3, [r7, #8]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2180      	movs	r1, #128	@ 0x80
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f884 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	80002000 	.word	0x80002000

08002cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <I2C_RequestMemoryRead+0xa4>)
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f984 	bl	8003004 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f89d 	bl	8002e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e02c      	b.n	8002d6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d105      	bne.n	8002d22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d16:	893b      	ldrh	r3, [r7, #8]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d20:	e015      	b.n	8002d4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d22:	893b      	ldrh	r3, [r7, #8]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f883 	bl	8002e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e012      	b.n	8002d6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d44:	893b      	ldrh	r3, [r7, #8]
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2140      	movs	r1, #64	@ 0x40
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f831 	bl	8002dc0 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	80002000 	.word	0x80002000

08002d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d007      	beq.n	8002db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	619a      	str	r2, [r3, #24]
  }
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd0:	e022      	b.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d01e      	beq.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7ff f837 	bl	8001e4c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d113      	bne.n	8002e18 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df4:	f043 0220 	orr.w	r2, r3, #32
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e00f      	b.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d0cd      	beq.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e4c:	e02c      	b.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f870 	bl	8002f38 <I2C_IsAcknowledgeFailed>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e02a      	b.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d01e      	beq.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe ffef 	bl	8001e4c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d113      	bne.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e007      	b.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d1cb      	bne.n	8002e4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ecc:	e028      	b.n	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f830 	bl	8002f38 <I2C_IsAcknowledgeFailed>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e026      	b.n	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fe ffb3 	bl	8001e4c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d113      	bne.n	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d1cf      	bne.n	8002ece <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d151      	bne.n	8002ff6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f52:	e022      	b.n	8002f9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5a:	d01e      	beq.n	8002f9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5c:	f7fe ff76 	bl	8001e4c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d302      	bcc.n	8002f72 <I2C_IsAcknowledgeFailed+0x3a>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d113      	bne.n	8002f9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e02e      	b.n	8002ff8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d1d5      	bne.n	8002f54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2210      	movs	r2, #16
 8002fae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff fedd 	bl	8002d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <I2C_IsAcknowledgeFailed+0xc8>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	fe00e800 	.word	0xfe00e800

08003004 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	4613      	mov	r3, r2
 8003014:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	0d5b      	lsrs	r3, r3, #21
 8003020:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003024:	4b0d      	ldr	r3, [pc, #52]	@ (800305c <I2C_TransferConfig+0x58>)
 8003026:	430b      	orrs	r3, r1
 8003028:	43db      	mvns	r3, r3
 800302a:	ea02 0103 	and.w	r1, r2, r3
 800302e:	897b      	ldrh	r3, [r7, #10]
 8003030:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003034:	7a7b      	ldrb	r3, [r7, #9]
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	431a      	orrs	r2, r3
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	03ff63ff 	.word	0x03ff63ff

08003060 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	d138      	bne.n	80030e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003080:	2302      	movs	r3, #2
 8003082:	e032      	b.n	80030ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	@ 0x24
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <findslot>:
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <findslot+0x2c>)
 80030fa:	b510      	push	{r4, lr}
 80030fc:	4604      	mov	r4, r0
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	b118      	cbz	r0, 800310a <findslot+0x12>
 8003102:	6a03      	ldr	r3, [r0, #32]
 8003104:	b90b      	cbnz	r3, 800310a <findslot+0x12>
 8003106:	f000 ff99 	bl	800403c <__sinit>
 800310a:	2c13      	cmp	r4, #19
 800310c:	d807      	bhi.n	800311e <findslot+0x26>
 800310e:	4806      	ldr	r0, [pc, #24]	@ (8003128 <findslot+0x30>)
 8003110:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003114:	3201      	adds	r2, #1
 8003116:	d002      	beq.n	800311e <findslot+0x26>
 8003118:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800311c:	bd10      	pop	{r4, pc}
 800311e:	2000      	movs	r0, #0
 8003120:	e7fc      	b.n	800311c <findslot+0x24>
 8003122:	bf00      	nop
 8003124:	200000b4 	.word	0x200000b4
 8003128:	20000300 	.word	0x20000300

0800312c <error>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	4604      	mov	r4, r0
 8003130:	f001 f8f6 	bl	8004320 <__errno>
 8003134:	2613      	movs	r6, #19
 8003136:	4605      	mov	r5, r0
 8003138:	2700      	movs	r7, #0
 800313a:	4630      	mov	r0, r6
 800313c:	4639      	mov	r1, r7
 800313e:	beab      	bkpt	0x00ab
 8003140:	4606      	mov	r6, r0
 8003142:	602e      	str	r6, [r5, #0]
 8003144:	4620      	mov	r0, r4
 8003146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003148 <checkerror>:
 8003148:	1c43      	adds	r3, r0, #1
 800314a:	d101      	bne.n	8003150 <checkerror+0x8>
 800314c:	f7ff bfee 	b.w	800312c <error>
 8003150:	4770      	bx	lr

08003152 <_swiread>:
 8003152:	b530      	push	{r4, r5, lr}
 8003154:	b085      	sub	sp, #20
 8003156:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800315a:	9203      	str	r2, [sp, #12]
 800315c:	2406      	movs	r4, #6
 800315e:	ad01      	add	r5, sp, #4
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	beab      	bkpt	0x00ab
 8003166:	4604      	mov	r4, r0
 8003168:	4620      	mov	r0, r4
 800316a:	f7ff ffed 	bl	8003148 <checkerror>
 800316e:	b005      	add	sp, #20
 8003170:	bd30      	pop	{r4, r5, pc}

08003172 <_read>:
 8003172:	b570      	push	{r4, r5, r6, lr}
 8003174:	460e      	mov	r6, r1
 8003176:	4614      	mov	r4, r2
 8003178:	f7ff ffbe 	bl	80030f8 <findslot>
 800317c:	4605      	mov	r5, r0
 800317e:	b930      	cbnz	r0, 800318e <_read+0x1c>
 8003180:	f001 f8ce 	bl	8004320 <__errno>
 8003184:	2309      	movs	r3, #9
 8003186:	6003      	str	r3, [r0, #0]
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	bd70      	pop	{r4, r5, r6, pc}
 800318e:	6800      	ldr	r0, [r0, #0]
 8003190:	4622      	mov	r2, r4
 8003192:	4631      	mov	r1, r6
 8003194:	f7ff ffdd 	bl	8003152 <_swiread>
 8003198:	1c43      	adds	r3, r0, #1
 800319a:	d0f5      	beq.n	8003188 <_read+0x16>
 800319c:	686b      	ldr	r3, [r5, #4]
 800319e:	1a20      	subs	r0, r4, r0
 80031a0:	4403      	add	r3, r0
 80031a2:	606b      	str	r3, [r5, #4]
 80031a4:	e7f2      	b.n	800318c <_read+0x1a>

080031a6 <_swilseek>:
 80031a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031a8:	460c      	mov	r4, r1
 80031aa:	4616      	mov	r6, r2
 80031ac:	f7ff ffa4 	bl	80030f8 <findslot>
 80031b0:	4605      	mov	r5, r0
 80031b2:	b940      	cbnz	r0, 80031c6 <_swilseek+0x20>
 80031b4:	f001 f8b4 	bl	8004320 <__errno>
 80031b8:	2309      	movs	r3, #9
 80031ba:	6003      	str	r3, [r0, #0]
 80031bc:	f04f 34ff 	mov.w	r4, #4294967295
 80031c0:	4620      	mov	r0, r4
 80031c2:	b003      	add	sp, #12
 80031c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c6:	2e02      	cmp	r6, #2
 80031c8:	d903      	bls.n	80031d2 <_swilseek+0x2c>
 80031ca:	f001 f8a9 	bl	8004320 <__errno>
 80031ce:	2316      	movs	r3, #22
 80031d0:	e7f3      	b.n	80031ba <_swilseek+0x14>
 80031d2:	2e01      	cmp	r6, #1
 80031d4:	d112      	bne.n	80031fc <_swilseek+0x56>
 80031d6:	6843      	ldr	r3, [r0, #4]
 80031d8:	18e4      	adds	r4, r4, r3
 80031da:	d4f6      	bmi.n	80031ca <_swilseek+0x24>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	260a      	movs	r6, #10
 80031e0:	e9cd 3400 	strd	r3, r4, [sp]
 80031e4:	466f      	mov	r7, sp
 80031e6:	4630      	mov	r0, r6
 80031e8:	4639      	mov	r1, r7
 80031ea:	beab      	bkpt	0x00ab
 80031ec:	4606      	mov	r6, r0
 80031ee:	4630      	mov	r0, r6
 80031f0:	f7ff ffaa 	bl	8003148 <checkerror>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	dbe1      	blt.n	80031bc <_swilseek+0x16>
 80031f8:	606c      	str	r4, [r5, #4]
 80031fa:	e7e1      	b.n	80031c0 <_swilseek+0x1a>
 80031fc:	2e02      	cmp	r6, #2
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	d1ec      	bne.n	80031dc <_swilseek+0x36>
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	260c      	movs	r6, #12
 8003206:	466f      	mov	r7, sp
 8003208:	4630      	mov	r0, r6
 800320a:	4639      	mov	r1, r7
 800320c:	beab      	bkpt	0x00ab
 800320e:	4606      	mov	r6, r0
 8003210:	4630      	mov	r0, r6
 8003212:	f7ff ff99 	bl	8003148 <checkerror>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d0d0      	beq.n	80031bc <_swilseek+0x16>
 800321a:	4404      	add	r4, r0
 800321c:	e7de      	b.n	80031dc <_swilseek+0x36>

0800321e <_lseek>:
 800321e:	f7ff bfc2 	b.w	80031a6 <_swilseek>

08003222 <_swiwrite>:
 8003222:	b530      	push	{r4, r5, lr}
 8003224:	b085      	sub	sp, #20
 8003226:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800322a:	9203      	str	r2, [sp, #12]
 800322c:	2405      	movs	r4, #5
 800322e:	ad01      	add	r5, sp, #4
 8003230:	4620      	mov	r0, r4
 8003232:	4629      	mov	r1, r5
 8003234:	beab      	bkpt	0x00ab
 8003236:	4604      	mov	r4, r0
 8003238:	4620      	mov	r0, r4
 800323a:	f7ff ff85 	bl	8003148 <checkerror>
 800323e:	b005      	add	sp, #20
 8003240:	bd30      	pop	{r4, r5, pc}

08003242 <_write>:
 8003242:	b570      	push	{r4, r5, r6, lr}
 8003244:	460e      	mov	r6, r1
 8003246:	4615      	mov	r5, r2
 8003248:	f7ff ff56 	bl	80030f8 <findslot>
 800324c:	4604      	mov	r4, r0
 800324e:	b930      	cbnz	r0, 800325e <_write+0x1c>
 8003250:	f001 f866 	bl	8004320 <__errno>
 8003254:	2309      	movs	r3, #9
 8003256:	6003      	str	r3, [r0, #0]
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	bd70      	pop	{r4, r5, r6, pc}
 800325e:	6800      	ldr	r0, [r0, #0]
 8003260:	462a      	mov	r2, r5
 8003262:	4631      	mov	r1, r6
 8003264:	f7ff ffdd 	bl	8003222 <_swiwrite>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	dbf5      	blt.n	8003258 <_write+0x16>
 800326c:	6862      	ldr	r2, [r4, #4]
 800326e:	1ae8      	subs	r0, r5, r3
 8003270:	4402      	add	r2, r0
 8003272:	42ab      	cmp	r3, r5
 8003274:	6062      	str	r2, [r4, #4]
 8003276:	d1f1      	bne.n	800325c <_write+0x1a>
 8003278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800327c:	2000      	movs	r0, #0
 800327e:	f7ff bf55 	b.w	800312c <error>

08003282 <_swiclose>:
 8003282:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003284:	2402      	movs	r4, #2
 8003286:	9001      	str	r0, [sp, #4]
 8003288:	ad01      	add	r5, sp, #4
 800328a:	4620      	mov	r0, r4
 800328c:	4629      	mov	r1, r5
 800328e:	beab      	bkpt	0x00ab
 8003290:	4604      	mov	r4, r0
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff ff58 	bl	8003148 <checkerror>
 8003298:	b003      	add	sp, #12
 800329a:	bd30      	pop	{r4, r5, pc}

0800329c <_close>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4605      	mov	r5, r0
 80032a0:	f7ff ff2a 	bl	80030f8 <findslot>
 80032a4:	4604      	mov	r4, r0
 80032a6:	b930      	cbnz	r0, 80032b6 <_close+0x1a>
 80032a8:	f001 f83a 	bl	8004320 <__errno>
 80032ac:	2309      	movs	r3, #9
 80032ae:	6003      	str	r3, [r0, #0]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	bd38      	pop	{r3, r4, r5, pc}
 80032b6:	3d01      	subs	r5, #1
 80032b8:	2d01      	cmp	r5, #1
 80032ba:	d809      	bhi.n	80032d0 <_close+0x34>
 80032bc:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <_close+0x48>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d104      	bne.n	80032d0 <_close+0x34>
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	6003      	str	r3, [r0, #0]
 80032cc:	2000      	movs	r0, #0
 80032ce:	e7f1      	b.n	80032b4 <_close+0x18>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	f7ff ffd6 	bl	8003282 <_swiclose>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d1ec      	bne.n	80032b4 <_close+0x18>
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	e7e8      	b.n	80032b4 <_close+0x18>
 80032e2:	bf00      	nop
 80032e4:	20000300 	.word	0x20000300

080032e8 <_getpid>:
 80032e8:	2001      	movs	r0, #1
 80032ea:	4770      	bx	lr

080032ec <_sbrk>:
 80032ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <_sbrk+0x38>)
 80032ee:	6811      	ldr	r1, [r2, #0]
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4603      	mov	r3, r0
 80032f4:	b909      	cbnz	r1, 80032fa <_sbrk+0xe>
 80032f6:	490c      	ldr	r1, [pc, #48]	@ (8003328 <_sbrk+0x3c>)
 80032f8:	6011      	str	r1, [r2, #0]
 80032fa:	6810      	ldr	r0, [r2, #0]
 80032fc:	4669      	mov	r1, sp
 80032fe:	4403      	add	r3, r0
 8003300:	428b      	cmp	r3, r1
 8003302:	d806      	bhi.n	8003312 <_sbrk+0x26>
 8003304:	4909      	ldr	r1, [pc, #36]	@ (800332c <_sbrk+0x40>)
 8003306:	4c0a      	ldr	r4, [pc, #40]	@ (8003330 <_sbrk+0x44>)
 8003308:	6809      	ldr	r1, [r1, #0]
 800330a:	42a1      	cmp	r1, r4
 800330c:	d008      	beq.n	8003320 <_sbrk+0x34>
 800330e:	428b      	cmp	r3, r1
 8003310:	d906      	bls.n	8003320 <_sbrk+0x34>
 8003312:	f001 f805 	bl	8004320 <__errno>
 8003316:	230c      	movs	r3, #12
 8003318:	6003      	str	r3, [r0, #0]
 800331a:	f04f 30ff 	mov.w	r0, #4294967295
 800331e:	bd10      	pop	{r4, pc}
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e7fc      	b.n	800331e <_sbrk+0x32>
 8003324:	200002f0 	.word	0x200002f0
 8003328:	200004f0 	.word	0x200004f0
 800332c:	2000009c 	.word	0x2000009c
 8003330:	cafedead 	.word	0xcafedead

08003334 <_swistat>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	460c      	mov	r4, r1
 8003338:	f7ff fede 	bl	80030f8 <findslot>
 800333c:	4605      	mov	r5, r0
 800333e:	b930      	cbnz	r0, 800334e <_swistat+0x1a>
 8003340:	f000 ffee 	bl	8004320 <__errno>
 8003344:	2309      	movs	r3, #9
 8003346:	6003      	str	r3, [r0, #0]
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	bd70      	pop	{r4, r5, r6, pc}
 800334e:	6863      	ldr	r3, [r4, #4]
 8003350:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800335a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800335c:	260c      	movs	r6, #12
 800335e:	4630      	mov	r0, r6
 8003360:	4629      	mov	r1, r5
 8003362:	beab      	bkpt	0x00ab
 8003364:	4605      	mov	r5, r0
 8003366:	4628      	mov	r0, r5
 8003368:	f7ff feee 	bl	8003148 <checkerror>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d0eb      	beq.n	8003348 <_swistat+0x14>
 8003370:	6120      	str	r0, [r4, #16]
 8003372:	2000      	movs	r0, #0
 8003374:	e7ea      	b.n	800334c <_swistat+0x18>

08003376 <_fstat>:
 8003376:	460b      	mov	r3, r1
 8003378:	b510      	push	{r4, lr}
 800337a:	2100      	movs	r1, #0
 800337c:	4604      	mov	r4, r0
 800337e:	2258      	movs	r2, #88	@ 0x58
 8003380:	4618      	mov	r0, r3
 8003382:	f000 ff7b 	bl	800427c <memset>
 8003386:	4601      	mov	r1, r0
 8003388:	4620      	mov	r0, r4
 800338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800338e:	f7ff bfd1 	b.w	8003334 <_swistat>

08003392 <_stat>:
 8003392:	b538      	push	{r3, r4, r5, lr}
 8003394:	460d      	mov	r5, r1
 8003396:	4604      	mov	r4, r0
 8003398:	2258      	movs	r2, #88	@ 0x58
 800339a:	2100      	movs	r1, #0
 800339c:	4628      	mov	r0, r5
 800339e:	f000 ff6d 	bl	800427c <memset>
 80033a2:	4620      	mov	r0, r4
 80033a4:	2100      	movs	r1, #0
 80033a6:	f000 f811 	bl	80033cc <_swiopen>
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	4604      	mov	r4, r0
 80033ae:	d00b      	beq.n	80033c8 <_stat+0x36>
 80033b0:	686b      	ldr	r3, [r5, #4]
 80033b2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80033b6:	606b      	str	r3, [r5, #4]
 80033b8:	4629      	mov	r1, r5
 80033ba:	f7ff ffbb 	bl	8003334 <_swistat>
 80033be:	4605      	mov	r5, r0
 80033c0:	4620      	mov	r0, r4
 80033c2:	f7ff ff6b 	bl	800329c <_close>
 80033c6:	462c      	mov	r4, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	bd38      	pop	{r3, r4, r5, pc}

080033cc <_swiopen>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800347c <_swiopen+0xb0>
 80033d4:	b096      	sub	sp, #88	@ 0x58
 80033d6:	4607      	mov	r7, r0
 80033d8:	460e      	mov	r6, r1
 80033da:	2400      	movs	r4, #0
 80033dc:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80033e0:	3301      	adds	r3, #1
 80033e2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80033e6:	d032      	beq.n	800344e <_swiopen+0x82>
 80033e8:	3401      	adds	r4, #1
 80033ea:	2c14      	cmp	r4, #20
 80033ec:	d1f6      	bne.n	80033dc <_swiopen+0x10>
 80033ee:	f000 ff97 	bl	8004320 <__errno>
 80033f2:	2318      	movs	r3, #24
 80033f4:	e03a      	b.n	800346c <_swiopen+0xa0>
 80033f6:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80033fa:	f240 6301 	movw	r3, #1537	@ 0x601
 80033fe:	07b2      	lsls	r2, r6, #30
 8003400:	bf48      	it	mi
 8003402:	f045 0502 	orrmi.w	r5, r5, #2
 8003406:	421e      	tst	r6, r3
 8003408:	bf18      	it	ne
 800340a:	f045 0504 	orrne.w	r5, r5, #4
 800340e:	0733      	lsls	r3, r6, #28
 8003410:	bf48      	it	mi
 8003412:	f025 0504 	bicmi.w	r5, r5, #4
 8003416:	4638      	mov	r0, r7
 8003418:	bf48      	it	mi
 800341a:	f045 0508 	orrmi.w	r5, r5, #8
 800341e:	9700      	str	r7, [sp, #0]
 8003420:	f7fc ff26 	bl	8000270 <strlen>
 8003424:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003428:	2501      	movs	r5, #1
 800342a:	4628      	mov	r0, r5
 800342c:	4651      	mov	r1, sl
 800342e:	beab      	bkpt	0x00ab
 8003430:	4605      	mov	r5, r0
 8003432:	2d00      	cmp	r5, #0
 8003434:	db06      	blt.n	8003444 <_swiopen+0x78>
 8003436:	44c8      	add	r8, r9
 8003438:	2300      	movs	r3, #0
 800343a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800343e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003442:	e016      	b.n	8003472 <_swiopen+0xa6>
 8003444:	4628      	mov	r0, r5
 8003446:	f7ff fe71 	bl	800312c <error>
 800344a:	4604      	mov	r4, r0
 800344c:	e011      	b.n	8003472 <_swiopen+0xa6>
 800344e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003452:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003456:	46ea      	mov	sl, sp
 8003458:	d1cd      	bne.n	80033f6 <_swiopen+0x2a>
 800345a:	4651      	mov	r1, sl
 800345c:	4638      	mov	r0, r7
 800345e:	f7ff ff98 	bl	8003392 <_stat>
 8003462:	3001      	adds	r0, #1
 8003464:	d0c7      	beq.n	80033f6 <_swiopen+0x2a>
 8003466:	f000 ff5b 	bl	8004320 <__errno>
 800346a:	2311      	movs	r3, #17
 800346c:	6003      	str	r3, [r0, #0]
 800346e:	f04f 34ff 	mov.w	r4, #4294967295
 8003472:	4620      	mov	r0, r4
 8003474:	b016      	add	sp, #88	@ 0x58
 8003476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800347a:	bf00      	nop
 800347c:	20000300 	.word	0x20000300

08003480 <_get_semihosting_exts>:
 8003480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003484:	4606      	mov	r6, r0
 8003486:	460f      	mov	r7, r1
 8003488:	4829      	ldr	r0, [pc, #164]	@ (8003530 <_get_semihosting_exts+0xb0>)
 800348a:	2100      	movs	r1, #0
 800348c:	4615      	mov	r5, r2
 800348e:	f7ff ff9d 	bl	80033cc <_swiopen>
 8003492:	462a      	mov	r2, r5
 8003494:	4604      	mov	r4, r0
 8003496:	2100      	movs	r1, #0
 8003498:	4630      	mov	r0, r6
 800349a:	f000 feef 	bl	800427c <memset>
 800349e:	1c63      	adds	r3, r4, #1
 80034a0:	d014      	beq.n	80034cc <_get_semihosting_exts+0x4c>
 80034a2:	4620      	mov	r0, r4
 80034a4:	f7ff fe28 	bl	80030f8 <findslot>
 80034a8:	f04f 080c 	mov.w	r8, #12
 80034ac:	4681      	mov	r9, r0
 80034ae:	4640      	mov	r0, r8
 80034b0:	4649      	mov	r1, r9
 80034b2:	beab      	bkpt	0x00ab
 80034b4:	4680      	mov	r8, r0
 80034b6:	4640      	mov	r0, r8
 80034b8:	f7ff fe46 	bl	8003148 <checkerror>
 80034bc:	2803      	cmp	r0, #3
 80034be:	dd02      	ble.n	80034c6 <_get_semihosting_exts+0x46>
 80034c0:	1ec3      	subs	r3, r0, #3
 80034c2:	42ab      	cmp	r3, r5
 80034c4:	dc07      	bgt.n	80034d6 <_get_semihosting_exts+0x56>
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff fee8 	bl	800329c <_close>
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	b003      	add	sp, #12
 80034d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034d6:	2204      	movs	r2, #4
 80034d8:	eb0d 0102 	add.w	r1, sp, r2
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff fe48 	bl	8003172 <_read>
 80034e2:	2803      	cmp	r0, #3
 80034e4:	ddef      	ble.n	80034c6 <_get_semihosting_exts+0x46>
 80034e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034ea:	2b53      	cmp	r3, #83	@ 0x53
 80034ec:	d1eb      	bne.n	80034c6 <_get_semihosting_exts+0x46>
 80034ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80034f2:	2b48      	cmp	r3, #72	@ 0x48
 80034f4:	d1e7      	bne.n	80034c6 <_get_semihosting_exts+0x46>
 80034f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80034fa:	2b46      	cmp	r3, #70	@ 0x46
 80034fc:	d1e3      	bne.n	80034c6 <_get_semihosting_exts+0x46>
 80034fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003502:	2b42      	cmp	r3, #66	@ 0x42
 8003504:	d1df      	bne.n	80034c6 <_get_semihosting_exts+0x46>
 8003506:	2201      	movs	r2, #1
 8003508:	4639      	mov	r1, r7
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fe4b 	bl	80031a6 <_swilseek>
 8003510:	2800      	cmp	r0, #0
 8003512:	dbd8      	blt.n	80034c6 <_get_semihosting_exts+0x46>
 8003514:	462a      	mov	r2, r5
 8003516:	4631      	mov	r1, r6
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff fe2a 	bl	8003172 <_read>
 800351e:	4605      	mov	r5, r0
 8003520:	4620      	mov	r0, r4
 8003522:	f7ff febb 	bl	800329c <_close>
 8003526:	4628      	mov	r0, r5
 8003528:	f7ff fe0e 	bl	8003148 <checkerror>
 800352c:	e7d0      	b.n	80034d0 <_get_semihosting_exts+0x50>
 800352e:	bf00      	nop
 8003530:	08006026 	.word	0x08006026

08003534 <initialise_semihosting_exts>:
 8003534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003536:	4d0a      	ldr	r5, [pc, #40]	@ (8003560 <initialise_semihosting_exts+0x2c>)
 8003538:	4c0a      	ldr	r4, [pc, #40]	@ (8003564 <initialise_semihosting_exts+0x30>)
 800353a:	2100      	movs	r1, #0
 800353c:	2201      	movs	r2, #1
 800353e:	a801      	add	r0, sp, #4
 8003540:	6029      	str	r1, [r5, #0]
 8003542:	6022      	str	r2, [r4, #0]
 8003544:	f7ff ff9c 	bl	8003480 <_get_semihosting_exts>
 8003548:	2800      	cmp	r0, #0
 800354a:	dd07      	ble.n	800355c <initialise_semihosting_exts+0x28>
 800354c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003550:	f003 0201 	and.w	r2, r3, #1
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	602a      	str	r2, [r5, #0]
 800355a:	6023      	str	r3, [r4, #0]
 800355c:	b003      	add	sp, #12
 800355e:	bd30      	pop	{r4, r5, pc}
 8003560:	200000a4 	.word	0x200000a4
 8003564:	200000a0 	.word	0x200000a0

08003568 <_has_ext_stdout_stderr>:
 8003568:	b510      	push	{r4, lr}
 800356a:	4c04      	ldr	r4, [pc, #16]	@ (800357c <_has_ext_stdout_stderr+0x14>)
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da01      	bge.n	8003576 <_has_ext_stdout_stderr+0xe>
 8003572:	f7ff ffdf 	bl	8003534 <initialise_semihosting_exts>
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	200000a0 	.word	0x200000a0

08003580 <initialise_monitor_handles>:
 8003580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003584:	b085      	sub	sp, #20
 8003586:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003638 <initialise_monitor_handles+0xb8>
 800358a:	f8cd 9004 	str.w	r9, [sp, #4]
 800358e:	2303      	movs	r3, #3
 8003590:	2400      	movs	r4, #0
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	af01      	add	r7, sp, #4
 8003596:	9402      	str	r4, [sp, #8]
 8003598:	2501      	movs	r5, #1
 800359a:	4628      	mov	r0, r5
 800359c:	4639      	mov	r1, r7
 800359e:	beab      	bkpt	0x00ab
 80035a0:	4605      	mov	r5, r0
 80035a2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800363c <initialise_monitor_handles+0xbc>
 80035a6:	4623      	mov	r3, r4
 80035a8:	4c20      	ldr	r4, [pc, #128]	@ (800362c <initialise_monitor_handles+0xac>)
 80035aa:	f8c8 5000 	str.w	r5, [r8]
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295
 80035b2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80035b6:	3301      	adds	r3, #1
 80035b8:	2b14      	cmp	r3, #20
 80035ba:	d1fa      	bne.n	80035b2 <initialise_monitor_handles+0x32>
 80035bc:	f7ff ffd4 	bl	8003568 <_has_ext_stdout_stderr>
 80035c0:	4d1b      	ldr	r5, [pc, #108]	@ (8003630 <initialise_monitor_handles+0xb0>)
 80035c2:	b1d0      	cbz	r0, 80035fa <initialise_monitor_handles+0x7a>
 80035c4:	f04f 0a03 	mov.w	sl, #3
 80035c8:	2304      	movs	r3, #4
 80035ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80035ce:	2601      	movs	r6, #1
 80035d0:	f8cd a00c 	str.w	sl, [sp, #12]
 80035d4:	9302      	str	r3, [sp, #8]
 80035d6:	4630      	mov	r0, r6
 80035d8:	4639      	mov	r1, r7
 80035da:	beab      	bkpt	0x00ab
 80035dc:	4683      	mov	fp, r0
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <initialise_monitor_handles+0xb4>)
 80035e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80035e4:	f8c3 b000 	str.w	fp, [r3]
 80035e8:	2308      	movs	r3, #8
 80035ea:	f8cd a00c 	str.w	sl, [sp, #12]
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	4630      	mov	r0, r6
 80035f2:	4639      	mov	r1, r7
 80035f4:	beab      	bkpt	0x00ab
 80035f6:	4606      	mov	r6, r0
 80035f8:	602e      	str	r6, [r5, #0]
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	3301      	adds	r3, #1
 80035fe:	bf02      	ittt	eq
 8003600:	4b0c      	ldreq	r3, [pc, #48]	@ (8003634 <initialise_monitor_handles+0xb4>)
 8003602:	681b      	ldreq	r3, [r3, #0]
 8003604:	602b      	streq	r3, [r5, #0]
 8003606:	2600      	movs	r6, #0
 8003608:	f8d8 3000 	ldr.w	r3, [r8]
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	6066      	str	r6, [r4, #4]
 8003610:	f7ff ffaa 	bl	8003568 <_has_ext_stdout_stderr>
 8003614:	b130      	cbz	r0, 8003624 <initialise_monitor_handles+0xa4>
 8003616:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <initialise_monitor_handles+0xb4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800361e:	682b      	ldr	r3, [r5, #0]
 8003620:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003624:	b005      	add	sp, #20
 8003626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	20000300 	.word	0x20000300
 8003630:	200002f4 	.word	0x200002f4
 8003634:	200002f8 	.word	0x200002f8
 8003638:	0800603c 	.word	0x0800603c
 800363c:	200002fc 	.word	0x200002fc

08003640 <_isatty>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	f7ff fd59 	bl	80030f8 <findslot>
 8003646:	2409      	movs	r4, #9
 8003648:	4605      	mov	r5, r0
 800364a:	b920      	cbnz	r0, 8003656 <_isatty+0x16>
 800364c:	f000 fe68 	bl	8004320 <__errno>
 8003650:	6004      	str	r4, [r0, #0]
 8003652:	2000      	movs	r0, #0
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	beab      	bkpt	0x00ab
 800365c:	4604      	mov	r4, r0
 800365e:	2c01      	cmp	r4, #1
 8003660:	4620      	mov	r0, r4
 8003662:	d0f7      	beq.n	8003654 <_isatty+0x14>
 8003664:	f000 fe5c 	bl	8004320 <__errno>
 8003668:	2513      	movs	r5, #19
 800366a:	4604      	mov	r4, r0
 800366c:	2600      	movs	r6, #0
 800366e:	4628      	mov	r0, r5
 8003670:	4631      	mov	r1, r6
 8003672:	beab      	bkpt	0x00ab
 8003674:	4605      	mov	r5, r0
 8003676:	6025      	str	r5, [r4, #0]
 8003678:	e7eb      	b.n	8003652 <_isatty+0x12>

0800367a <__cvt>:
 800367a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800367e:	ec57 6b10 	vmov	r6, r7, d0
 8003682:	2f00      	cmp	r7, #0
 8003684:	460c      	mov	r4, r1
 8003686:	4619      	mov	r1, r3
 8003688:	463b      	mov	r3, r7
 800368a:	bfbb      	ittet	lt
 800368c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003690:	461f      	movlt	r7, r3
 8003692:	2300      	movge	r3, #0
 8003694:	232d      	movlt	r3, #45	@ 0x2d
 8003696:	700b      	strb	r3, [r1, #0]
 8003698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800369a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800369e:	4691      	mov	r9, r2
 80036a0:	f023 0820 	bic.w	r8, r3, #32
 80036a4:	bfbc      	itt	lt
 80036a6:	4632      	movlt	r2, r6
 80036a8:	4616      	movlt	r6, r2
 80036aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80036ae:	d005      	beq.n	80036bc <__cvt+0x42>
 80036b0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80036b4:	d100      	bne.n	80036b8 <__cvt+0x3e>
 80036b6:	3401      	adds	r4, #1
 80036b8:	2102      	movs	r1, #2
 80036ba:	e000      	b.n	80036be <__cvt+0x44>
 80036bc:	2103      	movs	r1, #3
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	ab02      	add	r3, sp, #8
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	ec47 6b10 	vmov	d0, r6, r7
 80036ca:	4653      	mov	r3, sl
 80036cc:	4622      	mov	r2, r4
 80036ce:	f000 ff0b 	bl	80044e8 <_dtoa_r>
 80036d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80036d6:	4605      	mov	r5, r0
 80036d8:	d119      	bne.n	800370e <__cvt+0x94>
 80036da:	f019 0f01 	tst.w	r9, #1
 80036de:	d00e      	beq.n	80036fe <__cvt+0x84>
 80036e0:	eb00 0904 	add.w	r9, r0, r4
 80036e4:	2200      	movs	r2, #0
 80036e6:	2300      	movs	r3, #0
 80036e8:	4630      	mov	r0, r6
 80036ea:	4639      	mov	r1, r7
 80036ec:	f7fd f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80036f0:	b108      	cbz	r0, 80036f6 <__cvt+0x7c>
 80036f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80036f6:	2230      	movs	r2, #48	@ 0x30
 80036f8:	9b03      	ldr	r3, [sp, #12]
 80036fa:	454b      	cmp	r3, r9
 80036fc:	d31e      	bcc.n	800373c <__cvt+0xc2>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003702:	1b5b      	subs	r3, r3, r5
 8003704:	4628      	mov	r0, r5
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	b004      	add	sp, #16
 800370a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800370e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003712:	eb00 0904 	add.w	r9, r0, r4
 8003716:	d1e5      	bne.n	80036e4 <__cvt+0x6a>
 8003718:	7803      	ldrb	r3, [r0, #0]
 800371a:	2b30      	cmp	r3, #48	@ 0x30
 800371c:	d10a      	bne.n	8003734 <__cvt+0xba>
 800371e:	2200      	movs	r2, #0
 8003720:	2300      	movs	r3, #0
 8003722:	4630      	mov	r0, r6
 8003724:	4639      	mov	r1, r7
 8003726:	f7fd f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800372a:	b918      	cbnz	r0, 8003734 <__cvt+0xba>
 800372c:	f1c4 0401 	rsb	r4, r4, #1
 8003730:	f8ca 4000 	str.w	r4, [sl]
 8003734:	f8da 3000 	ldr.w	r3, [sl]
 8003738:	4499      	add	r9, r3
 800373a:	e7d3      	b.n	80036e4 <__cvt+0x6a>
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	9103      	str	r1, [sp, #12]
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e7d9      	b.n	80036f8 <__cvt+0x7e>

08003744 <__exponent>:
 8003744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003746:	2900      	cmp	r1, #0
 8003748:	bfba      	itte	lt
 800374a:	4249      	neglt	r1, r1
 800374c:	232d      	movlt	r3, #45	@ 0x2d
 800374e:	232b      	movge	r3, #43	@ 0x2b
 8003750:	2909      	cmp	r1, #9
 8003752:	7002      	strb	r2, [r0, #0]
 8003754:	7043      	strb	r3, [r0, #1]
 8003756:	dd29      	ble.n	80037ac <__exponent+0x68>
 8003758:	f10d 0307 	add.w	r3, sp, #7
 800375c:	461d      	mov	r5, r3
 800375e:	270a      	movs	r7, #10
 8003760:	461a      	mov	r2, r3
 8003762:	fbb1 f6f7 	udiv	r6, r1, r7
 8003766:	fb07 1416 	mls	r4, r7, r6, r1
 800376a:	3430      	adds	r4, #48	@ 0x30
 800376c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003770:	460c      	mov	r4, r1
 8003772:	2c63      	cmp	r4, #99	@ 0x63
 8003774:	f103 33ff 	add.w	r3, r3, #4294967295
 8003778:	4631      	mov	r1, r6
 800377a:	dcf1      	bgt.n	8003760 <__exponent+0x1c>
 800377c:	3130      	adds	r1, #48	@ 0x30
 800377e:	1e94      	subs	r4, r2, #2
 8003780:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003784:	1c41      	adds	r1, r0, #1
 8003786:	4623      	mov	r3, r4
 8003788:	42ab      	cmp	r3, r5
 800378a:	d30a      	bcc.n	80037a2 <__exponent+0x5e>
 800378c:	f10d 0309 	add.w	r3, sp, #9
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	42ac      	cmp	r4, r5
 8003794:	bf88      	it	hi
 8003796:	2300      	movhi	r3, #0
 8003798:	3302      	adds	r3, #2
 800379a:	4403      	add	r3, r0
 800379c:	1a18      	subs	r0, r3, r0
 800379e:	b003      	add	sp, #12
 80037a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80037a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80037aa:	e7ed      	b.n	8003788 <__exponent+0x44>
 80037ac:	2330      	movs	r3, #48	@ 0x30
 80037ae:	3130      	adds	r1, #48	@ 0x30
 80037b0:	7083      	strb	r3, [r0, #2]
 80037b2:	70c1      	strb	r1, [r0, #3]
 80037b4:	1d03      	adds	r3, r0, #4
 80037b6:	e7f1      	b.n	800379c <__exponent+0x58>

080037b8 <_printf_float>:
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b08d      	sub	sp, #52	@ 0x34
 80037be:	460c      	mov	r4, r1
 80037c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80037c4:	4616      	mov	r6, r2
 80037c6:	461f      	mov	r7, r3
 80037c8:	4605      	mov	r5, r0
 80037ca:	f000 fd5f 	bl	800428c <_localeconv_r>
 80037ce:	6803      	ldr	r3, [r0, #0]
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fc fd4c 	bl	8000270 <strlen>
 80037d8:	2300      	movs	r3, #0
 80037da:	930a      	str	r3, [sp, #40]	@ 0x28
 80037dc:	f8d8 3000 	ldr.w	r3, [r8]
 80037e0:	9005      	str	r0, [sp, #20]
 80037e2:	3307      	adds	r3, #7
 80037e4:	f023 0307 	bic.w	r3, r3, #7
 80037e8:	f103 0208 	add.w	r2, r3, #8
 80037ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80037f0:	f8d4 b000 	ldr.w	fp, [r4]
 80037f4:	f8c8 2000 	str.w	r2, [r8]
 80037f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003800:	9307      	str	r3, [sp, #28]
 8003802:	f8cd 8018 	str.w	r8, [sp, #24]
 8003806:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800380a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800380e:	4b9c      	ldr	r3, [pc, #624]	@ (8003a80 <_printf_float+0x2c8>)
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	f7fd f98a 	bl	8000b2c <__aeabi_dcmpun>
 8003818:	bb70      	cbnz	r0, 8003878 <_printf_float+0xc0>
 800381a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800381e:	4b98      	ldr	r3, [pc, #608]	@ (8003a80 <_printf_float+0x2c8>)
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	f7fd f964 	bl	8000af0 <__aeabi_dcmple>
 8003828:	bb30      	cbnz	r0, 8003878 <_printf_float+0xc0>
 800382a:	2200      	movs	r2, #0
 800382c:	2300      	movs	r3, #0
 800382e:	4640      	mov	r0, r8
 8003830:	4649      	mov	r1, r9
 8003832:	f7fd f953 	bl	8000adc <__aeabi_dcmplt>
 8003836:	b110      	cbz	r0, 800383e <_printf_float+0x86>
 8003838:	232d      	movs	r3, #45	@ 0x2d
 800383a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800383e:	4a91      	ldr	r2, [pc, #580]	@ (8003a84 <_printf_float+0x2cc>)
 8003840:	4b91      	ldr	r3, [pc, #580]	@ (8003a88 <_printf_float+0x2d0>)
 8003842:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003846:	bf8c      	ite	hi
 8003848:	4690      	movhi	r8, r2
 800384a:	4698      	movls	r8, r3
 800384c:	2303      	movs	r3, #3
 800384e:	6123      	str	r3, [r4, #16]
 8003850:	f02b 0304 	bic.w	r3, fp, #4
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	f04f 0900 	mov.w	r9, #0
 800385a:	9700      	str	r7, [sp, #0]
 800385c:	4633      	mov	r3, r6
 800385e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003860:	4621      	mov	r1, r4
 8003862:	4628      	mov	r0, r5
 8003864:	f000 f9d2 	bl	8003c0c <_printf_common>
 8003868:	3001      	adds	r0, #1
 800386a:	f040 808d 	bne.w	8003988 <_printf_float+0x1d0>
 800386e:	f04f 30ff 	mov.w	r0, #4294967295
 8003872:	b00d      	add	sp, #52	@ 0x34
 8003874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003878:	4642      	mov	r2, r8
 800387a:	464b      	mov	r3, r9
 800387c:	4640      	mov	r0, r8
 800387e:	4649      	mov	r1, r9
 8003880:	f7fd f954 	bl	8000b2c <__aeabi_dcmpun>
 8003884:	b140      	cbz	r0, 8003898 <_printf_float+0xe0>
 8003886:	464b      	mov	r3, r9
 8003888:	2b00      	cmp	r3, #0
 800388a:	bfbc      	itt	lt
 800388c:	232d      	movlt	r3, #45	@ 0x2d
 800388e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003892:	4a7e      	ldr	r2, [pc, #504]	@ (8003a8c <_printf_float+0x2d4>)
 8003894:	4b7e      	ldr	r3, [pc, #504]	@ (8003a90 <_printf_float+0x2d8>)
 8003896:	e7d4      	b.n	8003842 <_printf_float+0x8a>
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800389e:	9206      	str	r2, [sp, #24]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	d13b      	bne.n	800391c <_printf_float+0x164>
 80038a4:	2306      	movs	r3, #6
 80038a6:	6063      	str	r3, [r4, #4]
 80038a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80038ac:	2300      	movs	r3, #0
 80038ae:	6022      	str	r2, [r4, #0]
 80038b0:	9303      	str	r3, [sp, #12]
 80038b2:	ab0a      	add	r3, sp, #40	@ 0x28
 80038b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80038b8:	ab09      	add	r3, sp, #36	@ 0x24
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	6861      	ldr	r1, [r4, #4]
 80038be:	ec49 8b10 	vmov	d0, r8, r9
 80038c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80038c6:	4628      	mov	r0, r5
 80038c8:	f7ff fed7 	bl	800367a <__cvt>
 80038cc:	9b06      	ldr	r3, [sp, #24]
 80038ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80038d0:	2b47      	cmp	r3, #71	@ 0x47
 80038d2:	4680      	mov	r8, r0
 80038d4:	d129      	bne.n	800392a <_printf_float+0x172>
 80038d6:	1cc8      	adds	r0, r1, #3
 80038d8:	db02      	blt.n	80038e0 <_printf_float+0x128>
 80038da:	6863      	ldr	r3, [r4, #4]
 80038dc:	4299      	cmp	r1, r3
 80038de:	dd41      	ble.n	8003964 <_printf_float+0x1ac>
 80038e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80038e4:	fa5f fa8a 	uxtb.w	sl, sl
 80038e8:	3901      	subs	r1, #1
 80038ea:	4652      	mov	r2, sl
 80038ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80038f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80038f2:	f7ff ff27 	bl	8003744 <__exponent>
 80038f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80038f8:	1813      	adds	r3, r2, r0
 80038fa:	2a01      	cmp	r2, #1
 80038fc:	4681      	mov	r9, r0
 80038fe:	6123      	str	r3, [r4, #16]
 8003900:	dc02      	bgt.n	8003908 <_printf_float+0x150>
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	07d2      	lsls	r2, r2, #31
 8003906:	d501      	bpl.n	800390c <_printf_float+0x154>
 8003908:	3301      	adds	r3, #1
 800390a:	6123      	str	r3, [r4, #16]
 800390c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0a2      	beq.n	800385a <_printf_float+0xa2>
 8003914:	232d      	movs	r3, #45	@ 0x2d
 8003916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800391a:	e79e      	b.n	800385a <_printf_float+0xa2>
 800391c:	9a06      	ldr	r2, [sp, #24]
 800391e:	2a47      	cmp	r2, #71	@ 0x47
 8003920:	d1c2      	bne.n	80038a8 <_printf_float+0xf0>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1c0      	bne.n	80038a8 <_printf_float+0xf0>
 8003926:	2301      	movs	r3, #1
 8003928:	e7bd      	b.n	80038a6 <_printf_float+0xee>
 800392a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800392e:	d9db      	bls.n	80038e8 <_printf_float+0x130>
 8003930:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003934:	d118      	bne.n	8003968 <_printf_float+0x1b0>
 8003936:	2900      	cmp	r1, #0
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	dd0b      	ble.n	8003954 <_printf_float+0x19c>
 800393c:	6121      	str	r1, [r4, #16]
 800393e:	b913      	cbnz	r3, 8003946 <_printf_float+0x18e>
 8003940:	6822      	ldr	r2, [r4, #0]
 8003942:	07d0      	lsls	r0, r2, #31
 8003944:	d502      	bpl.n	800394c <_printf_float+0x194>
 8003946:	3301      	adds	r3, #1
 8003948:	440b      	add	r3, r1
 800394a:	6123      	str	r3, [r4, #16]
 800394c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800394e:	f04f 0900 	mov.w	r9, #0
 8003952:	e7db      	b.n	800390c <_printf_float+0x154>
 8003954:	b913      	cbnz	r3, 800395c <_printf_float+0x1a4>
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	07d2      	lsls	r2, r2, #31
 800395a:	d501      	bpl.n	8003960 <_printf_float+0x1a8>
 800395c:	3302      	adds	r3, #2
 800395e:	e7f4      	b.n	800394a <_printf_float+0x192>
 8003960:	2301      	movs	r3, #1
 8003962:	e7f2      	b.n	800394a <_printf_float+0x192>
 8003964:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800396a:	4299      	cmp	r1, r3
 800396c:	db05      	blt.n	800397a <_printf_float+0x1c2>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	6121      	str	r1, [r4, #16]
 8003972:	07d8      	lsls	r0, r3, #31
 8003974:	d5ea      	bpl.n	800394c <_printf_float+0x194>
 8003976:	1c4b      	adds	r3, r1, #1
 8003978:	e7e7      	b.n	800394a <_printf_float+0x192>
 800397a:	2900      	cmp	r1, #0
 800397c:	bfd4      	ite	le
 800397e:	f1c1 0202 	rsble	r2, r1, #2
 8003982:	2201      	movgt	r2, #1
 8003984:	4413      	add	r3, r2
 8003986:	e7e0      	b.n	800394a <_printf_float+0x192>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	055a      	lsls	r2, r3, #21
 800398c:	d407      	bmi.n	800399e <_printf_float+0x1e6>
 800398e:	6923      	ldr	r3, [r4, #16]
 8003990:	4642      	mov	r2, r8
 8003992:	4631      	mov	r1, r6
 8003994:	4628      	mov	r0, r5
 8003996:	47b8      	blx	r7
 8003998:	3001      	adds	r0, #1
 800399a:	d12b      	bne.n	80039f4 <_printf_float+0x23c>
 800399c:	e767      	b.n	800386e <_printf_float+0xb6>
 800399e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80039a2:	f240 80dd 	bls.w	8003b60 <_printf_float+0x3a8>
 80039a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80039aa:	2200      	movs	r2, #0
 80039ac:	2300      	movs	r3, #0
 80039ae:	f7fd f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d033      	beq.n	8003a1e <_printf_float+0x266>
 80039b6:	4a37      	ldr	r2, [pc, #220]	@ (8003a94 <_printf_float+0x2dc>)
 80039b8:	2301      	movs	r3, #1
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	f43f af54 	beq.w	800386e <_printf_float+0xb6>
 80039c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80039ca:	4543      	cmp	r3, r8
 80039cc:	db02      	blt.n	80039d4 <_printf_float+0x21c>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	07d8      	lsls	r0, r3, #31
 80039d2:	d50f      	bpl.n	80039f4 <_printf_float+0x23c>
 80039d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039d8:	4631      	mov	r1, r6
 80039da:	4628      	mov	r0, r5
 80039dc:	47b8      	blx	r7
 80039de:	3001      	adds	r0, #1
 80039e0:	f43f af45 	beq.w	800386e <_printf_float+0xb6>
 80039e4:	f04f 0900 	mov.w	r9, #0
 80039e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80039ec:	f104 0a1a 	add.w	sl, r4, #26
 80039f0:	45c8      	cmp	r8, r9
 80039f2:	dc09      	bgt.n	8003a08 <_printf_float+0x250>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	079b      	lsls	r3, r3, #30
 80039f8:	f100 8103 	bmi.w	8003c02 <_printf_float+0x44a>
 80039fc:	68e0      	ldr	r0, [r4, #12]
 80039fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003a00:	4298      	cmp	r0, r3
 8003a02:	bfb8      	it	lt
 8003a04:	4618      	movlt	r0, r3
 8003a06:	e734      	b.n	8003872 <_printf_float+0xba>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	4652      	mov	r2, sl
 8003a0c:	4631      	mov	r1, r6
 8003a0e:	4628      	mov	r0, r5
 8003a10:	47b8      	blx	r7
 8003a12:	3001      	adds	r0, #1
 8003a14:	f43f af2b 	beq.w	800386e <_printf_float+0xb6>
 8003a18:	f109 0901 	add.w	r9, r9, #1
 8003a1c:	e7e8      	b.n	80039f0 <_printf_float+0x238>
 8003a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	dc39      	bgt.n	8003a98 <_printf_float+0x2e0>
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <_printf_float+0x2dc>)
 8003a26:	2301      	movs	r3, #1
 8003a28:	4631      	mov	r1, r6
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f43f af1d 	beq.w	800386e <_printf_float+0xb6>
 8003a34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003a38:	ea59 0303 	orrs.w	r3, r9, r3
 8003a3c:	d102      	bne.n	8003a44 <_printf_float+0x28c>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	07d9      	lsls	r1, r3, #31
 8003a42:	d5d7      	bpl.n	80039f4 <_printf_float+0x23c>
 8003a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	f43f af0d 	beq.w	800386e <_printf_float+0xb6>
 8003a54:	f04f 0a00 	mov.w	sl, #0
 8003a58:	f104 0b1a 	add.w	fp, r4, #26
 8003a5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a5e:	425b      	negs	r3, r3
 8003a60:	4553      	cmp	r3, sl
 8003a62:	dc01      	bgt.n	8003a68 <_printf_float+0x2b0>
 8003a64:	464b      	mov	r3, r9
 8003a66:	e793      	b.n	8003990 <_printf_float+0x1d8>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	465a      	mov	r2, fp
 8003a6c:	4631      	mov	r1, r6
 8003a6e:	4628      	mov	r0, r5
 8003a70:	47b8      	blx	r7
 8003a72:	3001      	adds	r0, #1
 8003a74:	f43f aefb 	beq.w	800386e <_printf_float+0xb6>
 8003a78:	f10a 0a01 	add.w	sl, sl, #1
 8003a7c:	e7ee      	b.n	8003a5c <_printf_float+0x2a4>
 8003a7e:	bf00      	nop
 8003a80:	7fefffff 	.word	0x7fefffff
 8003a84:	08006044 	.word	0x08006044
 8003a88:	08006040 	.word	0x08006040
 8003a8c:	0800604c 	.word	0x0800604c
 8003a90:	08006048 	.word	0x08006048
 8003a94:	08006050 	.word	0x08006050
 8003a98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a9e:	4553      	cmp	r3, sl
 8003aa0:	bfa8      	it	ge
 8003aa2:	4653      	movge	r3, sl
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	4699      	mov	r9, r3
 8003aa8:	dc36      	bgt.n	8003b18 <_printf_float+0x360>
 8003aaa:	f04f 0b00 	mov.w	fp, #0
 8003aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ab2:	f104 021a 	add.w	r2, r4, #26
 8003ab6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ab8:	9306      	str	r3, [sp, #24]
 8003aba:	eba3 0309 	sub.w	r3, r3, r9
 8003abe:	455b      	cmp	r3, fp
 8003ac0:	dc31      	bgt.n	8003b26 <_printf_float+0x36e>
 8003ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ac4:	459a      	cmp	sl, r3
 8003ac6:	dc3a      	bgt.n	8003b3e <_printf_float+0x386>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	07da      	lsls	r2, r3, #31
 8003acc:	d437      	bmi.n	8003b3e <_printf_float+0x386>
 8003ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ad0:	ebaa 0903 	sub.w	r9, sl, r3
 8003ad4:	9b06      	ldr	r3, [sp, #24]
 8003ad6:	ebaa 0303 	sub.w	r3, sl, r3
 8003ada:	4599      	cmp	r9, r3
 8003adc:	bfa8      	it	ge
 8003ade:	4699      	movge	r9, r3
 8003ae0:	f1b9 0f00 	cmp.w	r9, #0
 8003ae4:	dc33      	bgt.n	8003b4e <_printf_float+0x396>
 8003ae6:	f04f 0800 	mov.w	r8, #0
 8003aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003aee:	f104 0b1a 	add.w	fp, r4, #26
 8003af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003af4:	ebaa 0303 	sub.w	r3, sl, r3
 8003af8:	eba3 0309 	sub.w	r3, r3, r9
 8003afc:	4543      	cmp	r3, r8
 8003afe:	f77f af79 	ble.w	80039f4 <_printf_float+0x23c>
 8003b02:	2301      	movs	r3, #1
 8003b04:	465a      	mov	r2, fp
 8003b06:	4631      	mov	r1, r6
 8003b08:	4628      	mov	r0, r5
 8003b0a:	47b8      	blx	r7
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	f43f aeae 	beq.w	800386e <_printf_float+0xb6>
 8003b12:	f108 0801 	add.w	r8, r8, #1
 8003b16:	e7ec      	b.n	8003af2 <_printf_float+0x33a>
 8003b18:	4642      	mov	r2, r8
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	d1c2      	bne.n	8003aaa <_printf_float+0x2f2>
 8003b24:	e6a3      	b.n	800386e <_printf_float+0xb6>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	9206      	str	r2, [sp, #24]
 8003b2e:	47b8      	blx	r7
 8003b30:	3001      	adds	r0, #1
 8003b32:	f43f ae9c 	beq.w	800386e <_printf_float+0xb6>
 8003b36:	9a06      	ldr	r2, [sp, #24]
 8003b38:	f10b 0b01 	add.w	fp, fp, #1
 8003b3c:	e7bb      	b.n	8003ab6 <_printf_float+0x2fe>
 8003b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b42:	4631      	mov	r1, r6
 8003b44:	4628      	mov	r0, r5
 8003b46:	47b8      	blx	r7
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d1c0      	bne.n	8003ace <_printf_float+0x316>
 8003b4c:	e68f      	b.n	800386e <_printf_float+0xb6>
 8003b4e:	9a06      	ldr	r2, [sp, #24]
 8003b50:	464b      	mov	r3, r9
 8003b52:	4442      	add	r2, r8
 8003b54:	4631      	mov	r1, r6
 8003b56:	4628      	mov	r0, r5
 8003b58:	47b8      	blx	r7
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d1c3      	bne.n	8003ae6 <_printf_float+0x32e>
 8003b5e:	e686      	b.n	800386e <_printf_float+0xb6>
 8003b60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003b64:	f1ba 0f01 	cmp.w	sl, #1
 8003b68:	dc01      	bgt.n	8003b6e <_printf_float+0x3b6>
 8003b6a:	07db      	lsls	r3, r3, #31
 8003b6c:	d536      	bpl.n	8003bdc <_printf_float+0x424>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4642      	mov	r2, r8
 8003b72:	4631      	mov	r1, r6
 8003b74:	4628      	mov	r0, r5
 8003b76:	47b8      	blx	r7
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f43f ae78 	beq.w	800386e <_printf_float+0xb6>
 8003b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b82:	4631      	mov	r1, r6
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b8      	blx	r7
 8003b88:	3001      	adds	r0, #1
 8003b8a:	f43f ae70 	beq.w	800386e <_printf_float+0xb6>
 8003b8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b92:	2200      	movs	r2, #0
 8003b94:	2300      	movs	r3, #0
 8003b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b9a:	f7fc ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b9e:	b9c0      	cbnz	r0, 8003bd2 <_printf_float+0x41a>
 8003ba0:	4653      	mov	r3, sl
 8003ba2:	f108 0201 	add.w	r2, r8, #1
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b8      	blx	r7
 8003bac:	3001      	adds	r0, #1
 8003bae:	d10c      	bne.n	8003bca <_printf_float+0x412>
 8003bb0:	e65d      	b.n	800386e <_printf_float+0xb6>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	465a      	mov	r2, fp
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4628      	mov	r0, r5
 8003bba:	47b8      	blx	r7
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	f43f ae56 	beq.w	800386e <_printf_float+0xb6>
 8003bc2:	f108 0801 	add.w	r8, r8, #1
 8003bc6:	45d0      	cmp	r8, sl
 8003bc8:	dbf3      	blt.n	8003bb2 <_printf_float+0x3fa>
 8003bca:	464b      	mov	r3, r9
 8003bcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003bd0:	e6df      	b.n	8003992 <_printf_float+0x1da>
 8003bd2:	f04f 0800 	mov.w	r8, #0
 8003bd6:	f104 0b1a 	add.w	fp, r4, #26
 8003bda:	e7f4      	b.n	8003bc6 <_printf_float+0x40e>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4642      	mov	r2, r8
 8003be0:	e7e1      	b.n	8003ba6 <_printf_float+0x3ee>
 8003be2:	2301      	movs	r3, #1
 8003be4:	464a      	mov	r2, r9
 8003be6:	4631      	mov	r1, r6
 8003be8:	4628      	mov	r0, r5
 8003bea:	47b8      	blx	r7
 8003bec:	3001      	adds	r0, #1
 8003bee:	f43f ae3e 	beq.w	800386e <_printf_float+0xb6>
 8003bf2:	f108 0801 	add.w	r8, r8, #1
 8003bf6:	68e3      	ldr	r3, [r4, #12]
 8003bf8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003bfa:	1a5b      	subs	r3, r3, r1
 8003bfc:	4543      	cmp	r3, r8
 8003bfe:	dcf0      	bgt.n	8003be2 <_printf_float+0x42a>
 8003c00:	e6fc      	b.n	80039fc <_printf_float+0x244>
 8003c02:	f04f 0800 	mov.w	r8, #0
 8003c06:	f104 0919 	add.w	r9, r4, #25
 8003c0a:	e7f4      	b.n	8003bf6 <_printf_float+0x43e>

08003c0c <_printf_common>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	4616      	mov	r6, r2
 8003c12:	4698      	mov	r8, r3
 8003c14:	688a      	ldr	r2, [r1, #8]
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfb8      	it	lt
 8003c20:	4613      	movlt	r3, r2
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c28:	4607      	mov	r7, r0
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	b10a      	cbz	r2, 8003c32 <_printf_common+0x26>
 8003c2e:	3301      	adds	r3, #1
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	0699      	lsls	r1, r3, #26
 8003c36:	bf42      	ittt	mi
 8003c38:	6833      	ldrmi	r3, [r6, #0]
 8003c3a:	3302      	addmi	r3, #2
 8003c3c:	6033      	strmi	r3, [r6, #0]
 8003c3e:	6825      	ldr	r5, [r4, #0]
 8003c40:	f015 0506 	ands.w	r5, r5, #6
 8003c44:	d106      	bne.n	8003c54 <_printf_common+0x48>
 8003c46:	f104 0a19 	add.w	sl, r4, #25
 8003c4a:	68e3      	ldr	r3, [r4, #12]
 8003c4c:	6832      	ldr	r2, [r6, #0]
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	42ab      	cmp	r3, r5
 8003c52:	dc26      	bgt.n	8003ca2 <_printf_common+0x96>
 8003c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	3b00      	subs	r3, #0
 8003c5c:	bf18      	it	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	0692      	lsls	r2, r2, #26
 8003c62:	d42b      	bmi.n	8003cbc <_printf_common+0xb0>
 8003c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4638      	mov	r0, r7
 8003c6c:	47c8      	blx	r9
 8003c6e:	3001      	adds	r0, #1
 8003c70:	d01e      	beq.n	8003cb0 <_printf_common+0xa4>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	6922      	ldr	r2, [r4, #16]
 8003c76:	f003 0306 	and.w	r3, r3, #6
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	bf02      	ittt	eq
 8003c7e:	68e5      	ldreq	r5, [r4, #12]
 8003c80:	6833      	ldreq	r3, [r6, #0]
 8003c82:	1aed      	subeq	r5, r5, r3
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	bf0c      	ite	eq
 8003c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c8c:	2500      	movne	r5, #0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	bfc4      	itt	gt
 8003c92:	1a9b      	subgt	r3, r3, r2
 8003c94:	18ed      	addgt	r5, r5, r3
 8003c96:	2600      	movs	r6, #0
 8003c98:	341a      	adds	r4, #26
 8003c9a:	42b5      	cmp	r5, r6
 8003c9c:	d11a      	bne.n	8003cd4 <_printf_common+0xc8>
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	e008      	b.n	8003cb4 <_printf_common+0xa8>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4652      	mov	r2, sl
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	4638      	mov	r0, r7
 8003caa:	47c8      	blx	r9
 8003cac:	3001      	adds	r0, #1
 8003cae:	d103      	bne.n	8003cb8 <_printf_common+0xac>
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb8:	3501      	adds	r5, #1
 8003cba:	e7c6      	b.n	8003c4a <_printf_common+0x3e>
 8003cbc:	18e1      	adds	r1, r4, r3
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	2030      	movs	r0, #48	@ 0x30
 8003cc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cc6:	4422      	add	r2, r4
 8003cc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ccc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	e7c7      	b.n	8003c64 <_printf_common+0x58>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	4641      	mov	r1, r8
 8003cda:	4638      	mov	r0, r7
 8003cdc:	47c8      	blx	r9
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d0e6      	beq.n	8003cb0 <_printf_common+0xa4>
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7d9      	b.n	8003c9a <_printf_common+0x8e>
	...

08003ce8 <_printf_i>:
 8003ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	7e0f      	ldrb	r7, [r1, #24]
 8003cee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cf0:	2f78      	cmp	r7, #120	@ 0x78
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	469a      	mov	sl, r3
 8003cfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003cfe:	d807      	bhi.n	8003d10 <_printf_i+0x28>
 8003d00:	2f62      	cmp	r7, #98	@ 0x62
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x32>
 8003d04:	2f00      	cmp	r7, #0
 8003d06:	f000 80d1 	beq.w	8003eac <_printf_i+0x1c4>
 8003d0a:	2f58      	cmp	r7, #88	@ 0x58
 8003d0c:	f000 80b8 	beq.w	8003e80 <_printf_i+0x198>
 8003d10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d18:	e03a      	b.n	8003d90 <_printf_i+0xa8>
 8003d1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d1e:	2b15      	cmp	r3, #21
 8003d20:	d8f6      	bhi.n	8003d10 <_printf_i+0x28>
 8003d22:	a101      	add	r1, pc, #4	@ (adr r1, 8003d28 <_printf_i+0x40>)
 8003d24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003d11 	.word	0x08003d11
 8003d34:	08003d11 	.word	0x08003d11
 8003d38:	08003d11 	.word	0x08003d11
 8003d3c:	08003d11 	.word	0x08003d11
 8003d40:	08003d95 	.word	0x08003d95
 8003d44:	08003d11 	.word	0x08003d11
 8003d48:	08003d11 	.word	0x08003d11
 8003d4c:	08003d11 	.word	0x08003d11
 8003d50:	08003d11 	.word	0x08003d11
 8003d54:	08003e93 	.word	0x08003e93
 8003d58:	08003dbf 	.word	0x08003dbf
 8003d5c:	08003e4d 	.word	0x08003e4d
 8003d60:	08003d11 	.word	0x08003d11
 8003d64:	08003d11 	.word	0x08003d11
 8003d68:	08003eb5 	.word	0x08003eb5
 8003d6c:	08003d11 	.word	0x08003d11
 8003d70:	08003dbf 	.word	0x08003dbf
 8003d74:	08003d11 	.word	0x08003d11
 8003d78:	08003d11 	.word	0x08003d11
 8003d7c:	08003e55 	.word	0x08003e55
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6032      	str	r2, [r6, #0]
 8003d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d90:	2301      	movs	r3, #1
 8003d92:	e09c      	b.n	8003ece <_printf_i+0x1e6>
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	1d19      	adds	r1, r3, #4
 8003d9a:	6031      	str	r1, [r6, #0]
 8003d9c:	0606      	lsls	r6, r0, #24
 8003d9e:	d501      	bpl.n	8003da4 <_printf_i+0xbc>
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	e003      	b.n	8003dac <_printf_i+0xc4>
 8003da4:	0645      	lsls	r5, r0, #25
 8003da6:	d5fb      	bpl.n	8003da0 <_printf_i+0xb8>
 8003da8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	da03      	bge.n	8003db8 <_printf_i+0xd0>
 8003db0:	232d      	movs	r3, #45	@ 0x2d
 8003db2:	426d      	negs	r5, r5
 8003db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db8:	4858      	ldr	r0, [pc, #352]	@ (8003f1c <_printf_i+0x234>)
 8003dba:	230a      	movs	r3, #10
 8003dbc:	e011      	b.n	8003de2 <_printf_i+0xfa>
 8003dbe:	6821      	ldr	r1, [r4, #0]
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	0608      	lsls	r0, r1, #24
 8003dc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dc8:	d402      	bmi.n	8003dd0 <_printf_i+0xe8>
 8003dca:	0649      	lsls	r1, r1, #25
 8003dcc:	bf48      	it	mi
 8003dce:	b2ad      	uxthmi	r5, r5
 8003dd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dd2:	4852      	ldr	r0, [pc, #328]	@ (8003f1c <_printf_i+0x234>)
 8003dd4:	6033      	str	r3, [r6, #0]
 8003dd6:	bf14      	ite	ne
 8003dd8:	230a      	movne	r3, #10
 8003dda:	2308      	moveq	r3, #8
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003de2:	6866      	ldr	r6, [r4, #4]
 8003de4:	60a6      	str	r6, [r4, #8]
 8003de6:	2e00      	cmp	r6, #0
 8003de8:	db05      	blt.n	8003df6 <_printf_i+0x10e>
 8003dea:	6821      	ldr	r1, [r4, #0]
 8003dec:	432e      	orrs	r6, r5
 8003dee:	f021 0104 	bic.w	r1, r1, #4
 8003df2:	6021      	str	r1, [r4, #0]
 8003df4:	d04b      	beq.n	8003e8e <_printf_i+0x1a6>
 8003df6:	4616      	mov	r6, r2
 8003df8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003dfc:	fb03 5711 	mls	r7, r3, r1, r5
 8003e00:	5dc7      	ldrb	r7, [r0, r7]
 8003e02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e06:	462f      	mov	r7, r5
 8003e08:	42bb      	cmp	r3, r7
 8003e0a:	460d      	mov	r5, r1
 8003e0c:	d9f4      	bls.n	8003df8 <_printf_i+0x110>
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d10b      	bne.n	8003e2a <_printf_i+0x142>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	07df      	lsls	r7, r3, #31
 8003e16:	d508      	bpl.n	8003e2a <_printf_i+0x142>
 8003e18:	6923      	ldr	r3, [r4, #16]
 8003e1a:	6861      	ldr	r1, [r4, #4]
 8003e1c:	4299      	cmp	r1, r3
 8003e1e:	bfde      	ittt	le
 8003e20:	2330      	movle	r3, #48	@ 0x30
 8003e22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e2a:	1b92      	subs	r2, r2, r6
 8003e2c:	6122      	str	r2, [r4, #16]
 8003e2e:	f8cd a000 	str.w	sl, [sp]
 8003e32:	464b      	mov	r3, r9
 8003e34:	aa03      	add	r2, sp, #12
 8003e36:	4621      	mov	r1, r4
 8003e38:	4640      	mov	r0, r8
 8003e3a:	f7ff fee7 	bl	8003c0c <_printf_common>
 8003e3e:	3001      	adds	r0, #1
 8003e40:	d14a      	bne.n	8003ed8 <_printf_i+0x1f0>
 8003e42:	f04f 30ff 	mov.w	r0, #4294967295
 8003e46:	b004      	add	sp, #16
 8003e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f043 0320 	orr.w	r3, r3, #32
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	4832      	ldr	r0, [pc, #200]	@ (8003f20 <_printf_i+0x238>)
 8003e56:	2778      	movs	r7, #120	@ 0x78
 8003e58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	6831      	ldr	r1, [r6, #0]
 8003e60:	061f      	lsls	r7, r3, #24
 8003e62:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e66:	d402      	bmi.n	8003e6e <_printf_i+0x186>
 8003e68:	065f      	lsls	r7, r3, #25
 8003e6a:	bf48      	it	mi
 8003e6c:	b2ad      	uxthmi	r5, r5
 8003e6e:	6031      	str	r1, [r6, #0]
 8003e70:	07d9      	lsls	r1, r3, #31
 8003e72:	bf44      	itt	mi
 8003e74:	f043 0320 	orrmi.w	r3, r3, #32
 8003e78:	6023      	strmi	r3, [r4, #0]
 8003e7a:	b11d      	cbz	r5, 8003e84 <_printf_i+0x19c>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	e7ad      	b.n	8003ddc <_printf_i+0xf4>
 8003e80:	4826      	ldr	r0, [pc, #152]	@ (8003f1c <_printf_i+0x234>)
 8003e82:	e7e9      	b.n	8003e58 <_printf_i+0x170>
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	e7f6      	b.n	8003e7c <_printf_i+0x194>
 8003e8e:	4616      	mov	r6, r2
 8003e90:	e7bd      	b.n	8003e0e <_printf_i+0x126>
 8003e92:	6833      	ldr	r3, [r6, #0]
 8003e94:	6825      	ldr	r5, [r4, #0]
 8003e96:	6961      	ldr	r1, [r4, #20]
 8003e98:	1d18      	adds	r0, r3, #4
 8003e9a:	6030      	str	r0, [r6, #0]
 8003e9c:	062e      	lsls	r6, r5, #24
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	d501      	bpl.n	8003ea6 <_printf_i+0x1be>
 8003ea2:	6019      	str	r1, [r3, #0]
 8003ea4:	e002      	b.n	8003eac <_printf_i+0x1c4>
 8003ea6:	0668      	lsls	r0, r5, #25
 8003ea8:	d5fb      	bpl.n	8003ea2 <_printf_i+0x1ba>
 8003eaa:	8019      	strh	r1, [r3, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	6123      	str	r3, [r4, #16]
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	e7bc      	b.n	8003e2e <_printf_i+0x146>
 8003eb4:	6833      	ldr	r3, [r6, #0]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	6032      	str	r2, [r6, #0]
 8003eba:	681e      	ldr	r6, [r3, #0]
 8003ebc:	6862      	ldr	r2, [r4, #4]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fc f985 	bl	80001d0 <memchr>
 8003ec6:	b108      	cbz	r0, 8003ecc <_printf_i+0x1e4>
 8003ec8:	1b80      	subs	r0, r0, r6
 8003eca:	6060      	str	r0, [r4, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	6123      	str	r3, [r4, #16]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ed6:	e7aa      	b.n	8003e2e <_printf_i+0x146>
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	4632      	mov	r2, r6
 8003edc:	4649      	mov	r1, r9
 8003ede:	4640      	mov	r0, r8
 8003ee0:	47d0      	blx	sl
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d0ad      	beq.n	8003e42 <_printf_i+0x15a>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	079b      	lsls	r3, r3, #30
 8003eea:	d413      	bmi.n	8003f14 <_printf_i+0x22c>
 8003eec:	68e0      	ldr	r0, [r4, #12]
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	4298      	cmp	r0, r3
 8003ef2:	bfb8      	it	lt
 8003ef4:	4618      	movlt	r0, r3
 8003ef6:	e7a6      	b.n	8003e46 <_printf_i+0x15e>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4632      	mov	r2, r6
 8003efc:	4649      	mov	r1, r9
 8003efe:	4640      	mov	r0, r8
 8003f00:	47d0      	blx	sl
 8003f02:	3001      	adds	r0, #1
 8003f04:	d09d      	beq.n	8003e42 <_printf_i+0x15a>
 8003f06:	3501      	adds	r5, #1
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	9903      	ldr	r1, [sp, #12]
 8003f0c:	1a5b      	subs	r3, r3, r1
 8003f0e:	42ab      	cmp	r3, r5
 8003f10:	dcf2      	bgt.n	8003ef8 <_printf_i+0x210>
 8003f12:	e7eb      	b.n	8003eec <_printf_i+0x204>
 8003f14:	2500      	movs	r5, #0
 8003f16:	f104 0619 	add.w	r6, r4, #25
 8003f1a:	e7f5      	b.n	8003f08 <_printf_i+0x220>
 8003f1c:	08006052 	.word	0x08006052
 8003f20:	08006063 	.word	0x08006063

08003f24 <std>:
 8003f24:	2300      	movs	r3, #0
 8003f26:	b510      	push	{r4, lr}
 8003f28:	4604      	mov	r4, r0
 8003f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f32:	6083      	str	r3, [r0, #8]
 8003f34:	8181      	strh	r1, [r0, #12]
 8003f36:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f38:	81c2      	strh	r2, [r0, #14]
 8003f3a:	6183      	str	r3, [r0, #24]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	2208      	movs	r2, #8
 8003f40:	305c      	adds	r0, #92	@ 0x5c
 8003f42:	f000 f99b 	bl	800427c <memset>
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <std+0x58>)
 8003f48:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <std+0x5c>)
 8003f4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <std+0x60>)
 8003f50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <std+0x64>)
 8003f54:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <std+0x68>)
 8003f58:	6224      	str	r4, [r4, #32]
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	d006      	beq.n	8003f6c <std+0x48>
 8003f5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f62:	4294      	cmp	r4, r2
 8003f64:	d002      	beq.n	8003f6c <std+0x48>
 8003f66:	33d0      	adds	r3, #208	@ 0xd0
 8003f68:	429c      	cmp	r4, r3
 8003f6a:	d105      	bne.n	8003f78 <std+0x54>
 8003f6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f74:	f000 b9fe 	b.w	8004374 <__retarget_lock_init_recursive>
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	bf00      	nop
 8003f7c:	080040cd 	.word	0x080040cd
 8003f80:	080040ef 	.word	0x080040ef
 8003f84:	08004127 	.word	0x08004127
 8003f88:	0800414b 	.word	0x0800414b
 8003f8c:	200003a0 	.word	0x200003a0

08003f90 <stdio_exit_handler>:
 8003f90:	4a02      	ldr	r2, [pc, #8]	@ (8003f9c <stdio_exit_handler+0xc>)
 8003f92:	4903      	ldr	r1, [pc, #12]	@ (8003fa0 <stdio_exit_handler+0x10>)
 8003f94:	4803      	ldr	r0, [pc, #12]	@ (8003fa4 <stdio_exit_handler+0x14>)
 8003f96:	f000 b869 	b.w	800406c <_fwalk_sglue>
 8003f9a:	bf00      	nop
 8003f9c:	200000a8 	.word	0x200000a8
 8003fa0:	08005d09 	.word	0x08005d09
 8003fa4:	200000b8 	.word	0x200000b8

08003fa8 <cleanup_stdio>:
 8003fa8:	6841      	ldr	r1, [r0, #4]
 8003faa:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <cleanup_stdio+0x34>)
 8003fac:	4299      	cmp	r1, r3
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	d001      	beq.n	8003fb8 <cleanup_stdio+0x10>
 8003fb4:	f001 fea8 	bl	8005d08 <_fflush_r>
 8003fb8:	68a1      	ldr	r1, [r4, #8]
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <cleanup_stdio+0x38>)
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	d002      	beq.n	8003fc6 <cleanup_stdio+0x1e>
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f001 fea1 	bl	8005d08 <_fflush_r>
 8003fc6:	68e1      	ldr	r1, [r4, #12]
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <cleanup_stdio+0x3c>)
 8003fca:	4299      	cmp	r1, r3
 8003fcc:	d004      	beq.n	8003fd8 <cleanup_stdio+0x30>
 8003fce:	4620      	mov	r0, r4
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd4:	f001 be98 	b.w	8005d08 <_fflush_r>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	200003a0 	.word	0x200003a0
 8003fe0:	20000408 	.word	0x20000408
 8003fe4:	20000470 	.word	0x20000470

08003fe8 <global_stdio_init.part.0>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <global_stdio_init.part.0+0x30>)
 8003fec:	4c0b      	ldr	r4, [pc, #44]	@ (800401c <global_stdio_init.part.0+0x34>)
 8003fee:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <global_stdio_init.part.0+0x38>)
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	f7ff ff94 	bl	8003f24 <std>
 8003ffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004000:	2201      	movs	r2, #1
 8004002:	2109      	movs	r1, #9
 8004004:	f7ff ff8e 	bl	8003f24 <std>
 8004008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800400c:	2202      	movs	r2, #2
 800400e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004012:	2112      	movs	r1, #18
 8004014:	f7ff bf86 	b.w	8003f24 <std>
 8004018:	200004d8 	.word	0x200004d8
 800401c:	200003a0 	.word	0x200003a0
 8004020:	08003f91 	.word	0x08003f91

08004024 <__sfp_lock_acquire>:
 8004024:	4801      	ldr	r0, [pc, #4]	@ (800402c <__sfp_lock_acquire+0x8>)
 8004026:	f000 b9a6 	b.w	8004376 <__retarget_lock_acquire_recursive>
 800402a:	bf00      	nop
 800402c:	200004e1 	.word	0x200004e1

08004030 <__sfp_lock_release>:
 8004030:	4801      	ldr	r0, [pc, #4]	@ (8004038 <__sfp_lock_release+0x8>)
 8004032:	f000 b9a1 	b.w	8004378 <__retarget_lock_release_recursive>
 8004036:	bf00      	nop
 8004038:	200004e1 	.word	0x200004e1

0800403c <__sinit>:
 800403c:	b510      	push	{r4, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	f7ff fff0 	bl	8004024 <__sfp_lock_acquire>
 8004044:	6a23      	ldr	r3, [r4, #32]
 8004046:	b11b      	cbz	r3, 8004050 <__sinit+0x14>
 8004048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800404c:	f7ff bff0 	b.w	8004030 <__sfp_lock_release>
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <__sinit+0x28>)
 8004052:	6223      	str	r3, [r4, #32]
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <__sinit+0x2c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f5      	bne.n	8004048 <__sinit+0xc>
 800405c:	f7ff ffc4 	bl	8003fe8 <global_stdio_init.part.0>
 8004060:	e7f2      	b.n	8004048 <__sinit+0xc>
 8004062:	bf00      	nop
 8004064:	08003fa9 	.word	0x08003fa9
 8004068:	200004d8 	.word	0x200004d8

0800406c <_fwalk_sglue>:
 800406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004070:	4607      	mov	r7, r0
 8004072:	4688      	mov	r8, r1
 8004074:	4614      	mov	r4, r2
 8004076:	2600      	movs	r6, #0
 8004078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800407c:	f1b9 0901 	subs.w	r9, r9, #1
 8004080:	d505      	bpl.n	800408e <_fwalk_sglue+0x22>
 8004082:	6824      	ldr	r4, [r4, #0]
 8004084:	2c00      	cmp	r4, #0
 8004086:	d1f7      	bne.n	8004078 <_fwalk_sglue+0xc>
 8004088:	4630      	mov	r0, r6
 800408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408e:	89ab      	ldrh	r3, [r5, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d907      	bls.n	80040a4 <_fwalk_sglue+0x38>
 8004094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004098:	3301      	adds	r3, #1
 800409a:	d003      	beq.n	80040a4 <_fwalk_sglue+0x38>
 800409c:	4629      	mov	r1, r5
 800409e:	4638      	mov	r0, r7
 80040a0:	47c0      	blx	r8
 80040a2:	4306      	orrs	r6, r0
 80040a4:	3568      	adds	r5, #104	@ 0x68
 80040a6:	e7e9      	b.n	800407c <_fwalk_sglue+0x10>

080040a8 <iprintf>:
 80040a8:	b40f      	push	{r0, r1, r2, r3}
 80040aa:	b507      	push	{r0, r1, r2, lr}
 80040ac:	4906      	ldr	r1, [pc, #24]	@ (80040c8 <iprintf+0x20>)
 80040ae:	ab04      	add	r3, sp, #16
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b6:	6881      	ldr	r1, [r0, #8]
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	f001 fc89 	bl	80059d0 <_vfiprintf_r>
 80040be:	b003      	add	sp, #12
 80040c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040c4:	b004      	add	sp, #16
 80040c6:	4770      	bx	lr
 80040c8:	200000b4 	.word	0x200000b4

080040cc <__sread>:
 80040cc:	b510      	push	{r4, lr}
 80040ce:	460c      	mov	r4, r1
 80040d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d4:	f000 f900 	bl	80042d8 <_read_r>
 80040d8:	2800      	cmp	r0, #0
 80040da:	bfab      	itete	ge
 80040dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040de:	89a3      	ldrhlt	r3, [r4, #12]
 80040e0:	181b      	addge	r3, r3, r0
 80040e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040e6:	bfac      	ite	ge
 80040e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040ea:	81a3      	strhlt	r3, [r4, #12]
 80040ec:	bd10      	pop	{r4, pc}

080040ee <__swrite>:
 80040ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040f2:	461f      	mov	r7, r3
 80040f4:	898b      	ldrh	r3, [r1, #12]
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	4605      	mov	r5, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4616      	mov	r6, r2
 80040fe:	d505      	bpl.n	800410c <__swrite+0x1e>
 8004100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004104:	2302      	movs	r3, #2
 8004106:	2200      	movs	r2, #0
 8004108:	f000 f8d4 	bl	80042b4 <_lseek_r>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	4632      	mov	r2, r6
 800411a:	463b      	mov	r3, r7
 800411c:	4628      	mov	r0, r5
 800411e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004122:	f000 b8eb 	b.w	80042fc <_write_r>

08004126 <__sseek>:
 8004126:	b510      	push	{r4, lr}
 8004128:	460c      	mov	r4, r1
 800412a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412e:	f000 f8c1 	bl	80042b4 <_lseek_r>
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	bf15      	itete	ne
 8004138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800413a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800413e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004142:	81a3      	strheq	r3, [r4, #12]
 8004144:	bf18      	it	ne
 8004146:	81a3      	strhne	r3, [r4, #12]
 8004148:	bd10      	pop	{r4, pc}

0800414a <__sclose>:
 800414a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414e:	f000 b8a1 	b.w	8004294 <_close_r>

08004152 <__swbuf_r>:
 8004152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004154:	460e      	mov	r6, r1
 8004156:	4614      	mov	r4, r2
 8004158:	4605      	mov	r5, r0
 800415a:	b118      	cbz	r0, 8004164 <__swbuf_r+0x12>
 800415c:	6a03      	ldr	r3, [r0, #32]
 800415e:	b90b      	cbnz	r3, 8004164 <__swbuf_r+0x12>
 8004160:	f7ff ff6c 	bl	800403c <__sinit>
 8004164:	69a3      	ldr	r3, [r4, #24]
 8004166:	60a3      	str	r3, [r4, #8]
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	071a      	lsls	r2, r3, #28
 800416c:	d501      	bpl.n	8004172 <__swbuf_r+0x20>
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	b943      	cbnz	r3, 8004184 <__swbuf_r+0x32>
 8004172:	4621      	mov	r1, r4
 8004174:	4628      	mov	r0, r5
 8004176:	f000 f82b 	bl	80041d0 <__swsetup_r>
 800417a:	b118      	cbz	r0, 8004184 <__swbuf_r+0x32>
 800417c:	f04f 37ff 	mov.w	r7, #4294967295
 8004180:	4638      	mov	r0, r7
 8004182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004184:	6823      	ldr	r3, [r4, #0]
 8004186:	6922      	ldr	r2, [r4, #16]
 8004188:	1a98      	subs	r0, r3, r2
 800418a:	6963      	ldr	r3, [r4, #20]
 800418c:	b2f6      	uxtb	r6, r6
 800418e:	4283      	cmp	r3, r0
 8004190:	4637      	mov	r7, r6
 8004192:	dc05      	bgt.n	80041a0 <__swbuf_r+0x4e>
 8004194:	4621      	mov	r1, r4
 8004196:	4628      	mov	r0, r5
 8004198:	f001 fdb6 	bl	8005d08 <_fflush_r>
 800419c:	2800      	cmp	r0, #0
 800419e:	d1ed      	bne.n	800417c <__swbuf_r+0x2a>
 80041a0:	68a3      	ldr	r3, [r4, #8]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	60a3      	str	r3, [r4, #8]
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	6022      	str	r2, [r4, #0]
 80041ac:	701e      	strb	r6, [r3, #0]
 80041ae:	6962      	ldr	r2, [r4, #20]
 80041b0:	1c43      	adds	r3, r0, #1
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d004      	beq.n	80041c0 <__swbuf_r+0x6e>
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	07db      	lsls	r3, r3, #31
 80041ba:	d5e1      	bpl.n	8004180 <__swbuf_r+0x2e>
 80041bc:	2e0a      	cmp	r6, #10
 80041be:	d1df      	bne.n	8004180 <__swbuf_r+0x2e>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4628      	mov	r0, r5
 80041c4:	f001 fda0 	bl	8005d08 <_fflush_r>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d0d9      	beq.n	8004180 <__swbuf_r+0x2e>
 80041cc:	e7d6      	b.n	800417c <__swbuf_r+0x2a>
	...

080041d0 <__swsetup_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4b29      	ldr	r3, [pc, #164]	@ (8004278 <__swsetup_r+0xa8>)
 80041d4:	4605      	mov	r5, r0
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	460c      	mov	r4, r1
 80041da:	b118      	cbz	r0, 80041e4 <__swsetup_r+0x14>
 80041dc:	6a03      	ldr	r3, [r0, #32]
 80041de:	b90b      	cbnz	r3, 80041e4 <__swsetup_r+0x14>
 80041e0:	f7ff ff2c 	bl	800403c <__sinit>
 80041e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e8:	0719      	lsls	r1, r3, #28
 80041ea:	d422      	bmi.n	8004232 <__swsetup_r+0x62>
 80041ec:	06da      	lsls	r2, r3, #27
 80041ee:	d407      	bmi.n	8004200 <__swsetup_r+0x30>
 80041f0:	2209      	movs	r2, #9
 80041f2:	602a      	str	r2, [r5, #0]
 80041f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	e033      	b.n	8004268 <__swsetup_r+0x98>
 8004200:	0758      	lsls	r0, r3, #29
 8004202:	d512      	bpl.n	800422a <__swsetup_r+0x5a>
 8004204:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004206:	b141      	cbz	r1, 800421a <__swsetup_r+0x4a>
 8004208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800420c:	4299      	cmp	r1, r3
 800420e:	d002      	beq.n	8004216 <__swsetup_r+0x46>
 8004210:	4628      	mov	r0, r5
 8004212:	f000 ff39 	bl	8005088 <_free_r>
 8004216:	2300      	movs	r3, #0
 8004218:	6363      	str	r3, [r4, #52]	@ 0x34
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	2300      	movs	r3, #0
 8004224:	6063      	str	r3, [r4, #4]
 8004226:	6923      	ldr	r3, [r4, #16]
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	89a3      	ldrh	r3, [r4, #12]
 800422c:	f043 0308 	orr.w	r3, r3, #8
 8004230:	81a3      	strh	r3, [r4, #12]
 8004232:	6923      	ldr	r3, [r4, #16]
 8004234:	b94b      	cbnz	r3, 800424a <__swsetup_r+0x7a>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800423c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004240:	d003      	beq.n	800424a <__swsetup_r+0x7a>
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f001 fdbf 	bl	8005dc8 <__smakebuf_r>
 800424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424e:	f013 0201 	ands.w	r2, r3, #1
 8004252:	d00a      	beq.n	800426a <__swsetup_r+0x9a>
 8004254:	2200      	movs	r2, #0
 8004256:	60a2      	str	r2, [r4, #8]
 8004258:	6962      	ldr	r2, [r4, #20]
 800425a:	4252      	negs	r2, r2
 800425c:	61a2      	str	r2, [r4, #24]
 800425e:	6922      	ldr	r2, [r4, #16]
 8004260:	b942      	cbnz	r2, 8004274 <__swsetup_r+0xa4>
 8004262:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004266:	d1c5      	bne.n	80041f4 <__swsetup_r+0x24>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	0799      	lsls	r1, r3, #30
 800426c:	bf58      	it	pl
 800426e:	6962      	ldrpl	r2, [r4, #20]
 8004270:	60a2      	str	r2, [r4, #8]
 8004272:	e7f4      	b.n	800425e <__swsetup_r+0x8e>
 8004274:	2000      	movs	r0, #0
 8004276:	e7f7      	b.n	8004268 <__swsetup_r+0x98>
 8004278:	200000b4 	.word	0x200000b4

0800427c <memset>:
 800427c:	4402      	add	r2, r0
 800427e:	4603      	mov	r3, r0
 8004280:	4293      	cmp	r3, r2
 8004282:	d100      	bne.n	8004286 <memset+0xa>
 8004284:	4770      	bx	lr
 8004286:	f803 1b01 	strb.w	r1, [r3], #1
 800428a:	e7f9      	b.n	8004280 <memset+0x4>

0800428c <_localeconv_r>:
 800428c:	4800      	ldr	r0, [pc, #0]	@ (8004290 <_localeconv_r+0x4>)
 800428e:	4770      	bx	lr
 8004290:	200001f4 	.word	0x200001f4

08004294 <_close_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d06      	ldr	r5, [pc, #24]	@ (80042b0 <_close_r+0x1c>)
 8004298:	2300      	movs	r3, #0
 800429a:	4604      	mov	r4, r0
 800429c:	4608      	mov	r0, r1
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	f7fe fffc 	bl	800329c <_close>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d102      	bne.n	80042ae <_close_r+0x1a>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	b103      	cbz	r3, 80042ae <_close_r+0x1a>
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	200004dc 	.word	0x200004dc

080042b4 <_lseek_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4d07      	ldr	r5, [pc, #28]	@ (80042d4 <_lseek_r+0x20>)
 80042b8:	4604      	mov	r4, r0
 80042ba:	4608      	mov	r0, r1
 80042bc:	4611      	mov	r1, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	602a      	str	r2, [r5, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f7fe ffab 	bl	800321e <_lseek>
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	d102      	bne.n	80042d2 <_lseek_r+0x1e>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	b103      	cbz	r3, 80042d2 <_lseek_r+0x1e>
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	200004dc 	.word	0x200004dc

080042d8 <_read_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4d07      	ldr	r5, [pc, #28]	@ (80042f8 <_read_r+0x20>)
 80042dc:	4604      	mov	r4, r0
 80042de:	4608      	mov	r0, r1
 80042e0:	4611      	mov	r1, r2
 80042e2:	2200      	movs	r2, #0
 80042e4:	602a      	str	r2, [r5, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	f7fe ff43 	bl	8003172 <_read>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_read_r+0x1e>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_read_r+0x1e>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	200004dc 	.word	0x200004dc

080042fc <_write_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d07      	ldr	r5, [pc, #28]	@ (800431c <_write_r+0x20>)
 8004300:	4604      	mov	r4, r0
 8004302:	4608      	mov	r0, r1
 8004304:	4611      	mov	r1, r2
 8004306:	2200      	movs	r2, #0
 8004308:	602a      	str	r2, [r5, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fe ff99 	bl	8003242 <_write>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_write_r+0x1e>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_write_r+0x1e>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	200004dc 	.word	0x200004dc

08004320 <__errno>:
 8004320:	4b01      	ldr	r3, [pc, #4]	@ (8004328 <__errno+0x8>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	200000b4 	.word	0x200000b4

0800432c <__libc_init_array>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4d0d      	ldr	r5, [pc, #52]	@ (8004364 <__libc_init_array+0x38>)
 8004330:	4c0d      	ldr	r4, [pc, #52]	@ (8004368 <__libc_init_array+0x3c>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	2600      	movs	r6, #0
 8004338:	42a6      	cmp	r6, r4
 800433a:	d109      	bne.n	8004350 <__libc_init_array+0x24>
 800433c:	4d0b      	ldr	r5, [pc, #44]	@ (800436c <__libc_init_array+0x40>)
 800433e:	4c0c      	ldr	r4, [pc, #48]	@ (8004370 <__libc_init_array+0x44>)
 8004340:	f001 fe38 	bl	8005fb4 <_init>
 8004344:	1b64      	subs	r4, r4, r5
 8004346:	10a4      	asrs	r4, r4, #2
 8004348:	2600      	movs	r6, #0
 800434a:	42a6      	cmp	r6, r4
 800434c:	d105      	bne.n	800435a <__libc_init_array+0x2e>
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	f855 3b04 	ldr.w	r3, [r5], #4
 8004354:	4798      	blx	r3
 8004356:	3601      	adds	r6, #1
 8004358:	e7ee      	b.n	8004338 <__libc_init_array+0xc>
 800435a:	f855 3b04 	ldr.w	r3, [r5], #4
 800435e:	4798      	blx	r3
 8004360:	3601      	adds	r6, #1
 8004362:	e7f2      	b.n	800434a <__libc_init_array+0x1e>
 8004364:	080063bc 	.word	0x080063bc
 8004368:	080063bc 	.word	0x080063bc
 800436c:	080063bc 	.word	0x080063bc
 8004370:	080063c0 	.word	0x080063c0

08004374 <__retarget_lock_init_recursive>:
 8004374:	4770      	bx	lr

08004376 <__retarget_lock_acquire_recursive>:
 8004376:	4770      	bx	lr

08004378 <__retarget_lock_release_recursive>:
 8004378:	4770      	bx	lr

0800437a <memcpy>:
 800437a:	440a      	add	r2, r1
 800437c:	4291      	cmp	r1, r2
 800437e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004382:	d100      	bne.n	8004386 <memcpy+0xc>
 8004384:	4770      	bx	lr
 8004386:	b510      	push	{r4, lr}
 8004388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800438c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004390:	4291      	cmp	r1, r2
 8004392:	d1f9      	bne.n	8004388 <memcpy+0xe>
 8004394:	bd10      	pop	{r4, pc}
	...

08004398 <__assert_func>:
 8004398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800439a:	4614      	mov	r4, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <__assert_func+0x2c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4605      	mov	r5, r0
 80043a4:	68d8      	ldr	r0, [r3, #12]
 80043a6:	b14c      	cbz	r4, 80043bc <__assert_func+0x24>
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <__assert_func+0x30>)
 80043aa:	9100      	str	r1, [sp, #0]
 80043ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043b0:	4906      	ldr	r1, [pc, #24]	@ (80043cc <__assert_func+0x34>)
 80043b2:	462b      	mov	r3, r5
 80043b4:	f001 fcd0 	bl	8005d58 <fiprintf>
 80043b8:	f001 fd74 	bl	8005ea4 <abort>
 80043bc:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <__assert_func+0x38>)
 80043be:	461c      	mov	r4, r3
 80043c0:	e7f3      	b.n	80043aa <__assert_func+0x12>
 80043c2:	bf00      	nop
 80043c4:	200000b4 	.word	0x200000b4
 80043c8:	08006074 	.word	0x08006074
 80043cc:	08006081 	.word	0x08006081
 80043d0:	080060af 	.word	0x080060af

080043d4 <quorem>:
 80043d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	6903      	ldr	r3, [r0, #16]
 80043da:	690c      	ldr	r4, [r1, #16]
 80043dc:	42a3      	cmp	r3, r4
 80043de:	4607      	mov	r7, r0
 80043e0:	db7e      	blt.n	80044e0 <quorem+0x10c>
 80043e2:	3c01      	subs	r4, #1
 80043e4:	f101 0814 	add.w	r8, r1, #20
 80043e8:	00a3      	lsls	r3, r4, #2
 80043ea:	f100 0514 	add.w	r5, r0, #20
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043f4:	9301      	str	r3, [sp, #4]
 80043f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043fe:	3301      	adds	r3, #1
 8004400:	429a      	cmp	r2, r3
 8004402:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004406:	fbb2 f6f3 	udiv	r6, r2, r3
 800440a:	d32e      	bcc.n	800446a <quorem+0x96>
 800440c:	f04f 0a00 	mov.w	sl, #0
 8004410:	46c4      	mov	ip, r8
 8004412:	46ae      	mov	lr, r5
 8004414:	46d3      	mov	fp, sl
 8004416:	f85c 3b04 	ldr.w	r3, [ip], #4
 800441a:	b298      	uxth	r0, r3
 800441c:	fb06 a000 	mla	r0, r6, r0, sl
 8004420:	0c02      	lsrs	r2, r0, #16
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	fb06 2303 	mla	r3, r6, r3, r2
 8004428:	f8de 2000 	ldr.w	r2, [lr]
 800442c:	b280      	uxth	r0, r0
 800442e:	b292      	uxth	r2, r2
 8004430:	1a12      	subs	r2, r2, r0
 8004432:	445a      	add	r2, fp
 8004434:	f8de 0000 	ldr.w	r0, [lr]
 8004438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800443c:	b29b      	uxth	r3, r3
 800443e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004442:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004446:	b292      	uxth	r2, r2
 8004448:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800444c:	45e1      	cmp	r9, ip
 800444e:	f84e 2b04 	str.w	r2, [lr], #4
 8004452:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004456:	d2de      	bcs.n	8004416 <quorem+0x42>
 8004458:	9b00      	ldr	r3, [sp, #0]
 800445a:	58eb      	ldr	r3, [r5, r3]
 800445c:	b92b      	cbnz	r3, 800446a <quorem+0x96>
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	3b04      	subs	r3, #4
 8004462:	429d      	cmp	r5, r3
 8004464:	461a      	mov	r2, r3
 8004466:	d32f      	bcc.n	80044c8 <quorem+0xf4>
 8004468:	613c      	str	r4, [r7, #16]
 800446a:	4638      	mov	r0, r7
 800446c:	f001 f97e 	bl	800576c <__mcmp>
 8004470:	2800      	cmp	r0, #0
 8004472:	db25      	blt.n	80044c0 <quorem+0xec>
 8004474:	4629      	mov	r1, r5
 8004476:	2000      	movs	r0, #0
 8004478:	f858 2b04 	ldr.w	r2, [r8], #4
 800447c:	f8d1 c000 	ldr.w	ip, [r1]
 8004480:	fa1f fe82 	uxth.w	lr, r2
 8004484:	fa1f f38c 	uxth.w	r3, ip
 8004488:	eba3 030e 	sub.w	r3, r3, lr
 800448c:	4403      	add	r3, r0
 800448e:	0c12      	lsrs	r2, r2, #16
 8004490:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004494:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004498:	b29b      	uxth	r3, r3
 800449a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800449e:	45c1      	cmp	r9, r8
 80044a0:	f841 3b04 	str.w	r3, [r1], #4
 80044a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80044a8:	d2e6      	bcs.n	8004478 <quorem+0xa4>
 80044aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80044ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80044b2:	b922      	cbnz	r2, 80044be <quorem+0xea>
 80044b4:	3b04      	subs	r3, #4
 80044b6:	429d      	cmp	r5, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	d30b      	bcc.n	80044d4 <quorem+0x100>
 80044bc:	613c      	str	r4, [r7, #16]
 80044be:	3601      	adds	r6, #1
 80044c0:	4630      	mov	r0, r6
 80044c2:	b003      	add	sp, #12
 80044c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	3b04      	subs	r3, #4
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d1cb      	bne.n	8004468 <quorem+0x94>
 80044d0:	3c01      	subs	r4, #1
 80044d2:	e7c6      	b.n	8004462 <quorem+0x8e>
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	3b04      	subs	r3, #4
 80044d8:	2a00      	cmp	r2, #0
 80044da:	d1ef      	bne.n	80044bc <quorem+0xe8>
 80044dc:	3c01      	subs	r4, #1
 80044de:	e7ea      	b.n	80044b6 <quorem+0xe2>
 80044e0:	2000      	movs	r0, #0
 80044e2:	e7ee      	b.n	80044c2 <quorem+0xee>
 80044e4:	0000      	movs	r0, r0
	...

080044e8 <_dtoa_r>:
 80044e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ec:	69c7      	ldr	r7, [r0, #28]
 80044ee:	b097      	sub	sp, #92	@ 0x5c
 80044f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80044f4:	ec55 4b10 	vmov	r4, r5, d0
 80044f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80044fa:	9107      	str	r1, [sp, #28]
 80044fc:	4681      	mov	r9, r0
 80044fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8004500:	9311      	str	r3, [sp, #68]	@ 0x44
 8004502:	b97f      	cbnz	r7, 8004524 <_dtoa_r+0x3c>
 8004504:	2010      	movs	r0, #16
 8004506:	f000 fe09 	bl	800511c <malloc>
 800450a:	4602      	mov	r2, r0
 800450c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004510:	b920      	cbnz	r0, 800451c <_dtoa_r+0x34>
 8004512:	4ba9      	ldr	r3, [pc, #676]	@ (80047b8 <_dtoa_r+0x2d0>)
 8004514:	21ef      	movs	r1, #239	@ 0xef
 8004516:	48a9      	ldr	r0, [pc, #676]	@ (80047bc <_dtoa_r+0x2d4>)
 8004518:	f7ff ff3e 	bl	8004398 <__assert_func>
 800451c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004520:	6007      	str	r7, [r0, #0]
 8004522:	60c7      	str	r7, [r0, #12]
 8004524:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	b159      	cbz	r1, 8004544 <_dtoa_r+0x5c>
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	604a      	str	r2, [r1, #4]
 8004530:	2301      	movs	r3, #1
 8004532:	4093      	lsls	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
 8004536:	4648      	mov	r0, r9
 8004538:	f000 fee6 	bl	8005308 <_Bfree>
 800453c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	1e2b      	subs	r3, r5, #0
 8004546:	bfb9      	ittee	lt
 8004548:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800454c:	9305      	strlt	r3, [sp, #20]
 800454e:	2300      	movge	r3, #0
 8004550:	6033      	strge	r3, [r6, #0]
 8004552:	9f05      	ldr	r7, [sp, #20]
 8004554:	4b9a      	ldr	r3, [pc, #616]	@ (80047c0 <_dtoa_r+0x2d8>)
 8004556:	bfbc      	itt	lt
 8004558:	2201      	movlt	r2, #1
 800455a:	6032      	strlt	r2, [r6, #0]
 800455c:	43bb      	bics	r3, r7
 800455e:	d112      	bne.n	8004586 <_dtoa_r+0x9e>
 8004560:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004562:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800456c:	4323      	orrs	r3, r4
 800456e:	f000 855a 	beq.w	8005026 <_dtoa_r+0xb3e>
 8004572:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004574:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80047d4 <_dtoa_r+0x2ec>
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 855c 	beq.w	8005036 <_dtoa_r+0xb4e>
 800457e:	f10a 0303 	add.w	r3, sl, #3
 8004582:	f000 bd56 	b.w	8005032 <_dtoa_r+0xb4a>
 8004586:	ed9d 7b04 	vldr	d7, [sp, #16]
 800458a:	2200      	movs	r2, #0
 800458c:	ec51 0b17 	vmov	r0, r1, d7
 8004590:	2300      	movs	r3, #0
 8004592:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004596:	f7fc fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800459a:	4680      	mov	r8, r0
 800459c:	b158      	cbz	r0, 80045b6 <_dtoa_r+0xce>
 800459e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80045a0:	2301      	movs	r3, #1
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80045a6:	b113      	cbz	r3, 80045ae <_dtoa_r+0xc6>
 80045a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80045aa:	4b86      	ldr	r3, [pc, #536]	@ (80047c4 <_dtoa_r+0x2dc>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80047d8 <_dtoa_r+0x2f0>
 80045b2:	f000 bd40 	b.w	8005036 <_dtoa_r+0xb4e>
 80045b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80045ba:	aa14      	add	r2, sp, #80	@ 0x50
 80045bc:	a915      	add	r1, sp, #84	@ 0x54
 80045be:	4648      	mov	r0, r9
 80045c0:	f001 f984 	bl	80058cc <__d2b>
 80045c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80045c8:	9002      	str	r0, [sp, #8]
 80045ca:	2e00      	cmp	r6, #0
 80045cc:	d078      	beq.n	80046c0 <_dtoa_r+0x1d8>
 80045ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80045d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80045dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045e8:	4619      	mov	r1, r3
 80045ea:	2200      	movs	r2, #0
 80045ec:	4b76      	ldr	r3, [pc, #472]	@ (80047c8 <_dtoa_r+0x2e0>)
 80045ee:	f7fb fe4b 	bl	8000288 <__aeabi_dsub>
 80045f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80047a0 <_dtoa_r+0x2b8>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fffe 	bl	80005f8 <__aeabi_dmul>
 80045fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80047a8 <_dtoa_r+0x2c0>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fe43 	bl	800028c <__adddf3>
 8004606:	4604      	mov	r4, r0
 8004608:	4630      	mov	r0, r6
 800460a:	460d      	mov	r5, r1
 800460c:	f7fb ff8a 	bl	8000524 <__aeabi_i2d>
 8004610:	a367      	add	r3, pc, #412	@ (adr r3, 80047b0 <_dtoa_r+0x2c8>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fb ffef 	bl	80005f8 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4620      	mov	r0, r4
 8004620:	4629      	mov	r1, r5
 8004622:	f7fb fe33 	bl	800028c <__adddf3>
 8004626:	4604      	mov	r4, r0
 8004628:	460d      	mov	r5, r1
 800462a:	f7fc fa95 	bl	8000b58 <__aeabi_d2iz>
 800462e:	2200      	movs	r2, #0
 8004630:	4607      	mov	r7, r0
 8004632:	2300      	movs	r3, #0
 8004634:	4620      	mov	r0, r4
 8004636:	4629      	mov	r1, r5
 8004638:	f7fc fa50 	bl	8000adc <__aeabi_dcmplt>
 800463c:	b140      	cbz	r0, 8004650 <_dtoa_r+0x168>
 800463e:	4638      	mov	r0, r7
 8004640:	f7fb ff70 	bl	8000524 <__aeabi_i2d>
 8004644:	4622      	mov	r2, r4
 8004646:	462b      	mov	r3, r5
 8004648:	f7fc fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800464c:	b900      	cbnz	r0, 8004650 <_dtoa_r+0x168>
 800464e:	3f01      	subs	r7, #1
 8004650:	2f16      	cmp	r7, #22
 8004652:	d852      	bhi.n	80046fa <_dtoa_r+0x212>
 8004654:	4b5d      	ldr	r3, [pc, #372]	@ (80047cc <_dtoa_r+0x2e4>)
 8004656:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004662:	f7fc fa3b 	bl	8000adc <__aeabi_dcmplt>
 8004666:	2800      	cmp	r0, #0
 8004668:	d049      	beq.n	80046fe <_dtoa_r+0x216>
 800466a:	3f01      	subs	r7, #1
 800466c:	2300      	movs	r3, #0
 800466e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004670:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004672:	1b9b      	subs	r3, r3, r6
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	bf45      	ittet	mi
 8004678:	f1c3 0301 	rsbmi	r3, r3, #1
 800467c:	9300      	strmi	r3, [sp, #0]
 800467e:	2300      	movpl	r3, #0
 8004680:	2300      	movmi	r3, #0
 8004682:	9206      	str	r2, [sp, #24]
 8004684:	bf54      	ite	pl
 8004686:	9300      	strpl	r3, [sp, #0]
 8004688:	9306      	strmi	r3, [sp, #24]
 800468a:	2f00      	cmp	r7, #0
 800468c:	db39      	blt.n	8004702 <_dtoa_r+0x21a>
 800468e:	9b06      	ldr	r3, [sp, #24]
 8004690:	970d      	str	r7, [sp, #52]	@ 0x34
 8004692:	443b      	add	r3, r7
 8004694:	9306      	str	r3, [sp, #24]
 8004696:	2300      	movs	r3, #0
 8004698:	9308      	str	r3, [sp, #32]
 800469a:	9b07      	ldr	r3, [sp, #28]
 800469c:	2b09      	cmp	r3, #9
 800469e:	d863      	bhi.n	8004768 <_dtoa_r+0x280>
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	bfc4      	itt	gt
 80046a4:	3b04      	subgt	r3, #4
 80046a6:	9307      	strgt	r3, [sp, #28]
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	f1a3 0302 	sub.w	r3, r3, #2
 80046ae:	bfcc      	ite	gt
 80046b0:	2400      	movgt	r4, #0
 80046b2:	2401      	movle	r4, #1
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d863      	bhi.n	8004780 <_dtoa_r+0x298>
 80046b8:	e8df f003 	tbb	[pc, r3]
 80046bc:	2b375452 	.word	0x2b375452
 80046c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80046c4:	441e      	add	r6, r3
 80046c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	bfc1      	itttt	gt
 80046ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046d2:	409f      	lslgt	r7, r3
 80046d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046dc:	bfd6      	itet	le
 80046de:	f1c3 0320 	rsble	r3, r3, #32
 80046e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80046e6:	fa04 f003 	lslle.w	r0, r4, r3
 80046ea:	f7fb ff0b 	bl	8000504 <__aeabi_ui2d>
 80046ee:	2201      	movs	r2, #1
 80046f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046f4:	3e01      	subs	r6, #1
 80046f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80046f8:	e776      	b.n	80045e8 <_dtoa_r+0x100>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e7b7      	b.n	800466e <_dtoa_r+0x186>
 80046fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8004700:	e7b6      	b.n	8004670 <_dtoa_r+0x188>
 8004702:	9b00      	ldr	r3, [sp, #0]
 8004704:	1bdb      	subs	r3, r3, r7
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	427b      	negs	r3, r7
 800470a:	9308      	str	r3, [sp, #32]
 800470c:	2300      	movs	r3, #0
 800470e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004710:	e7c3      	b.n	800469a <_dtoa_r+0x1b2>
 8004712:	2301      	movs	r3, #1
 8004714:	9309      	str	r3, [sp, #36]	@ 0x24
 8004716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004718:	eb07 0b03 	add.w	fp, r7, r3
 800471c:	f10b 0301 	add.w	r3, fp, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	9303      	str	r3, [sp, #12]
 8004724:	bfb8      	it	lt
 8004726:	2301      	movlt	r3, #1
 8004728:	e006      	b.n	8004738 <_dtoa_r+0x250>
 800472a:	2301      	movs	r3, #1
 800472c:	9309      	str	r3, [sp, #36]	@ 0x24
 800472e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004730:	2b00      	cmp	r3, #0
 8004732:	dd28      	ble.n	8004786 <_dtoa_r+0x29e>
 8004734:	469b      	mov	fp, r3
 8004736:	9303      	str	r3, [sp, #12]
 8004738:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800473c:	2100      	movs	r1, #0
 800473e:	2204      	movs	r2, #4
 8004740:	f102 0514 	add.w	r5, r2, #20
 8004744:	429d      	cmp	r5, r3
 8004746:	d926      	bls.n	8004796 <_dtoa_r+0x2ae>
 8004748:	6041      	str	r1, [r0, #4]
 800474a:	4648      	mov	r0, r9
 800474c:	f000 fd9c 	bl	8005288 <_Balloc>
 8004750:	4682      	mov	sl, r0
 8004752:	2800      	cmp	r0, #0
 8004754:	d142      	bne.n	80047dc <_dtoa_r+0x2f4>
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <_dtoa_r+0x2e8>)
 8004758:	4602      	mov	r2, r0
 800475a:	f240 11af 	movw	r1, #431	@ 0x1af
 800475e:	e6da      	b.n	8004516 <_dtoa_r+0x2e>
 8004760:	2300      	movs	r3, #0
 8004762:	e7e3      	b.n	800472c <_dtoa_r+0x244>
 8004764:	2300      	movs	r3, #0
 8004766:	e7d5      	b.n	8004714 <_dtoa_r+0x22c>
 8004768:	2401      	movs	r4, #1
 800476a:	2300      	movs	r3, #0
 800476c:	9307      	str	r3, [sp, #28]
 800476e:	9409      	str	r4, [sp, #36]	@ 0x24
 8004770:	f04f 3bff 	mov.w	fp, #4294967295
 8004774:	2200      	movs	r2, #0
 8004776:	f8cd b00c 	str.w	fp, [sp, #12]
 800477a:	2312      	movs	r3, #18
 800477c:	920c      	str	r2, [sp, #48]	@ 0x30
 800477e:	e7db      	b.n	8004738 <_dtoa_r+0x250>
 8004780:	2301      	movs	r3, #1
 8004782:	9309      	str	r3, [sp, #36]	@ 0x24
 8004784:	e7f4      	b.n	8004770 <_dtoa_r+0x288>
 8004786:	f04f 0b01 	mov.w	fp, #1
 800478a:	f8cd b00c 	str.w	fp, [sp, #12]
 800478e:	465b      	mov	r3, fp
 8004790:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004794:	e7d0      	b.n	8004738 <_dtoa_r+0x250>
 8004796:	3101      	adds	r1, #1
 8004798:	0052      	lsls	r2, r2, #1
 800479a:	e7d1      	b.n	8004740 <_dtoa_r+0x258>
 800479c:	f3af 8000 	nop.w
 80047a0:	636f4361 	.word	0x636f4361
 80047a4:	3fd287a7 	.word	0x3fd287a7
 80047a8:	8b60c8b3 	.word	0x8b60c8b3
 80047ac:	3fc68a28 	.word	0x3fc68a28
 80047b0:	509f79fb 	.word	0x509f79fb
 80047b4:	3fd34413 	.word	0x3fd34413
 80047b8:	080060bd 	.word	0x080060bd
 80047bc:	080060d4 	.word	0x080060d4
 80047c0:	7ff00000 	.word	0x7ff00000
 80047c4:	08006051 	.word	0x08006051
 80047c8:	3ff80000 	.word	0x3ff80000
 80047cc:	080061e8 	.word	0x080061e8
 80047d0:	0800612c 	.word	0x0800612c
 80047d4:	080060b9 	.word	0x080060b9
 80047d8:	08006050 	.word	0x08006050
 80047dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047e0:	6018      	str	r0, [r3, #0]
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	2b0e      	cmp	r3, #14
 80047e6:	f200 80a1 	bhi.w	800492c <_dtoa_r+0x444>
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	f000 809e 	beq.w	800492c <_dtoa_r+0x444>
 80047f0:	2f00      	cmp	r7, #0
 80047f2:	dd33      	ble.n	800485c <_dtoa_r+0x374>
 80047f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004a68 <_dtoa_r+0x580>)
 80047f6:	f007 020f 	and.w	r2, r7, #15
 80047fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047fe:	ed93 7b00 	vldr	d7, [r3]
 8004802:	05f8      	lsls	r0, r7, #23
 8004804:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004808:	ea4f 1427 	mov.w	r4, r7, asr #4
 800480c:	d516      	bpl.n	800483c <_dtoa_r+0x354>
 800480e:	4b97      	ldr	r3, [pc, #604]	@ (8004a6c <_dtoa_r+0x584>)
 8004810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004818:	f7fc f818 	bl	800084c <__aeabi_ddiv>
 800481c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004820:	f004 040f 	and.w	r4, r4, #15
 8004824:	2603      	movs	r6, #3
 8004826:	4d91      	ldr	r5, [pc, #580]	@ (8004a6c <_dtoa_r+0x584>)
 8004828:	b954      	cbnz	r4, 8004840 <_dtoa_r+0x358>
 800482a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800482e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004832:	f7fc f80b 	bl	800084c <__aeabi_ddiv>
 8004836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800483a:	e028      	b.n	800488e <_dtoa_r+0x3a6>
 800483c:	2602      	movs	r6, #2
 800483e:	e7f2      	b.n	8004826 <_dtoa_r+0x33e>
 8004840:	07e1      	lsls	r1, r4, #31
 8004842:	d508      	bpl.n	8004856 <_dtoa_r+0x36e>
 8004844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800484c:	f7fb fed4 	bl	80005f8 <__aeabi_dmul>
 8004850:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004854:	3601      	adds	r6, #1
 8004856:	1064      	asrs	r4, r4, #1
 8004858:	3508      	adds	r5, #8
 800485a:	e7e5      	b.n	8004828 <_dtoa_r+0x340>
 800485c:	f000 80af 	beq.w	80049be <_dtoa_r+0x4d6>
 8004860:	427c      	negs	r4, r7
 8004862:	4b81      	ldr	r3, [pc, #516]	@ (8004a68 <_dtoa_r+0x580>)
 8004864:	4d81      	ldr	r5, [pc, #516]	@ (8004a6c <_dtoa_r+0x584>)
 8004866:	f004 020f 	and.w	r2, r4, #15
 800486a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004876:	f7fb febf 	bl	80005f8 <__aeabi_dmul>
 800487a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800487e:	1124      	asrs	r4, r4, #4
 8004880:	2300      	movs	r3, #0
 8004882:	2602      	movs	r6, #2
 8004884:	2c00      	cmp	r4, #0
 8004886:	f040 808f 	bne.w	80049a8 <_dtoa_r+0x4c0>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1d3      	bne.n	8004836 <_dtoa_r+0x34e>
 800488e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004890:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8094 	beq.w	80049c2 <_dtoa_r+0x4da>
 800489a:	4b75      	ldr	r3, [pc, #468]	@ (8004a70 <_dtoa_r+0x588>)
 800489c:	2200      	movs	r2, #0
 800489e:	4620      	mov	r0, r4
 80048a0:	4629      	mov	r1, r5
 80048a2:	f7fc f91b 	bl	8000adc <__aeabi_dcmplt>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f000 808b 	beq.w	80049c2 <_dtoa_r+0x4da>
 80048ac:	9b03      	ldr	r3, [sp, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8087 	beq.w	80049c2 <_dtoa_r+0x4da>
 80048b4:	f1bb 0f00 	cmp.w	fp, #0
 80048b8:	dd34      	ble.n	8004924 <_dtoa_r+0x43c>
 80048ba:	4620      	mov	r0, r4
 80048bc:	4b6d      	ldr	r3, [pc, #436]	@ (8004a74 <_dtoa_r+0x58c>)
 80048be:	2200      	movs	r2, #0
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fb fe99 	bl	80005f8 <__aeabi_dmul>
 80048c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048ca:	f107 38ff 	add.w	r8, r7, #4294967295
 80048ce:	3601      	adds	r6, #1
 80048d0:	465c      	mov	r4, fp
 80048d2:	4630      	mov	r0, r6
 80048d4:	f7fb fe26 	bl	8000524 <__aeabi_i2d>
 80048d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048dc:	f7fb fe8c 	bl	80005f8 <__aeabi_dmul>
 80048e0:	4b65      	ldr	r3, [pc, #404]	@ (8004a78 <_dtoa_r+0x590>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	f7fb fcd2 	bl	800028c <__adddf3>
 80048e8:	4605      	mov	r5, r0
 80048ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048ee:	2c00      	cmp	r4, #0
 80048f0:	d16a      	bne.n	80049c8 <_dtoa_r+0x4e0>
 80048f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048f6:	4b61      	ldr	r3, [pc, #388]	@ (8004a7c <_dtoa_r+0x594>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	f7fb fcc5 	bl	8000288 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004906:	462a      	mov	r2, r5
 8004908:	4633      	mov	r3, r6
 800490a:	f7fc f905 	bl	8000b18 <__aeabi_dcmpgt>
 800490e:	2800      	cmp	r0, #0
 8004910:	f040 8298 	bne.w	8004e44 <_dtoa_r+0x95c>
 8004914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004918:	462a      	mov	r2, r5
 800491a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800491e:	f7fc f8dd 	bl	8000adc <__aeabi_dcmplt>
 8004922:	bb38      	cbnz	r0, 8004974 <_dtoa_r+0x48c>
 8004924:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004928:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800492c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800492e:	2b00      	cmp	r3, #0
 8004930:	f2c0 8157 	blt.w	8004be2 <_dtoa_r+0x6fa>
 8004934:	2f0e      	cmp	r7, #14
 8004936:	f300 8154 	bgt.w	8004be2 <_dtoa_r+0x6fa>
 800493a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a68 <_dtoa_r+0x580>)
 800493c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004940:	ed93 7b00 	vldr	d7, [r3]
 8004944:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004946:	2b00      	cmp	r3, #0
 8004948:	ed8d 7b00 	vstr	d7, [sp]
 800494c:	f280 80e5 	bge.w	8004b1a <_dtoa_r+0x632>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f300 80e1 	bgt.w	8004b1a <_dtoa_r+0x632>
 8004958:	d10c      	bne.n	8004974 <_dtoa_r+0x48c>
 800495a:	4b48      	ldr	r3, [pc, #288]	@ (8004a7c <_dtoa_r+0x594>)
 800495c:	2200      	movs	r2, #0
 800495e:	ec51 0b17 	vmov	r0, r1, d7
 8004962:	f7fb fe49 	bl	80005f8 <__aeabi_dmul>
 8004966:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800496a:	f7fc f8cb 	bl	8000b04 <__aeabi_dcmpge>
 800496e:	2800      	cmp	r0, #0
 8004970:	f000 8266 	beq.w	8004e40 <_dtoa_r+0x958>
 8004974:	2400      	movs	r4, #0
 8004976:	4625      	mov	r5, r4
 8004978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800497a:	4656      	mov	r6, sl
 800497c:	ea6f 0803 	mvn.w	r8, r3
 8004980:	2700      	movs	r7, #0
 8004982:	4621      	mov	r1, r4
 8004984:	4648      	mov	r0, r9
 8004986:	f000 fcbf 	bl	8005308 <_Bfree>
 800498a:	2d00      	cmp	r5, #0
 800498c:	f000 80bd 	beq.w	8004b0a <_dtoa_r+0x622>
 8004990:	b12f      	cbz	r7, 800499e <_dtoa_r+0x4b6>
 8004992:	42af      	cmp	r7, r5
 8004994:	d003      	beq.n	800499e <_dtoa_r+0x4b6>
 8004996:	4639      	mov	r1, r7
 8004998:	4648      	mov	r0, r9
 800499a:	f000 fcb5 	bl	8005308 <_Bfree>
 800499e:	4629      	mov	r1, r5
 80049a0:	4648      	mov	r0, r9
 80049a2:	f000 fcb1 	bl	8005308 <_Bfree>
 80049a6:	e0b0      	b.n	8004b0a <_dtoa_r+0x622>
 80049a8:	07e2      	lsls	r2, r4, #31
 80049aa:	d505      	bpl.n	80049b8 <_dtoa_r+0x4d0>
 80049ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049b0:	f7fb fe22 	bl	80005f8 <__aeabi_dmul>
 80049b4:	3601      	adds	r6, #1
 80049b6:	2301      	movs	r3, #1
 80049b8:	1064      	asrs	r4, r4, #1
 80049ba:	3508      	adds	r5, #8
 80049bc:	e762      	b.n	8004884 <_dtoa_r+0x39c>
 80049be:	2602      	movs	r6, #2
 80049c0:	e765      	b.n	800488e <_dtoa_r+0x3a6>
 80049c2:	9c03      	ldr	r4, [sp, #12]
 80049c4:	46b8      	mov	r8, r7
 80049c6:	e784      	b.n	80048d2 <_dtoa_r+0x3ea>
 80049c8:	4b27      	ldr	r3, [pc, #156]	@ (8004a68 <_dtoa_r+0x580>)
 80049ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049d4:	4454      	add	r4, sl
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d054      	beq.n	8004a84 <_dtoa_r+0x59c>
 80049da:	4929      	ldr	r1, [pc, #164]	@ (8004a80 <_dtoa_r+0x598>)
 80049dc:	2000      	movs	r0, #0
 80049de:	f7fb ff35 	bl	800084c <__aeabi_ddiv>
 80049e2:	4633      	mov	r3, r6
 80049e4:	462a      	mov	r2, r5
 80049e6:	f7fb fc4f 	bl	8000288 <__aeabi_dsub>
 80049ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80049ee:	4656      	mov	r6, sl
 80049f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049f4:	f7fc f8b0 	bl	8000b58 <__aeabi_d2iz>
 80049f8:	4605      	mov	r5, r0
 80049fa:	f7fb fd93 	bl	8000524 <__aeabi_i2d>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a06:	f7fb fc3f 	bl	8000288 <__aeabi_dsub>
 8004a0a:	3530      	adds	r5, #48	@ 0x30
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a14:	f806 5b01 	strb.w	r5, [r6], #1
 8004a18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004a1c:	f7fc f85e 	bl	8000adc <__aeabi_dcmplt>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d172      	bne.n	8004b0a <_dtoa_r+0x622>
 8004a24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a28:	4911      	ldr	r1, [pc, #68]	@ (8004a70 <_dtoa_r+0x588>)
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f7fb fc2c 	bl	8000288 <__aeabi_dsub>
 8004a30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004a34:	f7fc f852 	bl	8000adc <__aeabi_dcmplt>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f040 80b4 	bne.w	8004ba6 <_dtoa_r+0x6be>
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	f43f af70 	beq.w	8004924 <_dtoa_r+0x43c>
 8004a44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004a48:	4b0a      	ldr	r3, [pc, #40]	@ (8004a74 <_dtoa_r+0x58c>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f7fb fdd4 	bl	80005f8 <__aeabi_dmul>
 8004a50:	4b08      	ldr	r3, [pc, #32]	@ (8004a74 <_dtoa_r+0x58c>)
 8004a52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004a56:	2200      	movs	r2, #0
 8004a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a5c:	f7fb fdcc 	bl	80005f8 <__aeabi_dmul>
 8004a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a64:	e7c4      	b.n	80049f0 <_dtoa_r+0x508>
 8004a66:	bf00      	nop
 8004a68:	080061e8 	.word	0x080061e8
 8004a6c:	080061c0 	.word	0x080061c0
 8004a70:	3ff00000 	.word	0x3ff00000
 8004a74:	40240000 	.word	0x40240000
 8004a78:	401c0000 	.word	0x401c0000
 8004a7c:	40140000 	.word	0x40140000
 8004a80:	3fe00000 	.word	0x3fe00000
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	f7fb fdb6 	bl	80005f8 <__aeabi_dmul>
 8004a8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004a90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a92:	4656      	mov	r6, sl
 8004a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a98:	f7fc f85e 	bl	8000b58 <__aeabi_d2iz>
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	f7fb fd41 	bl	8000524 <__aeabi_i2d>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aaa:	f7fb fbed 	bl	8000288 <__aeabi_dsub>
 8004aae:	3530      	adds	r5, #48	@ 0x30
 8004ab0:	f806 5b01 	strb.w	r5, [r6], #1
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	42a6      	cmp	r6, r4
 8004aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	d124      	bne.n	8004b0e <_dtoa_r+0x626>
 8004ac4:	4baf      	ldr	r3, [pc, #700]	@ (8004d84 <_dtoa_r+0x89c>)
 8004ac6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004aca:	f7fb fbdf 	bl	800028c <__adddf3>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ad6:	f7fc f81f 	bl	8000b18 <__aeabi_dcmpgt>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d163      	bne.n	8004ba6 <_dtoa_r+0x6be>
 8004ade:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004ae2:	49a8      	ldr	r1, [pc, #672]	@ (8004d84 <_dtoa_r+0x89c>)
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f7fb fbcf 	bl	8000288 <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004af2:	f7fb fff3 	bl	8000adc <__aeabi_dcmplt>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f43f af14 	beq.w	8004924 <_dtoa_r+0x43c>
 8004afc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004afe:	1e73      	subs	r3, r6, #1
 8004b00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b06:	2b30      	cmp	r3, #48	@ 0x30
 8004b08:	d0f8      	beq.n	8004afc <_dtoa_r+0x614>
 8004b0a:	4647      	mov	r7, r8
 8004b0c:	e03b      	b.n	8004b86 <_dtoa_r+0x69e>
 8004b0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004d88 <_dtoa_r+0x8a0>)
 8004b10:	f7fb fd72 	bl	80005f8 <__aeabi_dmul>
 8004b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b18:	e7bc      	b.n	8004a94 <_dtoa_r+0x5ac>
 8004b1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004b1e:	4656      	mov	r6, sl
 8004b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fe90 	bl	800084c <__aeabi_ddiv>
 8004b2c:	f7fc f814 	bl	8000b58 <__aeabi_d2iz>
 8004b30:	4680      	mov	r8, r0
 8004b32:	f7fb fcf7 	bl	8000524 <__aeabi_i2d>
 8004b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b3a:	f7fb fd5d 	bl	80005f8 <__aeabi_dmul>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4620      	mov	r0, r4
 8004b44:	4629      	mov	r1, r5
 8004b46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004b4a:	f7fb fb9d 	bl	8000288 <__aeabi_dsub>
 8004b4e:	f806 4b01 	strb.w	r4, [r6], #1
 8004b52:	9d03      	ldr	r5, [sp, #12]
 8004b54:	eba6 040a 	sub.w	r4, r6, sl
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	d133      	bne.n	8004bc8 <_dtoa_r+0x6e0>
 8004b60:	f7fb fb94 	bl	800028c <__adddf3>
 8004b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b68:	4604      	mov	r4, r0
 8004b6a:	460d      	mov	r5, r1
 8004b6c:	f7fb ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 8004b70:	b9c0      	cbnz	r0, 8004ba4 <_dtoa_r+0x6bc>
 8004b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f7fb ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b7e:	b110      	cbz	r0, 8004b86 <_dtoa_r+0x69e>
 8004b80:	f018 0f01 	tst.w	r8, #1
 8004b84:	d10e      	bne.n	8004ba4 <_dtoa_r+0x6bc>
 8004b86:	9902      	ldr	r1, [sp, #8]
 8004b88:	4648      	mov	r0, r9
 8004b8a:	f000 fbbd 	bl	8005308 <_Bfree>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	7033      	strb	r3, [r6, #0]
 8004b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b94:	3701      	adds	r7, #1
 8004b96:	601f      	str	r7, [r3, #0]
 8004b98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 824b 	beq.w	8005036 <_dtoa_r+0xb4e>
 8004ba0:	601e      	str	r6, [r3, #0]
 8004ba2:	e248      	b.n	8005036 <_dtoa_r+0xb4e>
 8004ba4:	46b8      	mov	r8, r7
 8004ba6:	4633      	mov	r3, r6
 8004ba8:	461e      	mov	r6, r3
 8004baa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004bae:	2a39      	cmp	r2, #57	@ 0x39
 8004bb0:	d106      	bne.n	8004bc0 <_dtoa_r+0x6d8>
 8004bb2:	459a      	cmp	sl, r3
 8004bb4:	d1f8      	bne.n	8004ba8 <_dtoa_r+0x6c0>
 8004bb6:	2230      	movs	r2, #48	@ 0x30
 8004bb8:	f108 0801 	add.w	r8, r8, #1
 8004bbc:	f88a 2000 	strb.w	r2, [sl]
 8004bc0:	781a      	ldrb	r2, [r3, #0]
 8004bc2:	3201      	adds	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e7a0      	b.n	8004b0a <_dtoa_r+0x622>
 8004bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004d88 <_dtoa_r+0x8a0>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f7fb fd14 	bl	80005f8 <__aeabi_dmul>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	460d      	mov	r5, r1
 8004bd8:	f7fb ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	d09f      	beq.n	8004b20 <_dtoa_r+0x638>
 8004be0:	e7d1      	b.n	8004b86 <_dtoa_r+0x69e>
 8004be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	f000 80ea 	beq.w	8004dbe <_dtoa_r+0x8d6>
 8004bea:	9a07      	ldr	r2, [sp, #28]
 8004bec:	2a01      	cmp	r2, #1
 8004bee:	f300 80cd 	bgt.w	8004d8c <_dtoa_r+0x8a4>
 8004bf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	f000 80c1 	beq.w	8004d7c <_dtoa_r+0x894>
 8004bfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004bfe:	9c08      	ldr	r4, [sp, #32]
 8004c00:	9e00      	ldr	r6, [sp, #0]
 8004c02:	9a00      	ldr	r2, [sp, #0]
 8004c04:	441a      	add	r2, r3
 8004c06:	9200      	str	r2, [sp, #0]
 8004c08:	9a06      	ldr	r2, [sp, #24]
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	441a      	add	r2, r3
 8004c0e:	4648      	mov	r0, r9
 8004c10:	9206      	str	r2, [sp, #24]
 8004c12:	f000 fc2d 	bl	8005470 <__i2b>
 8004c16:	4605      	mov	r5, r0
 8004c18:	b166      	cbz	r6, 8004c34 <_dtoa_r+0x74c>
 8004c1a:	9b06      	ldr	r3, [sp, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	dd09      	ble.n	8004c34 <_dtoa_r+0x74c>
 8004c20:	42b3      	cmp	r3, r6
 8004c22:	9a00      	ldr	r2, [sp, #0]
 8004c24:	bfa8      	it	ge
 8004c26:	4633      	movge	r3, r6
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	9a06      	ldr	r2, [sp, #24]
 8004c2e:	1af6      	subs	r6, r6, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	9306      	str	r3, [sp, #24]
 8004c34:	9b08      	ldr	r3, [sp, #32]
 8004c36:	b30b      	cbz	r3, 8004c7c <_dtoa_r+0x794>
 8004c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 80c6 	beq.w	8004dcc <_dtoa_r+0x8e4>
 8004c40:	2c00      	cmp	r4, #0
 8004c42:	f000 80c0 	beq.w	8004dc6 <_dtoa_r+0x8de>
 8004c46:	4629      	mov	r1, r5
 8004c48:	4622      	mov	r2, r4
 8004c4a:	4648      	mov	r0, r9
 8004c4c:	f000 fcc8 	bl	80055e0 <__pow5mult>
 8004c50:	9a02      	ldr	r2, [sp, #8]
 8004c52:	4601      	mov	r1, r0
 8004c54:	4605      	mov	r5, r0
 8004c56:	4648      	mov	r0, r9
 8004c58:	f000 fc20 	bl	800549c <__multiply>
 8004c5c:	9902      	ldr	r1, [sp, #8]
 8004c5e:	4680      	mov	r8, r0
 8004c60:	4648      	mov	r0, r9
 8004c62:	f000 fb51 	bl	8005308 <_Bfree>
 8004c66:	9b08      	ldr	r3, [sp, #32]
 8004c68:	1b1b      	subs	r3, r3, r4
 8004c6a:	9308      	str	r3, [sp, #32]
 8004c6c:	f000 80b1 	beq.w	8004dd2 <_dtoa_r+0x8ea>
 8004c70:	9a08      	ldr	r2, [sp, #32]
 8004c72:	4641      	mov	r1, r8
 8004c74:	4648      	mov	r0, r9
 8004c76:	f000 fcb3 	bl	80055e0 <__pow5mult>
 8004c7a:	9002      	str	r0, [sp, #8]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4648      	mov	r0, r9
 8004c80:	f000 fbf6 	bl	8005470 <__i2b>
 8004c84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c86:	4604      	mov	r4, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 81d8 	beq.w	800503e <_dtoa_r+0xb56>
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4601      	mov	r1, r0
 8004c92:	4648      	mov	r0, r9
 8004c94:	f000 fca4 	bl	80055e0 <__pow5mult>
 8004c98:	9b07      	ldr	r3, [sp, #28]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	f300 809f 	bgt.w	8004de0 <_dtoa_r+0x8f8>
 8004ca2:	9b04      	ldr	r3, [sp, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f040 8097 	bne.w	8004dd8 <_dtoa_r+0x8f0>
 8004caa:	9b05      	ldr	r3, [sp, #20]
 8004cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 8093 	bne.w	8004ddc <_dtoa_r+0x8f4>
 8004cb6:	9b05      	ldr	r3, [sp, #20]
 8004cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cbc:	0d1b      	lsrs	r3, r3, #20
 8004cbe:	051b      	lsls	r3, r3, #20
 8004cc0:	b133      	cbz	r3, 8004cd0 <_dtoa_r+0x7e8>
 8004cc2:	9b00      	ldr	r3, [sp, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	9b06      	ldr	r3, [sp, #24]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	9306      	str	r3, [sp, #24]
 8004cce:	2301      	movs	r3, #1
 8004cd0:	9308      	str	r3, [sp, #32]
 8004cd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 81b8 	beq.w	800504a <_dtoa_r+0xb62>
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ce0:	6918      	ldr	r0, [r3, #16]
 8004ce2:	f000 fb79 	bl	80053d8 <__hi0bits>
 8004ce6:	f1c0 0020 	rsb	r0, r0, #32
 8004cea:	9b06      	ldr	r3, [sp, #24]
 8004cec:	4418      	add	r0, r3
 8004cee:	f010 001f 	ands.w	r0, r0, #31
 8004cf2:	f000 8082 	beq.w	8004dfa <_dtoa_r+0x912>
 8004cf6:	f1c0 0320 	rsb	r3, r0, #32
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	dd73      	ble.n	8004de6 <_dtoa_r+0x8fe>
 8004cfe:	9b00      	ldr	r3, [sp, #0]
 8004d00:	f1c0 001c 	rsb	r0, r0, #28
 8004d04:	4403      	add	r3, r0
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	9b06      	ldr	r3, [sp, #24]
 8004d0a:	4403      	add	r3, r0
 8004d0c:	4406      	add	r6, r0
 8004d0e:	9306      	str	r3, [sp, #24]
 8004d10:	9b00      	ldr	r3, [sp, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dd05      	ble.n	8004d22 <_dtoa_r+0x83a>
 8004d16:	9902      	ldr	r1, [sp, #8]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4648      	mov	r0, r9
 8004d1c:	f000 fcba 	bl	8005694 <__lshift>
 8004d20:	9002      	str	r0, [sp, #8]
 8004d22:	9b06      	ldr	r3, [sp, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd05      	ble.n	8004d34 <_dtoa_r+0x84c>
 8004d28:	4621      	mov	r1, r4
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4648      	mov	r0, r9
 8004d2e:	f000 fcb1 	bl	8005694 <__lshift>
 8004d32:	4604      	mov	r4, r0
 8004d34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d061      	beq.n	8004dfe <_dtoa_r+0x916>
 8004d3a:	9802      	ldr	r0, [sp, #8]
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	f000 fd15 	bl	800576c <__mcmp>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	da5b      	bge.n	8004dfe <_dtoa_r+0x916>
 8004d46:	2300      	movs	r3, #0
 8004d48:	9902      	ldr	r1, [sp, #8]
 8004d4a:	220a      	movs	r2, #10
 8004d4c:	4648      	mov	r0, r9
 8004d4e:	f000 fafd 	bl	800534c <__multadd>
 8004d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d54:	9002      	str	r0, [sp, #8]
 8004d56:	f107 38ff 	add.w	r8, r7, #4294967295
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8177 	beq.w	800504e <_dtoa_r+0xb66>
 8004d60:	4629      	mov	r1, r5
 8004d62:	2300      	movs	r3, #0
 8004d64:	220a      	movs	r2, #10
 8004d66:	4648      	mov	r0, r9
 8004d68:	f000 faf0 	bl	800534c <__multadd>
 8004d6c:	f1bb 0f00 	cmp.w	fp, #0
 8004d70:	4605      	mov	r5, r0
 8004d72:	dc6f      	bgt.n	8004e54 <_dtoa_r+0x96c>
 8004d74:	9b07      	ldr	r3, [sp, #28]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	dc49      	bgt.n	8004e0e <_dtoa_r+0x926>
 8004d7a:	e06b      	b.n	8004e54 <_dtoa_r+0x96c>
 8004d7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d82:	e73c      	b.n	8004bfe <_dtoa_r+0x716>
 8004d84:	3fe00000 	.word	0x3fe00000
 8004d88:	40240000 	.word	0x40240000
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	1e5c      	subs	r4, r3, #1
 8004d90:	9b08      	ldr	r3, [sp, #32]
 8004d92:	42a3      	cmp	r3, r4
 8004d94:	db09      	blt.n	8004daa <_dtoa_r+0x8c2>
 8004d96:	1b1c      	subs	r4, r3, r4
 8004d98:	9b03      	ldr	r3, [sp, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f6bf af30 	bge.w	8004c00 <_dtoa_r+0x718>
 8004da0:	9b00      	ldr	r3, [sp, #0]
 8004da2:	9a03      	ldr	r2, [sp, #12]
 8004da4:	1a9e      	subs	r6, r3, r2
 8004da6:	2300      	movs	r3, #0
 8004da8:	e72b      	b.n	8004c02 <_dtoa_r+0x71a>
 8004daa:	9b08      	ldr	r3, [sp, #32]
 8004dac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004dae:	9408      	str	r4, [sp, #32]
 8004db0:	1ae3      	subs	r3, r4, r3
 8004db2:	441a      	add	r2, r3
 8004db4:	9e00      	ldr	r6, [sp, #0]
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	920d      	str	r2, [sp, #52]	@ 0x34
 8004dba:	2400      	movs	r4, #0
 8004dbc:	e721      	b.n	8004c02 <_dtoa_r+0x71a>
 8004dbe:	9c08      	ldr	r4, [sp, #32]
 8004dc0:	9e00      	ldr	r6, [sp, #0]
 8004dc2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004dc4:	e728      	b.n	8004c18 <_dtoa_r+0x730>
 8004dc6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004dca:	e751      	b.n	8004c70 <_dtoa_r+0x788>
 8004dcc:	9a08      	ldr	r2, [sp, #32]
 8004dce:	9902      	ldr	r1, [sp, #8]
 8004dd0:	e750      	b.n	8004c74 <_dtoa_r+0x78c>
 8004dd2:	f8cd 8008 	str.w	r8, [sp, #8]
 8004dd6:	e751      	b.n	8004c7c <_dtoa_r+0x794>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e779      	b.n	8004cd0 <_dtoa_r+0x7e8>
 8004ddc:	9b04      	ldr	r3, [sp, #16]
 8004dde:	e777      	b.n	8004cd0 <_dtoa_r+0x7e8>
 8004de0:	2300      	movs	r3, #0
 8004de2:	9308      	str	r3, [sp, #32]
 8004de4:	e779      	b.n	8004cda <_dtoa_r+0x7f2>
 8004de6:	d093      	beq.n	8004d10 <_dtoa_r+0x828>
 8004de8:	9a00      	ldr	r2, [sp, #0]
 8004dea:	331c      	adds	r3, #28
 8004dec:	441a      	add	r2, r3
 8004dee:	9200      	str	r2, [sp, #0]
 8004df0:	9a06      	ldr	r2, [sp, #24]
 8004df2:	441a      	add	r2, r3
 8004df4:	441e      	add	r6, r3
 8004df6:	9206      	str	r2, [sp, #24]
 8004df8:	e78a      	b.n	8004d10 <_dtoa_r+0x828>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	e7f4      	b.n	8004de8 <_dtoa_r+0x900>
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	46b8      	mov	r8, r7
 8004e04:	dc20      	bgt.n	8004e48 <_dtoa_r+0x960>
 8004e06:	469b      	mov	fp, r3
 8004e08:	9b07      	ldr	r3, [sp, #28]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	dd1e      	ble.n	8004e4c <_dtoa_r+0x964>
 8004e0e:	f1bb 0f00 	cmp.w	fp, #0
 8004e12:	f47f adb1 	bne.w	8004978 <_dtoa_r+0x490>
 8004e16:	4621      	mov	r1, r4
 8004e18:	465b      	mov	r3, fp
 8004e1a:	2205      	movs	r2, #5
 8004e1c:	4648      	mov	r0, r9
 8004e1e:	f000 fa95 	bl	800534c <__multadd>
 8004e22:	4601      	mov	r1, r0
 8004e24:	4604      	mov	r4, r0
 8004e26:	9802      	ldr	r0, [sp, #8]
 8004e28:	f000 fca0 	bl	800576c <__mcmp>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f77f ada3 	ble.w	8004978 <_dtoa_r+0x490>
 8004e32:	4656      	mov	r6, sl
 8004e34:	2331      	movs	r3, #49	@ 0x31
 8004e36:	f806 3b01 	strb.w	r3, [r6], #1
 8004e3a:	f108 0801 	add.w	r8, r8, #1
 8004e3e:	e59f      	b.n	8004980 <_dtoa_r+0x498>
 8004e40:	9c03      	ldr	r4, [sp, #12]
 8004e42:	46b8      	mov	r8, r7
 8004e44:	4625      	mov	r5, r4
 8004e46:	e7f4      	b.n	8004e32 <_dtoa_r+0x94a>
 8004e48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8101 	beq.w	8005056 <_dtoa_r+0xb6e>
 8004e54:	2e00      	cmp	r6, #0
 8004e56:	dd05      	ble.n	8004e64 <_dtoa_r+0x97c>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4632      	mov	r2, r6
 8004e5c:	4648      	mov	r0, r9
 8004e5e:	f000 fc19 	bl	8005694 <__lshift>
 8004e62:	4605      	mov	r5, r0
 8004e64:	9b08      	ldr	r3, [sp, #32]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d05c      	beq.n	8004f24 <_dtoa_r+0xa3c>
 8004e6a:	6869      	ldr	r1, [r5, #4]
 8004e6c:	4648      	mov	r0, r9
 8004e6e:	f000 fa0b 	bl	8005288 <_Balloc>
 8004e72:	4606      	mov	r6, r0
 8004e74:	b928      	cbnz	r0, 8004e82 <_dtoa_r+0x99a>
 8004e76:	4b82      	ldr	r3, [pc, #520]	@ (8005080 <_dtoa_r+0xb98>)
 8004e78:	4602      	mov	r2, r0
 8004e7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e7e:	f7ff bb4a 	b.w	8004516 <_dtoa_r+0x2e>
 8004e82:	692a      	ldr	r2, [r5, #16]
 8004e84:	3202      	adds	r2, #2
 8004e86:	0092      	lsls	r2, r2, #2
 8004e88:	f105 010c 	add.w	r1, r5, #12
 8004e8c:	300c      	adds	r0, #12
 8004e8e:	f7ff fa74 	bl	800437a <memcpy>
 8004e92:	2201      	movs	r2, #1
 8004e94:	4631      	mov	r1, r6
 8004e96:	4648      	mov	r0, r9
 8004e98:	f000 fbfc 	bl	8005694 <__lshift>
 8004e9c:	f10a 0301 	add.w	r3, sl, #1
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	eb0a 030b 	add.w	r3, sl, fp
 8004ea6:	9308      	str	r3, [sp, #32]
 8004ea8:	9b04      	ldr	r3, [sp, #16]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	462f      	mov	r7, r5
 8004eb0:	9306      	str	r3, [sp, #24]
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	9b00      	ldr	r3, [sp, #0]
 8004eb6:	9802      	ldr	r0, [sp, #8]
 8004eb8:	4621      	mov	r1, r4
 8004eba:	f103 3bff 	add.w	fp, r3, #4294967295
 8004ebe:	f7ff fa89 	bl	80043d4 <quorem>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	3330      	adds	r3, #48	@ 0x30
 8004ec6:	9003      	str	r0, [sp, #12]
 8004ec8:	4639      	mov	r1, r7
 8004eca:	9802      	ldr	r0, [sp, #8]
 8004ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ece:	f000 fc4d 	bl	800576c <__mcmp>
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	9004      	str	r0, [sp, #16]
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4648      	mov	r0, r9
 8004eda:	f000 fc63 	bl	80057a4 <__mdiff>
 8004ede:	68c2      	ldr	r2, [r0, #12]
 8004ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	bb02      	cbnz	r2, 8004f28 <_dtoa_r+0xa40>
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	9802      	ldr	r0, [sp, #8]
 8004eea:	f000 fc3f 	bl	800576c <__mcmp>
 8004eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4648      	mov	r0, r9
 8004ef6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004efa:	f000 fa05 	bl	8005308 <_Bfree>
 8004efe:	9b07      	ldr	r3, [sp, #28]
 8004f00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004f02:	9e00      	ldr	r6, [sp, #0]
 8004f04:	ea42 0103 	orr.w	r1, r2, r3
 8004f08:	9b06      	ldr	r3, [sp, #24]
 8004f0a:	4319      	orrs	r1, r3
 8004f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0e:	d10d      	bne.n	8004f2c <_dtoa_r+0xa44>
 8004f10:	2b39      	cmp	r3, #57	@ 0x39
 8004f12:	d027      	beq.n	8004f64 <_dtoa_r+0xa7c>
 8004f14:	9a04      	ldr	r2, [sp, #16]
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	dd01      	ble.n	8004f1e <_dtoa_r+0xa36>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	3331      	adds	r3, #49	@ 0x31
 8004f1e:	f88b 3000 	strb.w	r3, [fp]
 8004f22:	e52e      	b.n	8004982 <_dtoa_r+0x49a>
 8004f24:	4628      	mov	r0, r5
 8004f26:	e7b9      	b.n	8004e9c <_dtoa_r+0x9b4>
 8004f28:	2201      	movs	r2, #1
 8004f2a:	e7e2      	b.n	8004ef2 <_dtoa_r+0xa0a>
 8004f2c:	9904      	ldr	r1, [sp, #16]
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	db04      	blt.n	8004f3c <_dtoa_r+0xa54>
 8004f32:	9807      	ldr	r0, [sp, #28]
 8004f34:	4301      	orrs	r1, r0
 8004f36:	9806      	ldr	r0, [sp, #24]
 8004f38:	4301      	orrs	r1, r0
 8004f3a:	d120      	bne.n	8004f7e <_dtoa_r+0xa96>
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	ddee      	ble.n	8004f1e <_dtoa_r+0xa36>
 8004f40:	9902      	ldr	r1, [sp, #8]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2201      	movs	r2, #1
 8004f46:	4648      	mov	r0, r9
 8004f48:	f000 fba4 	bl	8005694 <__lshift>
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	9002      	str	r0, [sp, #8]
 8004f50:	f000 fc0c 	bl	800576c <__mcmp>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	9b00      	ldr	r3, [sp, #0]
 8004f58:	dc02      	bgt.n	8004f60 <_dtoa_r+0xa78>
 8004f5a:	d1e0      	bne.n	8004f1e <_dtoa_r+0xa36>
 8004f5c:	07da      	lsls	r2, r3, #31
 8004f5e:	d5de      	bpl.n	8004f1e <_dtoa_r+0xa36>
 8004f60:	2b39      	cmp	r3, #57	@ 0x39
 8004f62:	d1da      	bne.n	8004f1a <_dtoa_r+0xa32>
 8004f64:	2339      	movs	r3, #57	@ 0x39
 8004f66:	f88b 3000 	strb.w	r3, [fp]
 8004f6a:	4633      	mov	r3, r6
 8004f6c:	461e      	mov	r6, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f74:	2a39      	cmp	r2, #57	@ 0x39
 8004f76:	d04e      	beq.n	8005016 <_dtoa_r+0xb2e>
 8004f78:	3201      	adds	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e501      	b.n	8004982 <_dtoa_r+0x49a>
 8004f7e:	2a00      	cmp	r2, #0
 8004f80:	dd03      	ble.n	8004f8a <_dtoa_r+0xaa2>
 8004f82:	2b39      	cmp	r3, #57	@ 0x39
 8004f84:	d0ee      	beq.n	8004f64 <_dtoa_r+0xa7c>
 8004f86:	3301      	adds	r3, #1
 8004f88:	e7c9      	b.n	8004f1e <_dtoa_r+0xa36>
 8004f8a:	9a00      	ldr	r2, [sp, #0]
 8004f8c:	9908      	ldr	r1, [sp, #32]
 8004f8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f92:	428a      	cmp	r2, r1
 8004f94:	d028      	beq.n	8004fe8 <_dtoa_r+0xb00>
 8004f96:	9902      	ldr	r1, [sp, #8]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	220a      	movs	r2, #10
 8004f9c:	4648      	mov	r0, r9
 8004f9e:	f000 f9d5 	bl	800534c <__multadd>
 8004fa2:	42af      	cmp	r7, r5
 8004fa4:	9002      	str	r0, [sp, #8]
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	f04f 020a 	mov.w	r2, #10
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4648      	mov	r0, r9
 8004fb2:	d107      	bne.n	8004fc4 <_dtoa_r+0xadc>
 8004fb4:	f000 f9ca 	bl	800534c <__multadd>
 8004fb8:	4607      	mov	r7, r0
 8004fba:	4605      	mov	r5, r0
 8004fbc:	9b00      	ldr	r3, [sp, #0]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	e777      	b.n	8004eb4 <_dtoa_r+0x9cc>
 8004fc4:	f000 f9c2 	bl	800534c <__multadd>
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4607      	mov	r7, r0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	220a      	movs	r2, #10
 8004fd0:	4648      	mov	r0, r9
 8004fd2:	f000 f9bb 	bl	800534c <__multadd>
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	e7f0      	b.n	8004fbc <_dtoa_r+0xad4>
 8004fda:	f1bb 0f00 	cmp.w	fp, #0
 8004fde:	bfcc      	ite	gt
 8004fe0:	465e      	movgt	r6, fp
 8004fe2:	2601      	movle	r6, #1
 8004fe4:	4456      	add	r6, sl
 8004fe6:	2700      	movs	r7, #0
 8004fe8:	9902      	ldr	r1, [sp, #8]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2201      	movs	r2, #1
 8004fee:	4648      	mov	r0, r9
 8004ff0:	f000 fb50 	bl	8005694 <__lshift>
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	9002      	str	r0, [sp, #8]
 8004ff8:	f000 fbb8 	bl	800576c <__mcmp>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	dcb4      	bgt.n	8004f6a <_dtoa_r+0xa82>
 8005000:	d102      	bne.n	8005008 <_dtoa_r+0xb20>
 8005002:	9b00      	ldr	r3, [sp, #0]
 8005004:	07db      	lsls	r3, r3, #31
 8005006:	d4b0      	bmi.n	8004f6a <_dtoa_r+0xa82>
 8005008:	4633      	mov	r3, r6
 800500a:	461e      	mov	r6, r3
 800500c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005010:	2a30      	cmp	r2, #48	@ 0x30
 8005012:	d0fa      	beq.n	800500a <_dtoa_r+0xb22>
 8005014:	e4b5      	b.n	8004982 <_dtoa_r+0x49a>
 8005016:	459a      	cmp	sl, r3
 8005018:	d1a8      	bne.n	8004f6c <_dtoa_r+0xa84>
 800501a:	2331      	movs	r3, #49	@ 0x31
 800501c:	f108 0801 	add.w	r8, r8, #1
 8005020:	f88a 3000 	strb.w	r3, [sl]
 8005024:	e4ad      	b.n	8004982 <_dtoa_r+0x49a>
 8005026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005028:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005084 <_dtoa_r+0xb9c>
 800502c:	b11b      	cbz	r3, 8005036 <_dtoa_r+0xb4e>
 800502e:	f10a 0308 	add.w	r3, sl, #8
 8005032:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4650      	mov	r0, sl
 8005038:	b017      	add	sp, #92	@ 0x5c
 800503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	9b07      	ldr	r3, [sp, #28]
 8005040:	2b01      	cmp	r3, #1
 8005042:	f77f ae2e 	ble.w	8004ca2 <_dtoa_r+0x7ba>
 8005046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005048:	9308      	str	r3, [sp, #32]
 800504a:	2001      	movs	r0, #1
 800504c:	e64d      	b.n	8004cea <_dtoa_r+0x802>
 800504e:	f1bb 0f00 	cmp.w	fp, #0
 8005052:	f77f aed9 	ble.w	8004e08 <_dtoa_r+0x920>
 8005056:	4656      	mov	r6, sl
 8005058:	9802      	ldr	r0, [sp, #8]
 800505a:	4621      	mov	r1, r4
 800505c:	f7ff f9ba 	bl	80043d4 <quorem>
 8005060:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005064:	f806 3b01 	strb.w	r3, [r6], #1
 8005068:	eba6 020a 	sub.w	r2, r6, sl
 800506c:	4593      	cmp	fp, r2
 800506e:	ddb4      	ble.n	8004fda <_dtoa_r+0xaf2>
 8005070:	9902      	ldr	r1, [sp, #8]
 8005072:	2300      	movs	r3, #0
 8005074:	220a      	movs	r2, #10
 8005076:	4648      	mov	r0, r9
 8005078:	f000 f968 	bl	800534c <__multadd>
 800507c:	9002      	str	r0, [sp, #8]
 800507e:	e7eb      	b.n	8005058 <_dtoa_r+0xb70>
 8005080:	0800612c 	.word	0x0800612c
 8005084:	080060b0 	.word	0x080060b0

08005088 <_free_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4605      	mov	r5, r0
 800508c:	2900      	cmp	r1, #0
 800508e:	d041      	beq.n	8005114 <_free_r+0x8c>
 8005090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005094:	1f0c      	subs	r4, r1, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	bfb8      	it	lt
 800509a:	18e4      	addlt	r4, r4, r3
 800509c:	f000 f8e8 	bl	8005270 <__malloc_lock>
 80050a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005118 <_free_r+0x90>)
 80050a2:	6813      	ldr	r3, [r2, #0]
 80050a4:	b933      	cbnz	r3, 80050b4 <_free_r+0x2c>
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	6014      	str	r4, [r2, #0]
 80050aa:	4628      	mov	r0, r5
 80050ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050b0:	f000 b8e4 	b.w	800527c <__malloc_unlock>
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	d908      	bls.n	80050ca <_free_r+0x42>
 80050b8:	6820      	ldr	r0, [r4, #0]
 80050ba:	1821      	adds	r1, r4, r0
 80050bc:	428b      	cmp	r3, r1
 80050be:	bf01      	itttt	eq
 80050c0:	6819      	ldreq	r1, [r3, #0]
 80050c2:	685b      	ldreq	r3, [r3, #4]
 80050c4:	1809      	addeq	r1, r1, r0
 80050c6:	6021      	streq	r1, [r4, #0]
 80050c8:	e7ed      	b.n	80050a6 <_free_r+0x1e>
 80050ca:	461a      	mov	r2, r3
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b10b      	cbz	r3, 80050d4 <_free_r+0x4c>
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d9fa      	bls.n	80050ca <_free_r+0x42>
 80050d4:	6811      	ldr	r1, [r2, #0]
 80050d6:	1850      	adds	r0, r2, r1
 80050d8:	42a0      	cmp	r0, r4
 80050da:	d10b      	bne.n	80050f4 <_free_r+0x6c>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	4401      	add	r1, r0
 80050e0:	1850      	adds	r0, r2, r1
 80050e2:	4283      	cmp	r3, r0
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	d1e0      	bne.n	80050aa <_free_r+0x22>
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	4408      	add	r0, r1
 80050f0:	6010      	str	r0, [r2, #0]
 80050f2:	e7da      	b.n	80050aa <_free_r+0x22>
 80050f4:	d902      	bls.n	80050fc <_free_r+0x74>
 80050f6:	230c      	movs	r3, #12
 80050f8:	602b      	str	r3, [r5, #0]
 80050fa:	e7d6      	b.n	80050aa <_free_r+0x22>
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	1821      	adds	r1, r4, r0
 8005100:	428b      	cmp	r3, r1
 8005102:	bf04      	itt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	bf04      	itt	eq
 800510c:	1809      	addeq	r1, r1, r0
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	6054      	str	r4, [r2, #4]
 8005112:	e7ca      	b.n	80050aa <_free_r+0x22>
 8005114:	bd38      	pop	{r3, r4, r5, pc}
 8005116:	bf00      	nop
 8005118:	200004e8 	.word	0x200004e8

0800511c <malloc>:
 800511c:	4b02      	ldr	r3, [pc, #8]	@ (8005128 <malloc+0xc>)
 800511e:	4601      	mov	r1, r0
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	f000 b825 	b.w	8005170 <_malloc_r>
 8005126:	bf00      	nop
 8005128:	200000b4 	.word	0x200000b4

0800512c <sbrk_aligned>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4e0f      	ldr	r6, [pc, #60]	@ (800516c <sbrk_aligned+0x40>)
 8005130:	460c      	mov	r4, r1
 8005132:	6831      	ldr	r1, [r6, #0]
 8005134:	4605      	mov	r5, r0
 8005136:	b911      	cbnz	r1, 800513e <sbrk_aligned+0x12>
 8005138:	f000 fea4 	bl	8005e84 <_sbrk_r>
 800513c:	6030      	str	r0, [r6, #0]
 800513e:	4621      	mov	r1, r4
 8005140:	4628      	mov	r0, r5
 8005142:	f000 fe9f 	bl	8005e84 <_sbrk_r>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d103      	bne.n	8005152 <sbrk_aligned+0x26>
 800514a:	f04f 34ff 	mov.w	r4, #4294967295
 800514e:	4620      	mov	r0, r4
 8005150:	bd70      	pop	{r4, r5, r6, pc}
 8005152:	1cc4      	adds	r4, r0, #3
 8005154:	f024 0403 	bic.w	r4, r4, #3
 8005158:	42a0      	cmp	r0, r4
 800515a:	d0f8      	beq.n	800514e <sbrk_aligned+0x22>
 800515c:	1a21      	subs	r1, r4, r0
 800515e:	4628      	mov	r0, r5
 8005160:	f000 fe90 	bl	8005e84 <_sbrk_r>
 8005164:	3001      	adds	r0, #1
 8005166:	d1f2      	bne.n	800514e <sbrk_aligned+0x22>
 8005168:	e7ef      	b.n	800514a <sbrk_aligned+0x1e>
 800516a:	bf00      	nop
 800516c:	200004e4 	.word	0x200004e4

08005170 <_malloc_r>:
 8005170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005174:	1ccd      	adds	r5, r1, #3
 8005176:	f025 0503 	bic.w	r5, r5, #3
 800517a:	3508      	adds	r5, #8
 800517c:	2d0c      	cmp	r5, #12
 800517e:	bf38      	it	cc
 8005180:	250c      	movcc	r5, #12
 8005182:	2d00      	cmp	r5, #0
 8005184:	4606      	mov	r6, r0
 8005186:	db01      	blt.n	800518c <_malloc_r+0x1c>
 8005188:	42a9      	cmp	r1, r5
 800518a:	d904      	bls.n	8005196 <_malloc_r+0x26>
 800518c:	230c      	movs	r3, #12
 800518e:	6033      	str	r3, [r6, #0]
 8005190:	2000      	movs	r0, #0
 8005192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005196:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800526c <_malloc_r+0xfc>
 800519a:	f000 f869 	bl	8005270 <__malloc_lock>
 800519e:	f8d8 3000 	ldr.w	r3, [r8]
 80051a2:	461c      	mov	r4, r3
 80051a4:	bb44      	cbnz	r4, 80051f8 <_malloc_r+0x88>
 80051a6:	4629      	mov	r1, r5
 80051a8:	4630      	mov	r0, r6
 80051aa:	f7ff ffbf 	bl	800512c <sbrk_aligned>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	4604      	mov	r4, r0
 80051b2:	d158      	bne.n	8005266 <_malloc_r+0xf6>
 80051b4:	f8d8 4000 	ldr.w	r4, [r8]
 80051b8:	4627      	mov	r7, r4
 80051ba:	2f00      	cmp	r7, #0
 80051bc:	d143      	bne.n	8005246 <_malloc_r+0xd6>
 80051be:	2c00      	cmp	r4, #0
 80051c0:	d04b      	beq.n	800525a <_malloc_r+0xea>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	4639      	mov	r1, r7
 80051c6:	4630      	mov	r0, r6
 80051c8:	eb04 0903 	add.w	r9, r4, r3
 80051cc:	f000 fe5a 	bl	8005e84 <_sbrk_r>
 80051d0:	4581      	cmp	r9, r0
 80051d2:	d142      	bne.n	800525a <_malloc_r+0xea>
 80051d4:	6821      	ldr	r1, [r4, #0]
 80051d6:	1a6d      	subs	r5, r5, r1
 80051d8:	4629      	mov	r1, r5
 80051da:	4630      	mov	r0, r6
 80051dc:	f7ff ffa6 	bl	800512c <sbrk_aligned>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d03a      	beq.n	800525a <_malloc_r+0xea>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	442b      	add	r3, r5
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	f8d8 3000 	ldr.w	r3, [r8]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	bb62      	cbnz	r2, 800524c <_malloc_r+0xdc>
 80051f2:	f8c8 7000 	str.w	r7, [r8]
 80051f6:	e00f      	b.n	8005218 <_malloc_r+0xa8>
 80051f8:	6822      	ldr	r2, [r4, #0]
 80051fa:	1b52      	subs	r2, r2, r5
 80051fc:	d420      	bmi.n	8005240 <_malloc_r+0xd0>
 80051fe:	2a0b      	cmp	r2, #11
 8005200:	d917      	bls.n	8005232 <_malloc_r+0xc2>
 8005202:	1961      	adds	r1, r4, r5
 8005204:	42a3      	cmp	r3, r4
 8005206:	6025      	str	r5, [r4, #0]
 8005208:	bf18      	it	ne
 800520a:	6059      	strne	r1, [r3, #4]
 800520c:	6863      	ldr	r3, [r4, #4]
 800520e:	bf08      	it	eq
 8005210:	f8c8 1000 	streq.w	r1, [r8]
 8005214:	5162      	str	r2, [r4, r5]
 8005216:	604b      	str	r3, [r1, #4]
 8005218:	4630      	mov	r0, r6
 800521a:	f000 f82f 	bl	800527c <__malloc_unlock>
 800521e:	f104 000b 	add.w	r0, r4, #11
 8005222:	1d23      	adds	r3, r4, #4
 8005224:	f020 0007 	bic.w	r0, r0, #7
 8005228:	1ac2      	subs	r2, r0, r3
 800522a:	bf1c      	itt	ne
 800522c:	1a1b      	subne	r3, r3, r0
 800522e:	50a3      	strne	r3, [r4, r2]
 8005230:	e7af      	b.n	8005192 <_malloc_r+0x22>
 8005232:	6862      	ldr	r2, [r4, #4]
 8005234:	42a3      	cmp	r3, r4
 8005236:	bf0c      	ite	eq
 8005238:	f8c8 2000 	streq.w	r2, [r8]
 800523c:	605a      	strne	r2, [r3, #4]
 800523e:	e7eb      	b.n	8005218 <_malloc_r+0xa8>
 8005240:	4623      	mov	r3, r4
 8005242:	6864      	ldr	r4, [r4, #4]
 8005244:	e7ae      	b.n	80051a4 <_malloc_r+0x34>
 8005246:	463c      	mov	r4, r7
 8005248:	687f      	ldr	r7, [r7, #4]
 800524a:	e7b6      	b.n	80051ba <_malloc_r+0x4a>
 800524c:	461a      	mov	r2, r3
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	42a3      	cmp	r3, r4
 8005252:	d1fb      	bne.n	800524c <_malloc_r+0xdc>
 8005254:	2300      	movs	r3, #0
 8005256:	6053      	str	r3, [r2, #4]
 8005258:	e7de      	b.n	8005218 <_malloc_r+0xa8>
 800525a:	230c      	movs	r3, #12
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	4630      	mov	r0, r6
 8005260:	f000 f80c 	bl	800527c <__malloc_unlock>
 8005264:	e794      	b.n	8005190 <_malloc_r+0x20>
 8005266:	6005      	str	r5, [r0, #0]
 8005268:	e7d6      	b.n	8005218 <_malloc_r+0xa8>
 800526a:	bf00      	nop
 800526c:	200004e8 	.word	0x200004e8

08005270 <__malloc_lock>:
 8005270:	4801      	ldr	r0, [pc, #4]	@ (8005278 <__malloc_lock+0x8>)
 8005272:	f7ff b880 	b.w	8004376 <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	200004e0 	.word	0x200004e0

0800527c <__malloc_unlock>:
 800527c:	4801      	ldr	r0, [pc, #4]	@ (8005284 <__malloc_unlock+0x8>)
 800527e:	f7ff b87b 	b.w	8004378 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	200004e0 	.word	0x200004e0

08005288 <_Balloc>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	69c6      	ldr	r6, [r0, #28]
 800528c:	4604      	mov	r4, r0
 800528e:	460d      	mov	r5, r1
 8005290:	b976      	cbnz	r6, 80052b0 <_Balloc+0x28>
 8005292:	2010      	movs	r0, #16
 8005294:	f7ff ff42 	bl	800511c <malloc>
 8005298:	4602      	mov	r2, r0
 800529a:	61e0      	str	r0, [r4, #28]
 800529c:	b920      	cbnz	r0, 80052a8 <_Balloc+0x20>
 800529e:	4b18      	ldr	r3, [pc, #96]	@ (8005300 <_Balloc+0x78>)
 80052a0:	4818      	ldr	r0, [pc, #96]	@ (8005304 <_Balloc+0x7c>)
 80052a2:	216b      	movs	r1, #107	@ 0x6b
 80052a4:	f7ff f878 	bl	8004398 <__assert_func>
 80052a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052ac:	6006      	str	r6, [r0, #0]
 80052ae:	60c6      	str	r6, [r0, #12]
 80052b0:	69e6      	ldr	r6, [r4, #28]
 80052b2:	68f3      	ldr	r3, [r6, #12]
 80052b4:	b183      	cbz	r3, 80052d8 <_Balloc+0x50>
 80052b6:	69e3      	ldr	r3, [r4, #28]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052be:	b9b8      	cbnz	r0, 80052f0 <_Balloc+0x68>
 80052c0:	2101      	movs	r1, #1
 80052c2:	fa01 f605 	lsl.w	r6, r1, r5
 80052c6:	1d72      	adds	r2, r6, #5
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 fdf1 	bl	8005eb2 <_calloc_r>
 80052d0:	b160      	cbz	r0, 80052ec <_Balloc+0x64>
 80052d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052d6:	e00e      	b.n	80052f6 <_Balloc+0x6e>
 80052d8:	2221      	movs	r2, #33	@ 0x21
 80052da:	2104      	movs	r1, #4
 80052dc:	4620      	mov	r0, r4
 80052de:	f000 fde8 	bl	8005eb2 <_calloc_r>
 80052e2:	69e3      	ldr	r3, [r4, #28]
 80052e4:	60f0      	str	r0, [r6, #12]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e4      	bne.n	80052b6 <_Balloc+0x2e>
 80052ec:	2000      	movs	r0, #0
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	6802      	ldr	r2, [r0, #0]
 80052f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052f6:	2300      	movs	r3, #0
 80052f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052fc:	e7f7      	b.n	80052ee <_Balloc+0x66>
 80052fe:	bf00      	nop
 8005300:	080060bd 	.word	0x080060bd
 8005304:	0800613d 	.word	0x0800613d

08005308 <_Bfree>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	69c6      	ldr	r6, [r0, #28]
 800530c:	4605      	mov	r5, r0
 800530e:	460c      	mov	r4, r1
 8005310:	b976      	cbnz	r6, 8005330 <_Bfree+0x28>
 8005312:	2010      	movs	r0, #16
 8005314:	f7ff ff02 	bl	800511c <malloc>
 8005318:	4602      	mov	r2, r0
 800531a:	61e8      	str	r0, [r5, #28]
 800531c:	b920      	cbnz	r0, 8005328 <_Bfree+0x20>
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <_Bfree+0x3c>)
 8005320:	4809      	ldr	r0, [pc, #36]	@ (8005348 <_Bfree+0x40>)
 8005322:	218f      	movs	r1, #143	@ 0x8f
 8005324:	f7ff f838 	bl	8004398 <__assert_func>
 8005328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800532c:	6006      	str	r6, [r0, #0]
 800532e:	60c6      	str	r6, [r0, #12]
 8005330:	b13c      	cbz	r4, 8005342 <_Bfree+0x3a>
 8005332:	69eb      	ldr	r3, [r5, #28]
 8005334:	6862      	ldr	r2, [r4, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800533c:	6021      	str	r1, [r4, #0]
 800533e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005342:	bd70      	pop	{r4, r5, r6, pc}
 8005344:	080060bd 	.word	0x080060bd
 8005348:	0800613d 	.word	0x0800613d

0800534c <__multadd>:
 800534c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005350:	690d      	ldr	r5, [r1, #16]
 8005352:	4607      	mov	r7, r0
 8005354:	460c      	mov	r4, r1
 8005356:	461e      	mov	r6, r3
 8005358:	f101 0c14 	add.w	ip, r1, #20
 800535c:	2000      	movs	r0, #0
 800535e:	f8dc 3000 	ldr.w	r3, [ip]
 8005362:	b299      	uxth	r1, r3
 8005364:	fb02 6101 	mla	r1, r2, r1, r6
 8005368:	0c1e      	lsrs	r6, r3, #16
 800536a:	0c0b      	lsrs	r3, r1, #16
 800536c:	fb02 3306 	mla	r3, r2, r6, r3
 8005370:	b289      	uxth	r1, r1
 8005372:	3001      	adds	r0, #1
 8005374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005378:	4285      	cmp	r5, r0
 800537a:	f84c 1b04 	str.w	r1, [ip], #4
 800537e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005382:	dcec      	bgt.n	800535e <__multadd+0x12>
 8005384:	b30e      	cbz	r6, 80053ca <__multadd+0x7e>
 8005386:	68a3      	ldr	r3, [r4, #8]
 8005388:	42ab      	cmp	r3, r5
 800538a:	dc19      	bgt.n	80053c0 <__multadd+0x74>
 800538c:	6861      	ldr	r1, [r4, #4]
 800538e:	4638      	mov	r0, r7
 8005390:	3101      	adds	r1, #1
 8005392:	f7ff ff79 	bl	8005288 <_Balloc>
 8005396:	4680      	mov	r8, r0
 8005398:	b928      	cbnz	r0, 80053a6 <__multadd+0x5a>
 800539a:	4602      	mov	r2, r0
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <__multadd+0x84>)
 800539e:	480d      	ldr	r0, [pc, #52]	@ (80053d4 <__multadd+0x88>)
 80053a0:	21ba      	movs	r1, #186	@ 0xba
 80053a2:	f7fe fff9 	bl	8004398 <__assert_func>
 80053a6:	6922      	ldr	r2, [r4, #16]
 80053a8:	3202      	adds	r2, #2
 80053aa:	f104 010c 	add.w	r1, r4, #12
 80053ae:	0092      	lsls	r2, r2, #2
 80053b0:	300c      	adds	r0, #12
 80053b2:	f7fe ffe2 	bl	800437a <memcpy>
 80053b6:	4621      	mov	r1, r4
 80053b8:	4638      	mov	r0, r7
 80053ba:	f7ff ffa5 	bl	8005308 <_Bfree>
 80053be:	4644      	mov	r4, r8
 80053c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053c4:	3501      	adds	r5, #1
 80053c6:	615e      	str	r6, [r3, #20]
 80053c8:	6125      	str	r5, [r4, #16]
 80053ca:	4620      	mov	r0, r4
 80053cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d0:	0800612c 	.word	0x0800612c
 80053d4:	0800613d 	.word	0x0800613d

080053d8 <__hi0bits>:
 80053d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80053dc:	4603      	mov	r3, r0
 80053de:	bf36      	itet	cc
 80053e0:	0403      	lslcc	r3, r0, #16
 80053e2:	2000      	movcs	r0, #0
 80053e4:	2010      	movcc	r0, #16
 80053e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053ea:	bf3c      	itt	cc
 80053ec:	021b      	lslcc	r3, r3, #8
 80053ee:	3008      	addcc	r0, #8
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f4:	bf3c      	itt	cc
 80053f6:	011b      	lslcc	r3, r3, #4
 80053f8:	3004      	addcc	r0, #4
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fe:	bf3c      	itt	cc
 8005400:	009b      	lslcc	r3, r3, #2
 8005402:	3002      	addcc	r0, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	db05      	blt.n	8005414 <__hi0bits+0x3c>
 8005408:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800540c:	f100 0001 	add.w	r0, r0, #1
 8005410:	bf08      	it	eq
 8005412:	2020      	moveq	r0, #32
 8005414:	4770      	bx	lr

08005416 <__lo0bits>:
 8005416:	6803      	ldr	r3, [r0, #0]
 8005418:	4602      	mov	r2, r0
 800541a:	f013 0007 	ands.w	r0, r3, #7
 800541e:	d00b      	beq.n	8005438 <__lo0bits+0x22>
 8005420:	07d9      	lsls	r1, r3, #31
 8005422:	d421      	bmi.n	8005468 <__lo0bits+0x52>
 8005424:	0798      	lsls	r0, r3, #30
 8005426:	bf49      	itett	mi
 8005428:	085b      	lsrmi	r3, r3, #1
 800542a:	089b      	lsrpl	r3, r3, #2
 800542c:	2001      	movmi	r0, #1
 800542e:	6013      	strmi	r3, [r2, #0]
 8005430:	bf5c      	itt	pl
 8005432:	6013      	strpl	r3, [r2, #0]
 8005434:	2002      	movpl	r0, #2
 8005436:	4770      	bx	lr
 8005438:	b299      	uxth	r1, r3
 800543a:	b909      	cbnz	r1, 8005440 <__lo0bits+0x2a>
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	2010      	movs	r0, #16
 8005440:	b2d9      	uxtb	r1, r3
 8005442:	b909      	cbnz	r1, 8005448 <__lo0bits+0x32>
 8005444:	3008      	adds	r0, #8
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	0719      	lsls	r1, r3, #28
 800544a:	bf04      	itt	eq
 800544c:	091b      	lsreq	r3, r3, #4
 800544e:	3004      	addeq	r0, #4
 8005450:	0799      	lsls	r1, r3, #30
 8005452:	bf04      	itt	eq
 8005454:	089b      	lsreq	r3, r3, #2
 8005456:	3002      	addeq	r0, #2
 8005458:	07d9      	lsls	r1, r3, #31
 800545a:	d403      	bmi.n	8005464 <__lo0bits+0x4e>
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	f100 0001 	add.w	r0, r0, #1
 8005462:	d003      	beq.n	800546c <__lo0bits+0x56>
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4770      	bx	lr
 8005468:	2000      	movs	r0, #0
 800546a:	4770      	bx	lr
 800546c:	2020      	movs	r0, #32
 800546e:	4770      	bx	lr

08005470 <__i2b>:
 8005470:	b510      	push	{r4, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	2101      	movs	r1, #1
 8005476:	f7ff ff07 	bl	8005288 <_Balloc>
 800547a:	4602      	mov	r2, r0
 800547c:	b928      	cbnz	r0, 800548a <__i2b+0x1a>
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <__i2b+0x24>)
 8005480:	4805      	ldr	r0, [pc, #20]	@ (8005498 <__i2b+0x28>)
 8005482:	f240 1145 	movw	r1, #325	@ 0x145
 8005486:	f7fe ff87 	bl	8004398 <__assert_func>
 800548a:	2301      	movs	r3, #1
 800548c:	6144      	str	r4, [r0, #20]
 800548e:	6103      	str	r3, [r0, #16]
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	0800612c 	.word	0x0800612c
 8005498:	0800613d 	.word	0x0800613d

0800549c <__multiply>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4617      	mov	r7, r2
 80054a2:	690a      	ldr	r2, [r1, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	bfa8      	it	ge
 80054aa:	463b      	movge	r3, r7
 80054ac:	4689      	mov	r9, r1
 80054ae:	bfa4      	itt	ge
 80054b0:	460f      	movge	r7, r1
 80054b2:	4699      	movge	r9, r3
 80054b4:	693d      	ldr	r5, [r7, #16]
 80054b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	eb05 060a 	add.w	r6, r5, sl
 80054c2:	42b3      	cmp	r3, r6
 80054c4:	b085      	sub	sp, #20
 80054c6:	bfb8      	it	lt
 80054c8:	3101      	addlt	r1, #1
 80054ca:	f7ff fedd 	bl	8005288 <_Balloc>
 80054ce:	b930      	cbnz	r0, 80054de <__multiply+0x42>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b41      	ldr	r3, [pc, #260]	@ (80055d8 <__multiply+0x13c>)
 80054d4:	4841      	ldr	r0, [pc, #260]	@ (80055dc <__multiply+0x140>)
 80054d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80054da:	f7fe ff5d 	bl	8004398 <__assert_func>
 80054de:	f100 0414 	add.w	r4, r0, #20
 80054e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80054e6:	4623      	mov	r3, r4
 80054e8:	2200      	movs	r2, #0
 80054ea:	4573      	cmp	r3, lr
 80054ec:	d320      	bcc.n	8005530 <__multiply+0x94>
 80054ee:	f107 0814 	add.w	r8, r7, #20
 80054f2:	f109 0114 	add.w	r1, r9, #20
 80054f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80054fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	1beb      	subs	r3, r5, r7
 8005502:	3b15      	subs	r3, #21
 8005504:	f023 0303 	bic.w	r3, r3, #3
 8005508:	3304      	adds	r3, #4
 800550a:	3715      	adds	r7, #21
 800550c:	42bd      	cmp	r5, r7
 800550e:	bf38      	it	cc
 8005510:	2304      	movcc	r3, #4
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	9b02      	ldr	r3, [sp, #8]
 8005516:	9103      	str	r1, [sp, #12]
 8005518:	428b      	cmp	r3, r1
 800551a:	d80c      	bhi.n	8005536 <__multiply+0x9a>
 800551c:	2e00      	cmp	r6, #0
 800551e:	dd03      	ble.n	8005528 <__multiply+0x8c>
 8005520:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005524:	2b00      	cmp	r3, #0
 8005526:	d055      	beq.n	80055d4 <__multiply+0x138>
 8005528:	6106      	str	r6, [r0, #16]
 800552a:	b005      	add	sp, #20
 800552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005530:	f843 2b04 	str.w	r2, [r3], #4
 8005534:	e7d9      	b.n	80054ea <__multiply+0x4e>
 8005536:	f8b1 a000 	ldrh.w	sl, [r1]
 800553a:	f1ba 0f00 	cmp.w	sl, #0
 800553e:	d01f      	beq.n	8005580 <__multiply+0xe4>
 8005540:	46c4      	mov	ip, r8
 8005542:	46a1      	mov	r9, r4
 8005544:	2700      	movs	r7, #0
 8005546:	f85c 2b04 	ldr.w	r2, [ip], #4
 800554a:	f8d9 3000 	ldr.w	r3, [r9]
 800554e:	fa1f fb82 	uxth.w	fp, r2
 8005552:	b29b      	uxth	r3, r3
 8005554:	fb0a 330b 	mla	r3, sl, fp, r3
 8005558:	443b      	add	r3, r7
 800555a:	f8d9 7000 	ldr.w	r7, [r9]
 800555e:	0c12      	lsrs	r2, r2, #16
 8005560:	0c3f      	lsrs	r7, r7, #16
 8005562:	fb0a 7202 	mla	r2, sl, r2, r7
 8005566:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005570:	4565      	cmp	r5, ip
 8005572:	f849 3b04 	str.w	r3, [r9], #4
 8005576:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800557a:	d8e4      	bhi.n	8005546 <__multiply+0xaa>
 800557c:	9b01      	ldr	r3, [sp, #4]
 800557e:	50e7      	str	r7, [r4, r3]
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005586:	3104      	adds	r1, #4
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	d020      	beq.n	80055d0 <__multiply+0x134>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	4647      	mov	r7, r8
 8005592:	46a4      	mov	ip, r4
 8005594:	f04f 0a00 	mov.w	sl, #0
 8005598:	f8b7 b000 	ldrh.w	fp, [r7]
 800559c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80055a0:	fb09 220b 	mla	r2, r9, fp, r2
 80055a4:	4452      	add	r2, sl
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ac:	f84c 3b04 	str.w	r3, [ip], #4
 80055b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80055b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80055bc:	fb09 330a 	mla	r3, r9, sl, r3
 80055c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80055c4:	42bd      	cmp	r5, r7
 80055c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055ca:	d8e5      	bhi.n	8005598 <__multiply+0xfc>
 80055cc:	9a01      	ldr	r2, [sp, #4]
 80055ce:	50a3      	str	r3, [r4, r2]
 80055d0:	3404      	adds	r4, #4
 80055d2:	e79f      	b.n	8005514 <__multiply+0x78>
 80055d4:	3e01      	subs	r6, #1
 80055d6:	e7a1      	b.n	800551c <__multiply+0x80>
 80055d8:	0800612c 	.word	0x0800612c
 80055dc:	0800613d 	.word	0x0800613d

080055e0 <__pow5mult>:
 80055e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e4:	4615      	mov	r5, r2
 80055e6:	f012 0203 	ands.w	r2, r2, #3
 80055ea:	4607      	mov	r7, r0
 80055ec:	460e      	mov	r6, r1
 80055ee:	d007      	beq.n	8005600 <__pow5mult+0x20>
 80055f0:	4c25      	ldr	r4, [pc, #148]	@ (8005688 <__pow5mult+0xa8>)
 80055f2:	3a01      	subs	r2, #1
 80055f4:	2300      	movs	r3, #0
 80055f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055fa:	f7ff fea7 	bl	800534c <__multadd>
 80055fe:	4606      	mov	r6, r0
 8005600:	10ad      	asrs	r5, r5, #2
 8005602:	d03d      	beq.n	8005680 <__pow5mult+0xa0>
 8005604:	69fc      	ldr	r4, [r7, #28]
 8005606:	b97c      	cbnz	r4, 8005628 <__pow5mult+0x48>
 8005608:	2010      	movs	r0, #16
 800560a:	f7ff fd87 	bl	800511c <malloc>
 800560e:	4602      	mov	r2, r0
 8005610:	61f8      	str	r0, [r7, #28]
 8005612:	b928      	cbnz	r0, 8005620 <__pow5mult+0x40>
 8005614:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <__pow5mult+0xac>)
 8005616:	481e      	ldr	r0, [pc, #120]	@ (8005690 <__pow5mult+0xb0>)
 8005618:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800561c:	f7fe febc 	bl	8004398 <__assert_func>
 8005620:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005624:	6004      	str	r4, [r0, #0]
 8005626:	60c4      	str	r4, [r0, #12]
 8005628:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800562c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005630:	b94c      	cbnz	r4, 8005646 <__pow5mult+0x66>
 8005632:	f240 2171 	movw	r1, #625	@ 0x271
 8005636:	4638      	mov	r0, r7
 8005638:	f7ff ff1a 	bl	8005470 <__i2b>
 800563c:	2300      	movs	r3, #0
 800563e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005642:	4604      	mov	r4, r0
 8005644:	6003      	str	r3, [r0, #0]
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	07eb      	lsls	r3, r5, #31
 800564c:	d50a      	bpl.n	8005664 <__pow5mult+0x84>
 800564e:	4631      	mov	r1, r6
 8005650:	4622      	mov	r2, r4
 8005652:	4638      	mov	r0, r7
 8005654:	f7ff ff22 	bl	800549c <__multiply>
 8005658:	4631      	mov	r1, r6
 800565a:	4680      	mov	r8, r0
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff fe53 	bl	8005308 <_Bfree>
 8005662:	4646      	mov	r6, r8
 8005664:	106d      	asrs	r5, r5, #1
 8005666:	d00b      	beq.n	8005680 <__pow5mult+0xa0>
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	b938      	cbnz	r0, 800567c <__pow5mult+0x9c>
 800566c:	4622      	mov	r2, r4
 800566e:	4621      	mov	r1, r4
 8005670:	4638      	mov	r0, r7
 8005672:	f7ff ff13 	bl	800549c <__multiply>
 8005676:	6020      	str	r0, [r4, #0]
 8005678:	f8c0 9000 	str.w	r9, [r0]
 800567c:	4604      	mov	r4, r0
 800567e:	e7e4      	b.n	800564a <__pow5mult+0x6a>
 8005680:	4630      	mov	r0, r6
 8005682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005686:	bf00      	nop
 8005688:	080061b4 	.word	0x080061b4
 800568c:	080060bd 	.word	0x080060bd
 8005690:	0800613d 	.word	0x0800613d

08005694 <__lshift>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	6849      	ldr	r1, [r1, #4]
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	4607      	mov	r7, r0
 80056a6:	4691      	mov	r9, r2
 80056a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056ac:	f108 0601 	add.w	r6, r8, #1
 80056b0:	42b3      	cmp	r3, r6
 80056b2:	db0b      	blt.n	80056cc <__lshift+0x38>
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff fde7 	bl	8005288 <_Balloc>
 80056ba:	4605      	mov	r5, r0
 80056bc:	b948      	cbnz	r0, 80056d2 <__lshift+0x3e>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <__lshift+0xd0>)
 80056c2:	4829      	ldr	r0, [pc, #164]	@ (8005768 <__lshift+0xd4>)
 80056c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80056c8:	f7fe fe66 	bl	8004398 <__assert_func>
 80056cc:	3101      	adds	r1, #1
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	e7ee      	b.n	80056b0 <__lshift+0x1c>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f100 0114 	add.w	r1, r0, #20
 80056d8:	f100 0210 	add.w	r2, r0, #16
 80056dc:	4618      	mov	r0, r3
 80056de:	4553      	cmp	r3, sl
 80056e0:	db33      	blt.n	800574a <__lshift+0xb6>
 80056e2:	6920      	ldr	r0, [r4, #16]
 80056e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056e8:	f104 0314 	add.w	r3, r4, #20
 80056ec:	f019 091f 	ands.w	r9, r9, #31
 80056f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056f8:	d02b      	beq.n	8005752 <__lshift+0xbe>
 80056fa:	f1c9 0e20 	rsb	lr, r9, #32
 80056fe:	468a      	mov	sl, r1
 8005700:	2200      	movs	r2, #0
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	fa00 f009 	lsl.w	r0, r0, r9
 8005708:	4310      	orrs	r0, r2
 800570a:	f84a 0b04 	str.w	r0, [sl], #4
 800570e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005712:	459c      	cmp	ip, r3
 8005714:	fa22 f20e 	lsr.w	r2, r2, lr
 8005718:	d8f3      	bhi.n	8005702 <__lshift+0x6e>
 800571a:	ebac 0304 	sub.w	r3, ip, r4
 800571e:	3b15      	subs	r3, #21
 8005720:	f023 0303 	bic.w	r3, r3, #3
 8005724:	3304      	adds	r3, #4
 8005726:	f104 0015 	add.w	r0, r4, #21
 800572a:	4560      	cmp	r0, ip
 800572c:	bf88      	it	hi
 800572e:	2304      	movhi	r3, #4
 8005730:	50ca      	str	r2, [r1, r3]
 8005732:	b10a      	cbz	r2, 8005738 <__lshift+0xa4>
 8005734:	f108 0602 	add.w	r6, r8, #2
 8005738:	3e01      	subs	r6, #1
 800573a:	4638      	mov	r0, r7
 800573c:	612e      	str	r6, [r5, #16]
 800573e:	4621      	mov	r1, r4
 8005740:	f7ff fde2 	bl	8005308 <_Bfree>
 8005744:	4628      	mov	r0, r5
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	f842 0f04 	str.w	r0, [r2, #4]!
 800574e:	3301      	adds	r3, #1
 8005750:	e7c5      	b.n	80056de <__lshift+0x4a>
 8005752:	3904      	subs	r1, #4
 8005754:	f853 2b04 	ldr.w	r2, [r3], #4
 8005758:	f841 2f04 	str.w	r2, [r1, #4]!
 800575c:	459c      	cmp	ip, r3
 800575e:	d8f9      	bhi.n	8005754 <__lshift+0xc0>
 8005760:	e7ea      	b.n	8005738 <__lshift+0xa4>
 8005762:	bf00      	nop
 8005764:	0800612c 	.word	0x0800612c
 8005768:	0800613d 	.word	0x0800613d

0800576c <__mcmp>:
 800576c:	690a      	ldr	r2, [r1, #16]
 800576e:	4603      	mov	r3, r0
 8005770:	6900      	ldr	r0, [r0, #16]
 8005772:	1a80      	subs	r0, r0, r2
 8005774:	b530      	push	{r4, r5, lr}
 8005776:	d10e      	bne.n	8005796 <__mcmp+0x2a>
 8005778:	3314      	adds	r3, #20
 800577a:	3114      	adds	r1, #20
 800577c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005780:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005784:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005788:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800578c:	4295      	cmp	r5, r2
 800578e:	d003      	beq.n	8005798 <__mcmp+0x2c>
 8005790:	d205      	bcs.n	800579e <__mcmp+0x32>
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	bd30      	pop	{r4, r5, pc}
 8005798:	42a3      	cmp	r3, r4
 800579a:	d3f3      	bcc.n	8005784 <__mcmp+0x18>
 800579c:	e7fb      	b.n	8005796 <__mcmp+0x2a>
 800579e:	2001      	movs	r0, #1
 80057a0:	e7f9      	b.n	8005796 <__mcmp+0x2a>
	...

080057a4 <__mdiff>:
 80057a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	4689      	mov	r9, r1
 80057aa:	4606      	mov	r6, r0
 80057ac:	4611      	mov	r1, r2
 80057ae:	4648      	mov	r0, r9
 80057b0:	4614      	mov	r4, r2
 80057b2:	f7ff ffdb 	bl	800576c <__mcmp>
 80057b6:	1e05      	subs	r5, r0, #0
 80057b8:	d112      	bne.n	80057e0 <__mdiff+0x3c>
 80057ba:	4629      	mov	r1, r5
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff fd63 	bl	8005288 <_Balloc>
 80057c2:	4602      	mov	r2, r0
 80057c4:	b928      	cbnz	r0, 80057d2 <__mdiff+0x2e>
 80057c6:	4b3f      	ldr	r3, [pc, #252]	@ (80058c4 <__mdiff+0x120>)
 80057c8:	f240 2137 	movw	r1, #567	@ 0x237
 80057cc:	483e      	ldr	r0, [pc, #248]	@ (80058c8 <__mdiff+0x124>)
 80057ce:	f7fe fde3 	bl	8004398 <__assert_func>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057d8:	4610      	mov	r0, r2
 80057da:	b003      	add	sp, #12
 80057dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e0:	bfbc      	itt	lt
 80057e2:	464b      	movlt	r3, r9
 80057e4:	46a1      	movlt	r9, r4
 80057e6:	4630      	mov	r0, r6
 80057e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057ec:	bfba      	itte	lt
 80057ee:	461c      	movlt	r4, r3
 80057f0:	2501      	movlt	r5, #1
 80057f2:	2500      	movge	r5, #0
 80057f4:	f7ff fd48 	bl	8005288 <_Balloc>
 80057f8:	4602      	mov	r2, r0
 80057fa:	b918      	cbnz	r0, 8005804 <__mdiff+0x60>
 80057fc:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <__mdiff+0x120>)
 80057fe:	f240 2145 	movw	r1, #581	@ 0x245
 8005802:	e7e3      	b.n	80057cc <__mdiff+0x28>
 8005804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005808:	6926      	ldr	r6, [r4, #16]
 800580a:	60c5      	str	r5, [r0, #12]
 800580c:	f109 0310 	add.w	r3, r9, #16
 8005810:	f109 0514 	add.w	r5, r9, #20
 8005814:	f104 0e14 	add.w	lr, r4, #20
 8005818:	f100 0b14 	add.w	fp, r0, #20
 800581c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005820:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	46d9      	mov	r9, fp
 8005828:	f04f 0c00 	mov.w	ip, #0
 800582c:	9b01      	ldr	r3, [sp, #4]
 800582e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005832:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	fa1f f38a 	uxth.w	r3, sl
 800583c:	4619      	mov	r1, r3
 800583e:	b283      	uxth	r3, r0
 8005840:	1acb      	subs	r3, r1, r3
 8005842:	0c00      	lsrs	r0, r0, #16
 8005844:	4463      	add	r3, ip
 8005846:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800584a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800584e:	b29b      	uxth	r3, r3
 8005850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005854:	4576      	cmp	r6, lr
 8005856:	f849 3b04 	str.w	r3, [r9], #4
 800585a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800585e:	d8e5      	bhi.n	800582c <__mdiff+0x88>
 8005860:	1b33      	subs	r3, r6, r4
 8005862:	3b15      	subs	r3, #21
 8005864:	f023 0303 	bic.w	r3, r3, #3
 8005868:	3415      	adds	r4, #21
 800586a:	3304      	adds	r3, #4
 800586c:	42a6      	cmp	r6, r4
 800586e:	bf38      	it	cc
 8005870:	2304      	movcc	r3, #4
 8005872:	441d      	add	r5, r3
 8005874:	445b      	add	r3, fp
 8005876:	461e      	mov	r6, r3
 8005878:	462c      	mov	r4, r5
 800587a:	4544      	cmp	r4, r8
 800587c:	d30e      	bcc.n	800589c <__mdiff+0xf8>
 800587e:	f108 0103 	add.w	r1, r8, #3
 8005882:	1b49      	subs	r1, r1, r5
 8005884:	f021 0103 	bic.w	r1, r1, #3
 8005888:	3d03      	subs	r5, #3
 800588a:	45a8      	cmp	r8, r5
 800588c:	bf38      	it	cc
 800588e:	2100      	movcc	r1, #0
 8005890:	440b      	add	r3, r1
 8005892:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005896:	b191      	cbz	r1, 80058be <__mdiff+0x11a>
 8005898:	6117      	str	r7, [r2, #16]
 800589a:	e79d      	b.n	80057d8 <__mdiff+0x34>
 800589c:	f854 1b04 	ldr.w	r1, [r4], #4
 80058a0:	46e6      	mov	lr, ip
 80058a2:	0c08      	lsrs	r0, r1, #16
 80058a4:	fa1c fc81 	uxtah	ip, ip, r1
 80058a8:	4471      	add	r1, lr
 80058aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80058ae:	b289      	uxth	r1, r1
 80058b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058b4:	f846 1b04 	str.w	r1, [r6], #4
 80058b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058bc:	e7dd      	b.n	800587a <__mdiff+0xd6>
 80058be:	3f01      	subs	r7, #1
 80058c0:	e7e7      	b.n	8005892 <__mdiff+0xee>
 80058c2:	bf00      	nop
 80058c4:	0800612c 	.word	0x0800612c
 80058c8:	0800613d 	.word	0x0800613d

080058cc <__d2b>:
 80058cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058d0:	460f      	mov	r7, r1
 80058d2:	2101      	movs	r1, #1
 80058d4:	ec59 8b10 	vmov	r8, r9, d0
 80058d8:	4616      	mov	r6, r2
 80058da:	f7ff fcd5 	bl	8005288 <_Balloc>
 80058de:	4604      	mov	r4, r0
 80058e0:	b930      	cbnz	r0, 80058f0 <__d2b+0x24>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4b23      	ldr	r3, [pc, #140]	@ (8005974 <__d2b+0xa8>)
 80058e6:	4824      	ldr	r0, [pc, #144]	@ (8005978 <__d2b+0xac>)
 80058e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80058ec:	f7fe fd54 	bl	8004398 <__assert_func>
 80058f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058f8:	b10d      	cbz	r5, 80058fe <__d2b+0x32>
 80058fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	f1b8 0300 	subs.w	r3, r8, #0
 8005904:	d023      	beq.n	800594e <__d2b+0x82>
 8005906:	4668      	mov	r0, sp
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f7ff fd84 	bl	8005416 <__lo0bits>
 800590e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005912:	b1d0      	cbz	r0, 800594a <__d2b+0x7e>
 8005914:	f1c0 0320 	rsb	r3, r0, #32
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	430b      	orrs	r3, r1
 800591e:	40c2      	lsrs	r2, r0
 8005920:	6163      	str	r3, [r4, #20]
 8005922:	9201      	str	r2, [sp, #4]
 8005924:	9b01      	ldr	r3, [sp, #4]
 8005926:	61a3      	str	r3, [r4, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf0c      	ite	eq
 800592c:	2201      	moveq	r2, #1
 800592e:	2202      	movne	r2, #2
 8005930:	6122      	str	r2, [r4, #16]
 8005932:	b1a5      	cbz	r5, 800595e <__d2b+0x92>
 8005934:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005938:	4405      	add	r5, r0
 800593a:	603d      	str	r5, [r7, #0]
 800593c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005940:	6030      	str	r0, [r6, #0]
 8005942:	4620      	mov	r0, r4
 8005944:	b003      	add	sp, #12
 8005946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800594a:	6161      	str	r1, [r4, #20]
 800594c:	e7ea      	b.n	8005924 <__d2b+0x58>
 800594e:	a801      	add	r0, sp, #4
 8005950:	f7ff fd61 	bl	8005416 <__lo0bits>
 8005954:	9b01      	ldr	r3, [sp, #4]
 8005956:	6163      	str	r3, [r4, #20]
 8005958:	3020      	adds	r0, #32
 800595a:	2201      	movs	r2, #1
 800595c:	e7e8      	b.n	8005930 <__d2b+0x64>
 800595e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005962:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005966:	6038      	str	r0, [r7, #0]
 8005968:	6918      	ldr	r0, [r3, #16]
 800596a:	f7ff fd35 	bl	80053d8 <__hi0bits>
 800596e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005972:	e7e5      	b.n	8005940 <__d2b+0x74>
 8005974:	0800612c 	.word	0x0800612c
 8005978:	0800613d 	.word	0x0800613d

0800597c <__sfputc_r>:
 800597c:	6893      	ldr	r3, [r2, #8]
 800597e:	3b01      	subs	r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	b410      	push	{r4}
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	da08      	bge.n	800599a <__sfputc_r+0x1e>
 8005988:	6994      	ldr	r4, [r2, #24]
 800598a:	42a3      	cmp	r3, r4
 800598c:	db01      	blt.n	8005992 <__sfputc_r+0x16>
 800598e:	290a      	cmp	r1, #10
 8005990:	d103      	bne.n	800599a <__sfputc_r+0x1e>
 8005992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005996:	f7fe bbdc 	b.w	8004152 <__swbuf_r>
 800599a:	6813      	ldr	r3, [r2, #0]
 800599c:	1c58      	adds	r0, r3, #1
 800599e:	6010      	str	r0, [r2, #0]
 80059a0:	7019      	strb	r1, [r3, #0]
 80059a2:	4608      	mov	r0, r1
 80059a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <__sfputs_r>:
 80059aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ac:	4606      	mov	r6, r0
 80059ae:	460f      	mov	r7, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	18d5      	adds	r5, r2, r3
 80059b4:	42ac      	cmp	r4, r5
 80059b6:	d101      	bne.n	80059bc <__sfputs_r+0x12>
 80059b8:	2000      	movs	r0, #0
 80059ba:	e007      	b.n	80059cc <__sfputs_r+0x22>
 80059bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c0:	463a      	mov	r2, r7
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7ff ffda 	bl	800597c <__sfputc_r>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d1f3      	bne.n	80059b4 <__sfputs_r+0xa>
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059d0 <_vfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	460d      	mov	r5, r1
 80059d6:	b09d      	sub	sp, #116	@ 0x74
 80059d8:	4614      	mov	r4, r2
 80059da:	4698      	mov	r8, r3
 80059dc:	4606      	mov	r6, r0
 80059de:	b118      	cbz	r0, 80059e8 <_vfiprintf_r+0x18>
 80059e0:	6a03      	ldr	r3, [r0, #32]
 80059e2:	b90b      	cbnz	r3, 80059e8 <_vfiprintf_r+0x18>
 80059e4:	f7fe fb2a 	bl	800403c <__sinit>
 80059e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059ea:	07d9      	lsls	r1, r3, #31
 80059ec:	d405      	bmi.n	80059fa <_vfiprintf_r+0x2a>
 80059ee:	89ab      	ldrh	r3, [r5, #12]
 80059f0:	059a      	lsls	r2, r3, #22
 80059f2:	d402      	bmi.n	80059fa <_vfiprintf_r+0x2a>
 80059f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059f6:	f7fe fcbe 	bl	8004376 <__retarget_lock_acquire_recursive>
 80059fa:	89ab      	ldrh	r3, [r5, #12]
 80059fc:	071b      	lsls	r3, r3, #28
 80059fe:	d501      	bpl.n	8005a04 <_vfiprintf_r+0x34>
 8005a00:	692b      	ldr	r3, [r5, #16]
 8005a02:	b99b      	cbnz	r3, 8005a2c <_vfiprintf_r+0x5c>
 8005a04:	4629      	mov	r1, r5
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7fe fbe2 	bl	80041d0 <__swsetup_r>
 8005a0c:	b170      	cbz	r0, 8005a2c <_vfiprintf_r+0x5c>
 8005a0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a10:	07dc      	lsls	r4, r3, #31
 8005a12:	d504      	bpl.n	8005a1e <_vfiprintf_r+0x4e>
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	b01d      	add	sp, #116	@ 0x74
 8005a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	0598      	lsls	r0, r3, #22
 8005a22:	d4f7      	bmi.n	8005a14 <_vfiprintf_r+0x44>
 8005a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a26:	f7fe fca7 	bl	8004378 <__retarget_lock_release_recursive>
 8005a2a:	e7f3      	b.n	8005a14 <_vfiprintf_r+0x44>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a30:	2320      	movs	r3, #32
 8005a32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a3a:	2330      	movs	r3, #48	@ 0x30
 8005a3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005bec <_vfiprintf_r+0x21c>
 8005a40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a44:	f04f 0901 	mov.w	r9, #1
 8005a48:	4623      	mov	r3, r4
 8005a4a:	469a      	mov	sl, r3
 8005a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a50:	b10a      	cbz	r2, 8005a56 <_vfiprintf_r+0x86>
 8005a52:	2a25      	cmp	r2, #37	@ 0x25
 8005a54:	d1f9      	bne.n	8005a4a <_vfiprintf_r+0x7a>
 8005a56:	ebba 0b04 	subs.w	fp, sl, r4
 8005a5a:	d00b      	beq.n	8005a74 <_vfiprintf_r+0xa4>
 8005a5c:	465b      	mov	r3, fp
 8005a5e:	4622      	mov	r2, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ffa1 	bl	80059aa <__sfputs_r>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f000 80a7 	beq.w	8005bbc <_vfiprintf_r+0x1ec>
 8005a6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a70:	445a      	add	r2, fp
 8005a72:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 809f 	beq.w	8005bbc <_vfiprintf_r+0x1ec>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295
 8005a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a88:	f10a 0a01 	add.w	sl, sl, #1
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9307      	str	r3, [sp, #28]
 8005a90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a94:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a96:	4654      	mov	r4, sl
 8005a98:	2205      	movs	r2, #5
 8005a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a9e:	4853      	ldr	r0, [pc, #332]	@ (8005bec <_vfiprintf_r+0x21c>)
 8005aa0:	f7fa fb96 	bl	80001d0 <memchr>
 8005aa4:	9a04      	ldr	r2, [sp, #16]
 8005aa6:	b9d8      	cbnz	r0, 8005ae0 <_vfiprintf_r+0x110>
 8005aa8:	06d1      	lsls	r1, r2, #27
 8005aaa:	bf44      	itt	mi
 8005aac:	2320      	movmi	r3, #32
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ab2:	0713      	lsls	r3, r2, #28
 8005ab4:	bf44      	itt	mi
 8005ab6:	232b      	movmi	r3, #43	@ 0x2b
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005abc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ac2:	d015      	beq.n	8005af0 <_vfiprintf_r+0x120>
 8005ac4:	9a07      	ldr	r2, [sp, #28]
 8005ac6:	4654      	mov	r4, sl
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f04f 0c0a 	mov.w	ip, #10
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ad4:	3b30      	subs	r3, #48	@ 0x30
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d94b      	bls.n	8005b72 <_vfiprintf_r+0x1a2>
 8005ada:	b1b0      	cbz	r0, 8005b0a <_vfiprintf_r+0x13a>
 8005adc:	9207      	str	r2, [sp, #28]
 8005ade:	e014      	b.n	8005b0a <_vfiprintf_r+0x13a>
 8005ae0:	eba0 0308 	sub.w	r3, r0, r8
 8005ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	46a2      	mov	sl, r4
 8005aee:	e7d2      	b.n	8005a96 <_vfiprintf_r+0xc6>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	1d19      	adds	r1, r3, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	9103      	str	r1, [sp, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfbb      	ittet	lt
 8005afc:	425b      	neglt	r3, r3
 8005afe:	f042 0202 	orrlt.w	r2, r2, #2
 8005b02:	9307      	strge	r3, [sp, #28]
 8005b04:	9307      	strlt	r3, [sp, #28]
 8005b06:	bfb8      	it	lt
 8005b08:	9204      	strlt	r2, [sp, #16]
 8005b0a:	7823      	ldrb	r3, [r4, #0]
 8005b0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b0e:	d10a      	bne.n	8005b26 <_vfiprintf_r+0x156>
 8005b10:	7863      	ldrb	r3, [r4, #1]
 8005b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b14:	d132      	bne.n	8005b7c <_vfiprintf_r+0x1ac>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	9203      	str	r2, [sp, #12]
 8005b1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b22:	3402      	adds	r4, #2
 8005b24:	9305      	str	r3, [sp, #20]
 8005b26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005bfc <_vfiprintf_r+0x22c>
 8005b2a:	7821      	ldrb	r1, [r4, #0]
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	4650      	mov	r0, sl
 8005b30:	f7fa fb4e 	bl	80001d0 <memchr>
 8005b34:	b138      	cbz	r0, 8005b46 <_vfiprintf_r+0x176>
 8005b36:	9b04      	ldr	r3, [sp, #16]
 8005b38:	eba0 000a 	sub.w	r0, r0, sl
 8005b3c:	2240      	movs	r2, #64	@ 0x40
 8005b3e:	4082      	lsls	r2, r0
 8005b40:	4313      	orrs	r3, r2
 8005b42:	3401      	adds	r4, #1
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4a:	4829      	ldr	r0, [pc, #164]	@ (8005bf0 <_vfiprintf_r+0x220>)
 8005b4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b50:	2206      	movs	r2, #6
 8005b52:	f7fa fb3d 	bl	80001d0 <memchr>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d03f      	beq.n	8005bda <_vfiprintf_r+0x20a>
 8005b5a:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <_vfiprintf_r+0x224>)
 8005b5c:	bb1b      	cbnz	r3, 8005ba6 <_vfiprintf_r+0x1d6>
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	3307      	adds	r3, #7
 8005b62:	f023 0307 	bic.w	r3, r3, #7
 8005b66:	3308      	adds	r3, #8
 8005b68:	9303      	str	r3, [sp, #12]
 8005b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b6c:	443b      	add	r3, r7
 8005b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b70:	e76a      	b.n	8005a48 <_vfiprintf_r+0x78>
 8005b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b76:	460c      	mov	r4, r1
 8005b78:	2001      	movs	r0, #1
 8005b7a:	e7a8      	b.n	8005ace <_vfiprintf_r+0xfe>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	3401      	adds	r4, #1
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	4619      	mov	r1, r3
 8005b84:	f04f 0c0a 	mov.w	ip, #10
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8e:	3a30      	subs	r2, #48	@ 0x30
 8005b90:	2a09      	cmp	r2, #9
 8005b92:	d903      	bls.n	8005b9c <_vfiprintf_r+0x1cc>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0c6      	beq.n	8005b26 <_vfiprintf_r+0x156>
 8005b98:	9105      	str	r1, [sp, #20]
 8005b9a:	e7c4      	b.n	8005b26 <_vfiprintf_r+0x156>
 8005b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e7f0      	b.n	8005b88 <_vfiprintf_r+0x1b8>
 8005ba6:	ab03      	add	r3, sp, #12
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	462a      	mov	r2, r5
 8005bac:	4b12      	ldr	r3, [pc, #72]	@ (8005bf8 <_vfiprintf_r+0x228>)
 8005bae:	a904      	add	r1, sp, #16
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f7fd fe01 	bl	80037b8 <_printf_float>
 8005bb6:	4607      	mov	r7, r0
 8005bb8:	1c78      	adds	r0, r7, #1
 8005bba:	d1d6      	bne.n	8005b6a <_vfiprintf_r+0x19a>
 8005bbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bbe:	07d9      	lsls	r1, r3, #31
 8005bc0:	d405      	bmi.n	8005bce <_vfiprintf_r+0x1fe>
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	059a      	lsls	r2, r3, #22
 8005bc6:	d402      	bmi.n	8005bce <_vfiprintf_r+0x1fe>
 8005bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bca:	f7fe fbd5 	bl	8004378 <__retarget_lock_release_recursive>
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	065b      	lsls	r3, r3, #25
 8005bd2:	f53f af1f 	bmi.w	8005a14 <_vfiprintf_r+0x44>
 8005bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bd8:	e71e      	b.n	8005a18 <_vfiprintf_r+0x48>
 8005bda:	ab03      	add	r3, sp, #12
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	462a      	mov	r2, r5
 8005be0:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <_vfiprintf_r+0x228>)
 8005be2:	a904      	add	r1, sp, #16
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7fe f87f 	bl	8003ce8 <_printf_i>
 8005bea:	e7e4      	b.n	8005bb6 <_vfiprintf_r+0x1e6>
 8005bec:	08006196 	.word	0x08006196
 8005bf0:	080061a0 	.word	0x080061a0
 8005bf4:	080037b9 	.word	0x080037b9
 8005bf8:	080059ab 	.word	0x080059ab
 8005bfc:	0800619c 	.word	0x0800619c

08005c00 <__sflush_r>:
 8005c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c08:	0716      	lsls	r6, r2, #28
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	d454      	bmi.n	8005cba <__sflush_r+0xba>
 8005c10:	684b      	ldr	r3, [r1, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dc02      	bgt.n	8005c1c <__sflush_r+0x1c>
 8005c16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dd48      	ble.n	8005cae <__sflush_r+0xae>
 8005c1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	d045      	beq.n	8005cae <__sflush_r+0xae>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c28:	682f      	ldr	r7, [r5, #0]
 8005c2a:	6a21      	ldr	r1, [r4, #32]
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	d030      	beq.n	8005c92 <__sflush_r+0x92>
 8005c30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c32:	89a3      	ldrh	r3, [r4, #12]
 8005c34:	0759      	lsls	r1, r3, #29
 8005c36:	d505      	bpl.n	8005c44 <__sflush_r+0x44>
 8005c38:	6863      	ldr	r3, [r4, #4]
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c3e:	b10b      	cbz	r3, 8005c44 <__sflush_r+0x44>
 8005c40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c42:	1ad2      	subs	r2, r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b0      	blx	r6
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	d106      	bne.n	8005c62 <__sflush_r+0x62>
 8005c54:	6829      	ldr	r1, [r5, #0]
 8005c56:	291d      	cmp	r1, #29
 8005c58:	d82b      	bhi.n	8005cb2 <__sflush_r+0xb2>
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <__sflush_r+0x104>)
 8005c5c:	40ca      	lsrs	r2, r1
 8005c5e:	07d6      	lsls	r6, r2, #31
 8005c60:	d527      	bpl.n	8005cb2 <__sflush_r+0xb2>
 8005c62:	2200      	movs	r2, #0
 8005c64:	6062      	str	r2, [r4, #4]
 8005c66:	04d9      	lsls	r1, r3, #19
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	d504      	bpl.n	8005c78 <__sflush_r+0x78>
 8005c6e:	1c42      	adds	r2, r0, #1
 8005c70:	d101      	bne.n	8005c76 <__sflush_r+0x76>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	b903      	cbnz	r3, 8005c78 <__sflush_r+0x78>
 8005c76:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c7a:	602f      	str	r7, [r5, #0]
 8005c7c:	b1b9      	cbz	r1, 8005cae <__sflush_r+0xae>
 8005c7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c82:	4299      	cmp	r1, r3
 8005c84:	d002      	beq.n	8005c8c <__sflush_r+0x8c>
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7ff f9fe 	bl	8005088 <_free_r>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c90:	e00d      	b.n	8005cae <__sflush_r+0xae>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b0      	blx	r6
 8005c98:	4602      	mov	r2, r0
 8005c9a:	1c50      	adds	r0, r2, #1
 8005c9c:	d1c9      	bne.n	8005c32 <__sflush_r+0x32>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0c6      	beq.n	8005c32 <__sflush_r+0x32>
 8005ca4:	2b1d      	cmp	r3, #29
 8005ca6:	d001      	beq.n	8005cac <__sflush_r+0xac>
 8005ca8:	2b16      	cmp	r3, #22
 8005caa:	d11e      	bne.n	8005cea <__sflush_r+0xea>
 8005cac:	602f      	str	r7, [r5, #0]
 8005cae:	2000      	movs	r0, #0
 8005cb0:	e022      	b.n	8005cf8 <__sflush_r+0xf8>
 8005cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cb6:	b21b      	sxth	r3, r3
 8005cb8:	e01b      	b.n	8005cf2 <__sflush_r+0xf2>
 8005cba:	690f      	ldr	r7, [r1, #16]
 8005cbc:	2f00      	cmp	r7, #0
 8005cbe:	d0f6      	beq.n	8005cae <__sflush_r+0xae>
 8005cc0:	0793      	lsls	r3, r2, #30
 8005cc2:	680e      	ldr	r6, [r1, #0]
 8005cc4:	bf08      	it	eq
 8005cc6:	694b      	ldreq	r3, [r1, #20]
 8005cc8:	600f      	str	r7, [r1, #0]
 8005cca:	bf18      	it	ne
 8005ccc:	2300      	movne	r3, #0
 8005cce:	eba6 0807 	sub.w	r8, r6, r7
 8005cd2:	608b      	str	r3, [r1, #8]
 8005cd4:	f1b8 0f00 	cmp.w	r8, #0
 8005cd8:	dde9      	ble.n	8005cae <__sflush_r+0xae>
 8005cda:	6a21      	ldr	r1, [r4, #32]
 8005cdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005cde:	4643      	mov	r3, r8
 8005ce0:	463a      	mov	r2, r7
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b0      	blx	r6
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	dc08      	bgt.n	8005cfc <__sflush_r+0xfc>
 8005cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cfc:	4407      	add	r7, r0
 8005cfe:	eba8 0800 	sub.w	r8, r8, r0
 8005d02:	e7e7      	b.n	8005cd4 <__sflush_r+0xd4>
 8005d04:	20400001 	.word	0x20400001

08005d08 <_fflush_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	b913      	cbnz	r3, 8005d18 <_fflush_r+0x10>
 8005d12:	2500      	movs	r5, #0
 8005d14:	4628      	mov	r0, r5
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	b118      	cbz	r0, 8005d22 <_fflush_r+0x1a>
 8005d1a:	6a03      	ldr	r3, [r0, #32]
 8005d1c:	b90b      	cbnz	r3, 8005d22 <_fflush_r+0x1a>
 8005d1e:	f7fe f98d 	bl	800403c <__sinit>
 8005d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f3      	beq.n	8005d12 <_fflush_r+0xa>
 8005d2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d2c:	07d0      	lsls	r0, r2, #31
 8005d2e:	d404      	bmi.n	8005d3a <_fflush_r+0x32>
 8005d30:	0599      	lsls	r1, r3, #22
 8005d32:	d402      	bmi.n	8005d3a <_fflush_r+0x32>
 8005d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d36:	f7fe fb1e 	bl	8004376 <__retarget_lock_acquire_recursive>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	f7ff ff5f 	bl	8005c00 <__sflush_r>
 8005d42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d44:	07da      	lsls	r2, r3, #31
 8005d46:	4605      	mov	r5, r0
 8005d48:	d4e4      	bmi.n	8005d14 <_fflush_r+0xc>
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	059b      	lsls	r3, r3, #22
 8005d4e:	d4e1      	bmi.n	8005d14 <_fflush_r+0xc>
 8005d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d52:	f7fe fb11 	bl	8004378 <__retarget_lock_release_recursive>
 8005d56:	e7dd      	b.n	8005d14 <_fflush_r+0xc>

08005d58 <fiprintf>:
 8005d58:	b40e      	push	{r1, r2, r3}
 8005d5a:	b503      	push	{r0, r1, lr}
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	ab03      	add	r3, sp, #12
 8005d60:	4805      	ldr	r0, [pc, #20]	@ (8005d78 <fiprintf+0x20>)
 8005d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	f7ff fe31 	bl	80059d0 <_vfiprintf_r>
 8005d6e:	b002      	add	sp, #8
 8005d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d74:	b003      	add	sp, #12
 8005d76:	4770      	bx	lr
 8005d78:	200000b4 	.word	0x200000b4

08005d7c <__swhatbuf_r>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	460c      	mov	r4, r1
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	2900      	cmp	r1, #0
 8005d86:	b096      	sub	sp, #88	@ 0x58
 8005d88:	4615      	mov	r5, r2
 8005d8a:	461e      	mov	r6, r3
 8005d8c:	da0d      	bge.n	8005daa <__swhatbuf_r+0x2e>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d94:	f04f 0100 	mov.w	r1, #0
 8005d98:	bf14      	ite	ne
 8005d9a:	2340      	movne	r3, #64	@ 0x40
 8005d9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005da0:	2000      	movs	r0, #0
 8005da2:	6031      	str	r1, [r6, #0]
 8005da4:	602b      	str	r3, [r5, #0]
 8005da6:	b016      	add	sp, #88	@ 0x58
 8005da8:	bd70      	pop	{r4, r5, r6, pc}
 8005daa:	466a      	mov	r2, sp
 8005dac:	f000 f848 	bl	8005e40 <_fstat_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	dbec      	blt.n	8005d8e <__swhatbuf_r+0x12>
 8005db4:	9901      	ldr	r1, [sp, #4]
 8005db6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005dba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005dbe:	4259      	negs	r1, r3
 8005dc0:	4159      	adcs	r1, r3
 8005dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dc6:	e7eb      	b.n	8005da0 <__swhatbuf_r+0x24>

08005dc8 <__smakebuf_r>:
 8005dc8:	898b      	ldrh	r3, [r1, #12]
 8005dca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dcc:	079d      	lsls	r5, r3, #30
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	d507      	bpl.n	8005de4 <__smakebuf_r+0x1c>
 8005dd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	6123      	str	r3, [r4, #16]
 8005ddc:	2301      	movs	r3, #1
 8005dde:	6163      	str	r3, [r4, #20]
 8005de0:	b003      	add	sp, #12
 8005de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005de4:	ab01      	add	r3, sp, #4
 8005de6:	466a      	mov	r2, sp
 8005de8:	f7ff ffc8 	bl	8005d7c <__swhatbuf_r>
 8005dec:	9f00      	ldr	r7, [sp, #0]
 8005dee:	4605      	mov	r5, r0
 8005df0:	4639      	mov	r1, r7
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7ff f9bc 	bl	8005170 <_malloc_r>
 8005df8:	b948      	cbnz	r0, 8005e0e <__smakebuf_r+0x46>
 8005dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfe:	059a      	lsls	r2, r3, #22
 8005e00:	d4ee      	bmi.n	8005de0 <__smakebuf_r+0x18>
 8005e02:	f023 0303 	bic.w	r3, r3, #3
 8005e06:	f043 0302 	orr.w	r3, r3, #2
 8005e0a:	81a3      	strh	r3, [r4, #12]
 8005e0c:	e7e2      	b.n	8005dd4 <__smakebuf_r+0xc>
 8005e0e:	89a3      	ldrh	r3, [r4, #12]
 8005e10:	6020      	str	r0, [r4, #0]
 8005e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e1e:	b15b      	cbz	r3, 8005e38 <__smakebuf_r+0x70>
 8005e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e24:	4630      	mov	r0, r6
 8005e26:	f000 f81d 	bl	8005e64 <_isatty_r>
 8005e2a:	b128      	cbz	r0, 8005e38 <__smakebuf_r+0x70>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	431d      	orrs	r5, r3
 8005e3c:	81a5      	strh	r5, [r4, #12]
 8005e3e:	e7cf      	b.n	8005de0 <__smakebuf_r+0x18>

08005e40 <_fstat_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	@ (8005e60 <_fstat_r+0x20>)
 8005e44:	2300      	movs	r3, #0
 8005e46:	4604      	mov	r4, r0
 8005e48:	4608      	mov	r0, r1
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	f7fd fa92 	bl	8003376 <_fstat>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d102      	bne.n	8005e5c <_fstat_r+0x1c>
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	b103      	cbz	r3, 8005e5c <_fstat_r+0x1c>
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	bd38      	pop	{r3, r4, r5, pc}
 8005e5e:	bf00      	nop
 8005e60:	200004dc 	.word	0x200004dc

08005e64 <_isatty_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d06      	ldr	r5, [pc, #24]	@ (8005e80 <_isatty_r+0x1c>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f7fd fbe6 	bl	8003640 <_isatty>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_isatty_r+0x1a>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_isatty_r+0x1a>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	200004dc 	.word	0x200004dc

08005e84 <_sbrk_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4d06      	ldr	r5, [pc, #24]	@ (8005ea0 <_sbrk_r+0x1c>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	602b      	str	r3, [r5, #0]
 8005e90:	f7fd fa2c 	bl	80032ec <_sbrk>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_sbrk_r+0x1a>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_sbrk_r+0x1a>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	200004dc 	.word	0x200004dc

08005ea4 <abort>:
 8005ea4:	b508      	push	{r3, lr}
 8005ea6:	2006      	movs	r0, #6
 8005ea8:	f000 f85e 	bl	8005f68 <raise>
 8005eac:	2001      	movs	r0, #1
 8005eae:	f000 f87f 	bl	8005fb0 <_exit>

08005eb2 <_calloc_r>:
 8005eb2:	b570      	push	{r4, r5, r6, lr}
 8005eb4:	fba1 5402 	umull	r5, r4, r1, r2
 8005eb8:	b934      	cbnz	r4, 8005ec8 <_calloc_r+0x16>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7ff f958 	bl	8005170 <_malloc_r>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	b928      	cbnz	r0, 8005ed0 <_calloc_r+0x1e>
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	220c      	movs	r2, #12
 8005eca:	6002      	str	r2, [r0, #0]
 8005ecc:	2600      	movs	r6, #0
 8005ece:	e7f9      	b.n	8005ec4 <_calloc_r+0x12>
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	f7fe f9d2 	bl	800427c <memset>
 8005ed8:	e7f4      	b.n	8005ec4 <_calloc_r+0x12>

08005eda <__ascii_mbtowc>:
 8005eda:	b082      	sub	sp, #8
 8005edc:	b901      	cbnz	r1, 8005ee0 <__ascii_mbtowc+0x6>
 8005ede:	a901      	add	r1, sp, #4
 8005ee0:	b142      	cbz	r2, 8005ef4 <__ascii_mbtowc+0x1a>
 8005ee2:	b14b      	cbz	r3, 8005ef8 <__ascii_mbtowc+0x1e>
 8005ee4:	7813      	ldrb	r3, [r2, #0]
 8005ee6:	600b      	str	r3, [r1, #0]
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	1e10      	subs	r0, r2, #0
 8005eec:	bf18      	it	ne
 8005eee:	2001      	movne	r0, #1
 8005ef0:	b002      	add	sp, #8
 8005ef2:	4770      	bx	lr
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	e7fb      	b.n	8005ef0 <__ascii_mbtowc+0x16>
 8005ef8:	f06f 0001 	mvn.w	r0, #1
 8005efc:	e7f8      	b.n	8005ef0 <__ascii_mbtowc+0x16>

08005efe <__ascii_wctomb>:
 8005efe:	4603      	mov	r3, r0
 8005f00:	4608      	mov	r0, r1
 8005f02:	b141      	cbz	r1, 8005f16 <__ascii_wctomb+0x18>
 8005f04:	2aff      	cmp	r2, #255	@ 0xff
 8005f06:	d904      	bls.n	8005f12 <__ascii_wctomb+0x14>
 8005f08:	228a      	movs	r2, #138	@ 0x8a
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	4770      	bx	lr
 8005f12:	700a      	strb	r2, [r1, #0]
 8005f14:	2001      	movs	r0, #1
 8005f16:	4770      	bx	lr

08005f18 <_raise_r>:
 8005f18:	291f      	cmp	r1, #31
 8005f1a:	b538      	push	{r3, r4, r5, lr}
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	d904      	bls.n	8005f2c <_raise_r+0x14>
 8005f22:	2316      	movs	r3, #22
 8005f24:	6003      	str	r3, [r0, #0]
 8005f26:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005f2e:	b112      	cbz	r2, 8005f36 <_raise_r+0x1e>
 8005f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f34:	b94b      	cbnz	r3, 8005f4a <_raise_r+0x32>
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f830 	bl	8005f9c <_getpid_r>
 8005f3c:	4622      	mov	r2, r4
 8005f3e:	4601      	mov	r1, r0
 8005f40:	4628      	mov	r0, r5
 8005f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f46:	f000 b817 	b.w	8005f78 <_kill_r>
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d00a      	beq.n	8005f64 <_raise_r+0x4c>
 8005f4e:	1c59      	adds	r1, r3, #1
 8005f50:	d103      	bne.n	8005f5a <_raise_r+0x42>
 8005f52:	2316      	movs	r3, #22
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	2001      	movs	r0, #1
 8005f58:	e7e7      	b.n	8005f2a <_raise_r+0x12>
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005f60:	4620      	mov	r0, r4
 8005f62:	4798      	blx	r3
 8005f64:	2000      	movs	r0, #0
 8005f66:	e7e0      	b.n	8005f2a <_raise_r+0x12>

08005f68 <raise>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	@ (8005f74 <raise+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f7ff bfd3 	b.w	8005f18 <_raise_r>
 8005f72:	bf00      	nop
 8005f74:	200000b4 	.word	0x200000b4

08005f78 <_kill_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	@ (8005f98 <_kill_r+0x20>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f000 f80b 	bl	8005fa0 <_kill>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d102      	bne.n	8005f94 <_kill_r+0x1c>
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	b103      	cbz	r3, 8005f94 <_kill_r+0x1c>
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	bf00      	nop
 8005f98:	200004dc 	.word	0x200004dc

08005f9c <_getpid_r>:
 8005f9c:	f7fd b9a4 	b.w	80032e8 <_getpid>

08005fa0 <_kill>:
 8005fa0:	4b02      	ldr	r3, [pc, #8]	@ (8005fac <_kill+0xc>)
 8005fa2:	2258      	movs	r2, #88	@ 0x58
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005faa:	4770      	bx	lr
 8005fac:	200004dc 	.word	0x200004dc

08005fb0 <_exit>:
 8005fb0:	e7fe      	b.n	8005fb0 <_exit>
	...

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
